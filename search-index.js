var searchIndex = JSON.parse('{\
"melior":{"doc":"Melior is the rustic MLIR bindings for Rust. It aims to …","t":"NNDDEDNNNNNNNNNDNNLLLLLLLLLLLLLLLLLLLALLLLLLLLLLLLLLLLLLLLLLLLLALLLLLALLLLLLLLLLLLLLLLLLLLLADDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLALLLLLLLLLLLLLLLLLLLLLLLAFFFFFFDDCCDDDCCDDCIDILLLALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLALLLLLLLLKKLLLLLLLLLLLLLLLLLLLLLALLLLLLLLLLLLLDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDCDDILLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLDDLLLLLLLLLLLLLLLLLLLLLLLLLDDDLLLLLLLLLLLALLLLLLLLLLLLLLLLLALLLLLLLLLFFFFFFFFFFFFFFFFFFFFFFFFFFF","n":["BlockArgumentExpected","BlockArgumentPosition","Context","ContextRef","Error","ExecutionEngine","FunctionExpected","FunctionInputPosition","FunctionResultPosition","InvokeFunction","MemRefExpected","OperationResultExpected","OperationResultPosition","ParsePassPipeline","RunPass","StringRef","TupleExpected","TupleFieldPosition","allow_unregistered_dialects","append_dialect_registry","as_str","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","deref","dialect","drop","drop","enable_multi_threading","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","get_or_load_dialect","into","into","into","into","into","invoke_packed","ir","is_registered_operation","load_all_available_dialects","loaded_dialect_count","new","new","pass","provide","registered_dialect_count","set_allow_unregistered_dialects","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","utility","Dialect","Handle","Registry","async","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","cf","clone","clone","clone_into","clone_into","context","default","drop","eq","fmt","fmt","fmt","from","from","from","func","gpu","insert_dialect","into","into","into","linalg","llvm","llvm","load_dialect","namespace","namespace","new","pdl","quant","register_dialect","scf","shape","sparse_tensor","tensor","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","type","array","function","opaque_pointer","pointer","struct","void","AffineMap","Attribute","Block","BlockRef","Identifier","Location","Module","Operation","OperationRef","Region","RegionRef","Type","TypeLike","Value","ValueLike","append_block","as_operation","as_string_ref","block","body","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","context","context","context","context","context","default","deref","drop","drop","dump","dump","dump","dump","eq","eq","eq","eq","eq","eq","eq","first_block","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from_operation","fused","insert_block_after","insert_block_before","into","into","into","into","into","into","into","into","is_affine_map","is_array","is_block_argument","is_block_argument","is_bool","is_dense_elements","is_dense_float_elements","is_dense_integer_elements","is_dictionary","is_elements","is_float","is_integer","is_integer_set","is_null","is_opaque","is_operation_result","is_operation_result","is_sparse_elements","is_string","is_symbol","is_type","is_unit","name","new","new","new","new","null","operation","parse","parse","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_raw","to_raw","to_raw","to_string","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type","type","type","type","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unknown","Argument","Block","BlockRef","add_argument","append_operation","argument","argument_count","argument_number","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","deref","detach","drop","eq","eq","first_operation","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","insert_operation","insert_operation_after","insert_operation_before","into","into","into","new","next_in_region","owner","parent_operation","parent_region","set_type","terminator","to_owned","to_owned","to_raw","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","Builder","Operation","OperationRef","ResultValue","add_attributes","add_operands","add_regions","add_results","add_successors","block","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","build","clone","clone","clone","clone_into","clone_into","clone_into","context","deref","drop","dump","enable_result_type_inference","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","into","into","into","into","name","new","next_in_block","owner","region","region_count","result","result_count","result_number","to_owned","to_owned","to_owned","to_raw","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","verify","Function","Id","Tuple","Type","TypeLike","bfloat16","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","context","context","context","dump","dump","dump","eq","float16","float32","float64","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","get_width","get_width","get_width","id","id","id","id","index","input","input_count","integer","into","into","into","is_bfloat16","is_bfloat16","is_bfloat16","is_float16","is_float16","is_float16","is_float32","is_float32","is_float32","is_float64","is_float64","is_float64","is_function","is_function","is_function","is_index","is_index","is_index","is_integer","is_integer","is_integer","is_mem_ref","is_mem_ref","is_mem_ref","is_tuple","is_tuple","is_tuple","is_vector","is_vector","is_vector","new","new","none","parse","result","result_count","signed_integer","to_owned","to_owned","to_owned","to_raw","to_raw","to_raw","to_raw","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","type","type_count","type_id","type_id","type_id","unsigned_integer","vector","vector_checked","Allocator","Id","allocate_type_id","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","default","drop","eq","fmt","fmt","from","from","hash","into","into","new","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","Manager","OperationManager","Pass","add_pass","add_pass","as_operation_pass_manager","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","conversion","drop","enable_ir_printing","enable_verifier","fmt","fmt","from","from","from","into","into","into","nested_under","nested_under","new","run","to_owned","to_string","transform","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","convert_arithmetic_to_llvm","convert_func_to_llvm","convert_math_to_libm","convert_math_to_llvm","convert_math_to_spirv","convert_scf_to_llvm","convert_scf_to_spirv","canonicalizer","cse","inliner","print_operation_stats","register_canonicalizer","register_cse","register_inliner","register_print_operation_stats","register_sccp","register_strip_debug_info","register_symbol_dce","register_symbol_privatize","sccp","strip_debug_info","symbol_dce","symbol_privatize","parse_pass_pipeline","register_all_dialects","register_all_llvm_translations","register_all_passes"],"q":["melior","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","melior::dialect","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","melior::dialect::llvm","melior::dialect::llvm::type","","","","","","melior::irmelior::ir::block","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","melior::ir::operation","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","melior::ir::type","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","melior::ir::type::id","","","","","","","","","","","","","","","","","","","","","","","","","","","melior::pass","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","melior::pass::conversion","","","","","","","melior::pass::transform","","","","","","","","","","","","","","","","melior::utility","","",""],"d":["","","A context of IR, dialects, and passes.","A reference to a context.","A Melior error.","An execution engine.","","","","","","","","","","A string reference.","","","Returns <code>true</code> if unregistered dialects are allowed.","Appends a dialect registry.","Converts a string reference into a <code>str</code>.","","","","","","","","","","","","","","","","","Dialect handles, instances, and registry.","","","Enables multi-threading.","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Gets or loads a dialect.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Invokes a function in a module. The <code>arguments</code> argument …","IR objects and builders.","Returns <code>true</code> if a given operation is registered in a …","Loads all available dialects.","Gets a number of loaded dialects.","Creates an execution engine.","Creates a context.","Passes and pass managers.","","Gets a number of registered dialects.","Set if unregistered dialects are allowed.","","","","","","","","","","","","","","","","","","","Utility functions.","A dialect.","A dialect handle.","A dialect registry.","Creates a <code>async</code> dialect handle.","","","","","","","Creates a <code>cf</code> dialect handle.","","","","","Gets a context.","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Creates a <code>func</code> dialect handle.","Creates a <code>gpu</code> dialect handle.","Inserts a dialect into a dialect registry.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Creates a <code>linalg</code> dialect handle.","The <code>llvm</code> dialect","Creates a <code>llvm</code> dialect handle.","Loads a dialect into a context.","Gets a namespace.","Gets a namespace.","Creates a dialect registry.","Creates a <code>pdl</code> dialect handle.","Creates a <code>quant</code> dialect handle.","Registers a dialect into a context.","Creates a <code>scf</code> dialect handle.","Creates a <code>shape</code> dialect handle.","Creates a <code>sparse_tensor</code> dialect handle.","Creates a <code>tensor</code> dialect handle.","","","","","","","","","","","","LLVM types","Creates an LLVM array type.","Creates an LLVM function type.","Creates an LLVM opaque pointer type.","Creates an LLVM pointer type.","Creates an LLVM struct type.","Creates an LLVM void type.","An affine map.","An attribute.","","","An identifier.","A location","A module.","","","A region.","A reference to a region.","","Trait for type-like types.","A value.","Trait for value-like types.","Appends a block.","Converts a module into an operation.","Converts an identifier into a string reference.","Blocks.","Gets a block of a module body.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Gets a context.","Gets a context.","Gets a context.","Gets a context.","Gets a context.","","","","","Dumps a value.","Dumps a value.","Dumps an affine map.","Dumps an attribute.","","","","","","","","Gets the first block in a region.","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","Converts an operation into a module.","Creates a fused location.","Inserts a block after another block.","Inserts a block before another block.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns <code>true</code> if an attribute is a affine map.","Returns <code>true</code> if an attribute is a array.","Returns <code>true</code> if a value is a block argument.","Returns <code>true</code> if a value is a block argument.","Returns <code>true</code> if an attribute is a bool.","Returns <code>true</code> if an attribute is dense elements.","Returns <code>true</code> if an attribute is dense float elements.","Returns <code>true</code> if an attribute is dense integer elements.","Returns <code>true</code> if an attribute is a dictionary.","Returns <code>true</code> if an attribute is elements.","Returns <code>true</code> if an attribute is a float.","Returns <code>true</code> if an attribute is an integer.","Returns <code>true</code> if an attribute is an integer set.","Returns <code>true</code> if an attribute is null.","Returns <code>true</code> if an attribute is opaque.","Returns <code>true</code> if a value is an operation result.","Returns <code>true</code> if a value is an operation result.","Returns <code>true</code> if an attribute is sparse elements.","Returns <code>true</code> if an attribute is a string.","Returns <code>true</code> if an attribute is a symbol.","Returns <code>true</code> if an attribute is a type.","Returns <code>true</code> if an attribute is a unit.","Creates a name location.","Creates an identifier.","Creates a location with a filename and line and column …","Creates a module.","Creates a region.","Creates a null attribute.","Operations and operation builders.","Parses an attribute.","Parses a module.","","","","","","","Converts a type into a raw type.","Converts a value into a raw value.","","","","","","","","","","","","","","","","","","","","","","Types and type IDs.","Gets a type.","Gets a type.","Gets a type.","","Gets a type ID.","","","","","","","","Creates an unknown location.","A block argument.","A block.","A reference of a block.","Adds an argument.","Appends an operation.","Gets an argument at a position.","Gets a number of arguments.","","","","","","","","","","","","","Detaches a block from a region and assumes its ownership.","","","","Gets the first operation.","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Inserts an operation.","Inserts an operation after another.","Inserts an operation before another.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Creates a block.","Gets a next block in a region.","","Gets a parent operation.","Gets a parent region.","","Gets a terminator operation.","","","","","","","","","","","","","","","","","An operation builder.","An operation.","A reference to an operation.","An operation result.","Adds attributes.","Adds operands.","Adds regions.","Adds results.","Adds successor blocks.","Gets a block.","","","","","","","","","Builds an operation.","","","","","","","Gets a context.","","","Dumps an operation.","Enables result type inference.","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Gets a name.","Creates an operation builder.","Gets the next operation in the same block.","","Gets a result at an index.","Gets a number of regions.","Gets a result at a position.","Gets a number of results.","","","","","","","","","","","","","","","","","","","","","","Verifies an operation.","A function type.","","A tuple type.","A type.","Trait for type-like types.","Creates a bfloat16 type.","","","","","","","","","","","","","Gets a context.","Gets a context.","Gets a context.","Dumps a type.","Dumps a type.","Dumps a type.","","Creates a float16 type.","Creates a float32 type.","Creates a float64 type.","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Gets a bit width of an integer type.","Gets a bit width of an integer type.","Gets a bit width of an integer type.","Type IDs and allocators","Gets an ID.","Gets an ID.","Gets an ID.","Creates an index type.","Gets an input at a position.","Gets a number of inputs.","Creates an integer type.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns <code>true</code> if a type is bfloat16.","Returns <code>true</code> if a type is bfloat16.","Returns <code>true</code> if a type is bfloat16.","Returns <code>true</code> if a type is float16.","Returns <code>true</code> if a type is float16.","Returns <code>true</code> if a type is float16.","Returns <code>true</code> if a type is float32.","Returns <code>true</code> if a type is float32.","Returns <code>true</code> if a type is float32.","Returns <code>true</code> if a type is float64.","Returns <code>true</code> if a type is float64.","Returns <code>true</code> if a type is float64.","Returns <code>true</code> if a type is a function.","Returns <code>true</code> if a type is a function.","Returns <code>true</code> if a type is a function.","Returns <code>true</code> if a type is index.","Returns <code>true</code> if a type is index.","Returns <code>true</code> if a type is index.","Returns <code>true</code> if a type is integer.","Returns <code>true</code> if a type is integer.","Returns <code>true</code> if a type is integer.","Returns <code>true</code> if a type is a memory reference.","Returns <code>true</code> if a type is a memory reference.","Returns <code>true</code> if a type is a memory reference.","Returns <code>true</code> if a type is a tuple.","Returns <code>true</code> if a type is a tuple.","Returns <code>true</code> if a type is a tuple.","Returns <code>true</code> if a type is a vector.","Returns <code>true</code> if a type is a vector.","Returns <code>true</code> if a type is a vector.","Creates a function type.","Creates a tuple type.","Creates a none type.","Parses a type.","Gets a result at a position.","Gets a number of results.","Creates a signed integer type.","","","","Converts a type into a raw type.","","","","","","","","","","","","","","","Gets a field at a position.","Gets a number of fields.","","","","Creates an unsigned integer type.","Creates a vector type.","Creates a vector type with diagnostics.","A type ID allocator.","A type ID.","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","A pass manager.","An operation pass manager.","A pass.","Adds a pass.","Adds a pass.","Converts a pass manager to an operation pass manager.","","","","","","","","","Dialect conversion passes.","","Enables IR printing.","Enables a verifier.","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Gets an operation pass manager for nested operations …","Gets an operation pass manager for nested operations …","Creates a pass manager.","Runs passes added to a pass manager against a module.","","","General transformation passes.","","","","","","","","","","Creates a pass to convert the <code>arith</code> dialect to the <code>llvm</code> …","Creates a pass to convert the <code>func</code> dialect to the <code>llvm</code> …","Creates a pass to convert the <code>math</code> dialect to the <code>libm</code> …","Creates a pass to convert the <code>math</code> dialect to the <code>llvm</code> …","Creates a pass to convert the <code>math</code> dialect to the <code>spirv</code> …","Creates a pass to convert the <code>cf</code> dialect to the <code>llvm</code> …","Creates a pass to convert the <code>cf</code> dialect to the <code>spirv</code> …","Creates a pass to canonicalize IR.","Creates a pass to eliminate common sub-expressions.","Creates a pass to inline function calls.","Creates a pass to print operation statistics.","Registers a pass to canonicalize IR.","Registers a pass to print operation stats.","Registers a pass to inline function calls.","Registers a pass to print operation stats.","Registers a pass to propagate constants.","Registers a pass to strip debug information.","Registers a pass to eliminate dead symbols.","Registers a pass to mark all top-level symbols private.","Creates a pass to propagate constants.","Creates a pass to strip debug information.","Creates a pass to eliminate dead symbols.","Creates a pass to mark all top-level symbols private.","Parses a pass pipeline.","Registers all dialects to a dialect registry.","Register all translations from other dialects to the <code>llvm</code> …","Register all passes."],"i":[10,10,0,0,0,0,10,10,10,10,10,10,10,10,10,0,10,10,1,1,4,9,1,8,10,4,9,1,8,10,4,8,4,8,4,1,8,0,9,1,1,1,8,10,4,1,8,10,10,4,9,1,8,10,4,4,1,9,1,8,10,4,9,0,1,1,1,9,1,0,10,1,1,8,4,10,9,1,8,10,4,9,1,8,10,4,9,1,8,10,4,0,0,0,0,19,19,3,13,19,3,13,19,19,13,19,13,13,3,3,13,19,3,13,19,3,13,19,19,19,19,3,13,19,0,19,19,19,13,3,19,19,19,19,19,19,19,19,13,19,3,13,19,3,13,19,3,13,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,22,15,26,0,15,27,28,26,29,15,22,30,31,27,28,26,29,15,22,30,31,27,28,26,29,30,31,27,28,26,29,30,31,27,28,26,29,15,22,30,15,22,47,47,27,28,27,28,26,29,22,30,31,22,27,27,28,28,26,29,29,15,22,30,31,31,27,28,26,29,15,22,30,31,31,31,15,29,22,22,27,28,26,29,15,22,30,31,28,28,47,47,28,28,28,28,28,28,28,28,28,28,28,47,47,28,28,28,28,28,29,26,29,15,22,28,0,28,15,27,28,26,29,30,31,48,47,31,27,28,29,31,27,28,26,29,15,22,30,31,27,28,26,29,15,22,30,31,0,47,47,28,27,28,28,26,29,15,22,30,31,29,0,0,0,23,23,23,23,34,23,34,24,23,34,24,34,24,34,24,24,23,23,23,24,23,23,23,34,34,24,24,23,34,24,23,23,23,23,34,24,23,23,34,23,23,34,23,34,24,34,23,34,24,23,34,34,24,23,34,24,23,34,24,0,0,0,0,39,39,39,39,39,35,39,35,33,25,39,35,33,25,39,35,33,25,35,33,25,35,25,35,35,39,35,25,35,35,33,33,25,25,39,35,33,25,39,35,33,25,35,39,35,33,35,35,35,35,33,35,33,25,33,35,33,25,39,35,33,33,25,39,35,33,25,39,35,33,25,35,0,0,0,0,0,20,41,42,20,41,42,20,41,42,20,41,42,20,48,48,48,48,48,48,20,20,20,20,41,41,42,42,20,20,41,42,20,20,20,48,48,48,0,48,48,48,20,41,41,20,41,42,20,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,41,42,20,20,41,41,20,41,42,20,48,41,42,20,41,42,20,41,41,42,42,20,41,42,20,42,42,41,42,20,20,20,20,0,0,43,43,38,43,38,38,38,43,43,38,43,38,43,38,38,43,38,43,38,43,38,43,38,43,38,0,0,0,44,46,44,44,45,46,44,45,46,46,46,0,44,44,44,46,46,44,45,46,44,45,46,44,46,44,44,46,46,0,44,45,46,44,45,46,44,45,46,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[1,2],[[1,3]],[4,[[7,[5,6]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[8,8],[4,4],[[]],[[]],[[],1],[8],0,[9],[1],[[1,2]],[[1,1],2],[[8,8],2],[[10,10],2],[[4,4],2],[[1,11],12],[[8,11],12],[[10,11],12],[[10,11],12],[[4,11],12],[[]],[[]],[[]],[[]],[5,4],[[]],[[1,5],13],[[]],[[]],[[]],[[]],[[]],[[9,5],[[7,[10]]]],0,[[1,5],2],[1],[1,14],[[15,14,2],9],[[],1],0,[16],[1,14],[[1,2]],[[]],[[]],[[],17],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],18],[[],18],[[],18],[[],18],[[],18],0,0,0,0,[[],19],[[]],[[]],[[]],[[]],[[]],[[]],[[],19],[19,19],[13,13],[[]],[[]],[13,8],[[],3],[3],[[13,13],2],[[19,11],12],[[3,11],12],[[13,11],12],[[]],[[]],[[]],[[],19],[[],19],[[19,3]],[[]],[[]],[[]],[[],19],0,[[],19],[[19,1],13],[19,4],[13,4],[[],3],[[],19],[[],19],[[19,1]],[[],19],[[],19],[[],19],[[],19],[[]],[[]],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],18],[[],18],[[],18],0,[[20,21],20],[[20,2],20],[1,20],[[20,21],20],[[1,2],20],[1,20],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[22,23],24],[15,25],[26,4],0,[15,24],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[27,27],[28,28],[26,26],[29,29],[30,30],[31,31],[[]],[[]],[[]],[[]],[[]],[[]],[27,8],[28,8],[26,8],[29,8],[15,8],[[],22],[30],[15],[22],[[]],[[]],[27],[28],[[27,27],2],[[28,28],2],[[26,26],2],[[29,29],2],[[22,22],2],[[30,30],2],[[31,31],2],[22,[[32,[24]]]],[[27,11],12],[[27,11],12],[[28,11],12],[[28,11],12],[[26,11],12],[[29,11],12],[[29,11],12],[[15,11],12],[[22,11],12],[[30,11],12],[[31,11],12],[[31,11],12],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[33,31],[[]],[34,31],[35,[[32,[15]]]],[[1,28],29],[[22,24,23],24],[[22,24,23],24],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[28,2],[28,2],[[],2],[[],2],[28,2],[28,2],[28,2],[28,2],[28,2],[28,2],[28,2],[28,2],[28,2],[28,2],[28,2],[[],2],[[],2],[28,2],[28,2],[28,2],[28,2],[28,2],[[1,5,29],29],[[1,5],26],[[1,5,14,14],29],[29,15],[[],22],[[],28],0,[[1,5],[[32,[28]]]],[[1,5],[[32,[15]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],36],[[],37],[31,37],[[],17],[[],17],[[],17],[[],17],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],0,[[],20],[[],20],[28,[[32,[20]]]],[[],18],[28,[[32,[38]]]],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[1,29],0,0,0,[[23,20,29],31],[[23,35],25],[[23,14],[[7,[34,10]]]],[23,14],[34,14],[[]],[[]],[[]],[[]],[[]],[[]],[34,34],[24,24],[[]],[[]],[24],[23,[[32,[23]]]],[23],[[23,23],2],[[24,24],2],[23,[[32,[25]]]],[[23,11],12],[[23,11],12],[[34,11],12],[[34,11],12],[[24,11],12],[[24,11],12],[[]],[[]],[[]],[[23,14,35],25],[[23,25,35],25],[[23,25,35],25],[[]],[[]],[[]],[[],23],[23,[[32,[24]]]],[34,24],[23,[[32,[25]]]],[23,[[32,[30]]]],[[34,20]],[23,[[32,[25]]]],[[]],[[]],[34,37],[[],17],[[],17],[[],17],[[],7],[[],7],[31,[[7,[34]]]],[[],7],[[],7],[[],7],[[],7],[[],18],[[],18],[[],18],0,0,0,0,[39,39],[39,39],[[39,[40,[22]]],39],[39,39],[39,39],[35,[[32,[24]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[39,35],[35,35],[33,33],[25,25],[[]],[[]],[[]],[35,8],[25],[35],[35],[39,39],[[35,35],2],[[25,25],2],[[35,11],12],[[35,11],12],[[33,11],12],[[33,11],12],[[25,11],12],[[25,11],12],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[35,26],[[5,29],39],[35,[[32,[25]]]],[33,25],[[35,14],[[32,[30]]]],[35,14],[[35,14],[[7,[33,10]]]],[35,14],[33,14],[[]],[[]],[[]],[33,37],[[],17],[[],17],[[],17],[[],7],[[],7],[31,[[7,[33]]]],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],18],[[],18],[[],18],[[],18],[35,2],0,0,0,0,0,[1,20],[[]],[[]],[[]],[[]],[[]],[[]],[41,41],[42,42],[20,20],[[]],[[]],[[]],[[],8],[[],8],[[],8],[[]],[[]],[[]],[[20,20],2],[1,20],[1,20],[1,20],[[41,11],12],[[41,11],12],[[42,11],12],[[42,11],12],[[20,11],12],[[20,11],12],[[]],[[]],[[]],[42,20],[41,20],[[],[[32,[14]]]],[[],[[32,[14]]]],[[],[[32,[14]]]],0,[[],38],[[],38],[[],38],[1,20],[[41,14],[[7,[20,10]]]],[41,14],[[1,21],20],[[]],[[]],[[]],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[1,41],[1,42],[1,20],[[1,5],[[32,[20]]]],[[41,14],[[7,[20,10]]]],[41,14],[[1,21],20],[[]],[[]],[[]],[[],36],[41,36],[42,36],[20,36],[[],17],[[],17],[[],17],[[],7],[20,[[7,[41]]]],[20,[[7,[42]]]],[[],7],[[],7],[[],7],[[],7],[[],7],[[42,14],[[7,[20,10]]]],[42,14],[[],18],[[],18],[[],18],[[1,21],20],[20,20],[[29,20],[[32,[20]]]],0,0,[43,38],[[]],[[]],[[]],[[]],[38,38],[[]],[[],43],[43],[[38,38],2],[[43,11],12],[[38,11],12],[[]],[[]],[38],[[]],[[]],[[],43],[[]],[[],7],[[],7],[[],7],[[],7],[[],18],[[],18],0,0,0,[[44,45]],[[46,45]],[44,46],[[]],[[]],[[]],[[]],[[]],[[]],[46,46],[[]],0,[44],[44],[[44,2]],[[46,11],12],[[46,11],12],[[]],[[]],[[]],[[]],[[]],[[]],[[44,5],46],[[46,5],46],[1,44],[[44,15],[[7,[10]]]],[[]],[[],17],0,[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],18],[[],18],[[],18],[[],45],[[],45],[[],45],[[],45],[[],45],[[],45],[[],45],[[],45],[[],45],[[],45],[[],45],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],45],[[],45],[[],45],[[],45],[[46,5],[[7,[10]]]],[3],[1],[[]]],"p":[[3,"Context"],[15,"bool"],[3,"Registry"],[3,"StringRef"],[15,"str"],[3,"Utf8Error"],[4,"Result"],[3,"ContextRef"],[3,"ExecutionEngine"],[4,"Error"],[3,"Formatter"],[6,"Result"],[3,"Dialect"],[15,"usize"],[3,"Module"],[3,"Demand"],[3,"String"],[3,"TypeId"],[3,"Handle"],[3,"Type"],[15,"u32"],[3,"Region"],[3,"Block"],[3,"BlockRef"],[3,"OperationRef"],[3,"Identifier"],[3,"AffineMap"],[3,"Attribute"],[3,"Location"],[3,"RegionRef"],[3,"Value"],[4,"Option"],[3,"ResultValue"],[3,"Argument"],[3,"Operation"],[3,"MlirType"],[3,"MlirValue"],[3,"Id"],[3,"Builder"],[3,"Vec"],[3,"Function"],[3,"Tuple"],[3,"Allocator"],[3,"Manager"],[3,"Pass"],[3,"OperationManager"],[8,"ValueLike"],[8,"TypeLike"]]},\
"mlir_sys":{"doc":"","t":"RRRRRRRRRRRRRRRRRRRRDDDDDDGGGRRRRDDDDDDDDDDDDDDDDDDDDGRRRRRRRRRGDDDDDGDRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRMGGGRGMMGGGGGGGGDGGRGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMRLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMGGGGGGGGGLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMDFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLRLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLGGGGGGGGGMG","n":["INT16_MAX","INT16_MIN","INT32_MAX","INT32_MIN","INT8_MAX","INT8_MIN","INTPTR_MAX","INTPTR_MIN","INT_FAST16_MAX","INT_FAST16_MIN","INT_FAST32_MAX","INT_FAST32_MIN","INT_FAST8_MAX","INT_FAST8_MIN","INT_LEAST16_MAX","INT_LEAST16_MIN","INT_LEAST32_MAX","INT_LEAST32_MIN","INT_LEAST8_MAX","INT_LEAST8_MIN","MlirAffineExpr","MlirAffineMap","MlirAttribute","MlirBlock","MlirContext","MlirDiagnostic","MlirDiagnosticHandler","MlirDiagnosticHandlerID","MlirDiagnosticSeverity","MlirDiagnosticSeverity_MlirDiagnosticError","MlirDiagnosticSeverity_MlirDiagnosticNote","MlirDiagnosticSeverity_MlirDiagnosticRemark","MlirDiagnosticSeverity_MlirDiagnosticWarning","MlirDialect","MlirDialectHandle","MlirDialectRegistry","MlirExecutionEngine","MlirExternalPass","MlirExternalPassCallbacks","MlirIdentifier","MlirIntegerSet","MlirLocation","MlirLogicalResult","MlirModule","MlirNamedAttribute","MlirOpOperand","MlirOpPassManager","MlirOpPrintingFlags","MlirOperation","MlirOperationState","MlirPass","MlirPassManager","MlirRegion","MlirSparseTensorDimLevelType","MlirSparseTensorDimLevelType_MLIR_SPARSE_TENSOR_DIM_LEVEL_COMPRESSED","MlirSparseTensorDimLevelType_MLIR_SPARSE_TENSOR_DIM_LEVEL_COMPRESSED_NO","MlirSparseTensorDimLevelType_MLIR_SPARSE_TENSOR_DIM_LEVEL_COMPRESSED_NU","MlirSparseTensorDimLevelType_MLIR_SPARSE_TENSOR_DIM_LEVEL_COMPRESSED_NU_NO","MlirSparseTensorDimLevelType_MLIR_SPARSE_TENSOR_DIM_LEVEL_DENSE","MlirSparseTensorDimLevelType_MLIR_SPARSE_TENSOR_DIM_LEVEL_SINGLETON","MlirSparseTensorDimLevelType_MLIR_SPARSE_TENSOR_DIM_LEVEL_SINGLETON_NO","MlirSparseTensorDimLevelType_MLIR_SPARSE_TENSOR_DIM_LEVEL_SINGLETON_NU","MlirSparseTensorDimLevelType_MLIR_SPARSE_TENSOR_DIM_LEVEL_SINGLETON_NU_NO","MlirStringCallback","MlirStringRef","MlirSymbolTable","MlirType","MlirTypeID","MlirTypeIDAllocator","MlirTypesCallback","MlirValue","PTRDIFF_MAX","PTRDIFF_MIN","SIG_ATOMIC_MAX","SIG_ATOMIC_MIN","SIZE_MAX","UINT16_MAX","UINT32_MAX","UINT8_MAX","UINTPTR_MAX","UINT_FAST16_MAX","UINT_FAST32_MAX","UINT_FAST8_MAX","UINT_LEAST16_MAX","UINT_LEAST32_MAX","UINT_LEAST8_MAX","WINT_MAX","WINT_MIN","_ATFILE_SOURCE","_BITS_STDINT_INTN_H","_BITS_STDINT_UINTN_H","_BITS_TIME64_H","_BITS_TYPESIZES_H","_BITS_TYPES_H","_BITS_WCHAR_H","_DEFAULT_SOURCE","_FEATURES_H","_POSIX_C_SOURCE","_POSIX_SOURCE","_STDC_PREDEF_H","_STDINT_H","_SYS_CDEFS_H","__FD_SETSIZE","__GLIBC_MINOR__","__GLIBC_USE_DEPRECATED_GETS","__GLIBC_USE_DEPRECATED_SCANF","__GLIBC_USE_IEC_60559_BFP_EXT","__GLIBC_USE_IEC_60559_BFP_EXT_C2X","__GLIBC_USE_IEC_60559_EXT","__GLIBC_USE_IEC_60559_FUNCS_EXT","__GLIBC_USE_IEC_60559_FUNCS_EXT_C2X","__GLIBC_USE_IEC_60559_TYPES_EXT","__GLIBC_USE_ISOC2X","__GLIBC_USE_LIB_EXT2","__GLIBC__","__GNU_LIBRARY__","__HAVE_GENERIC_SELECTION","__INO_T_MATCHES_INO64_T","__KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64","__LDOUBLE_REDIRECTS_TO_FLOAT128_ABI","__OFF_T_MATCHES_OFF64_T","__RLIM_T_MATCHES_RLIM64_T","__STATFS_MATCHES_STATFS64","__STDC_IEC_559_COMPLEX__","__STDC_IEC_559__","__STDC_IEC_60559_BFP__","__STDC_IEC_60559_COMPLEX__","__STDC_ISO_10646__","__SYSCALL_WORDSIZE","__TIMESIZE","__USE_ATFILE","__USE_FORTIFY_LEVEL","__USE_ISOC11","__USE_ISOC95","__USE_ISOC99","__USE_MISC","__USE_POSIX","__USE_POSIX199309","__USE_POSIX199506","__USE_POSIX2","__USE_POSIX_IMPLICITLY","__USE_XOPEN2K","__USE_XOPEN2K8","__WORDSIZE","__WORDSIZE_TIME64_COMPAT32","__bindgen_padding_0","__blkcnt64_t","__blkcnt_t","__blksize_t","__bool_true_false_are_defined","__caddr_t","__clang_max_align_nonce1","__clang_max_align_nonce2","__clock_t","__clockid_t","__daddr_t","__dev_t","__fsblkcnt64_t","__fsblkcnt_t","__fsfilcnt64_t","__fsfilcnt_t","__fsid_t","__fsword_t","__gid_t","__glibc_c99_flexarr_available","__id_t","__ino64_t","__ino_t","__int16_t","__int32_t","__int64_t","__int8_t","__int_least16_t","__int_least32_t","__int_least64_t","__int_least8_t","__intmax_t","__intptr_t","__key_t","__loff_t","__mode_t","__nlink_t","__off64_t","__off_t","__pid_t","__quad_t","__rlim64_t","__rlim_t","__sig_atomic_t","__socklen_t","__ssize_t","__suseconds64_t","__suseconds_t","__syscall_slong_t","__syscall_ulong_t","__time_t","__timer_t","__u_char","__u_int","__u_long","__u_quad_t","__u_short","__uid_t","__uint16_t","__uint32_t","__uint64_t","__uint8_t","__uint_least16_t","__uint_least32_t","__uint_least64_t","__uint_least8_t","__uintmax_t","__useconds_t","__val","attribute","attributes","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","construct","data","destruct","enableResultTypeInference","false_","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","initialize","int_fast16_t","int_fast32_t","int_fast64_t","int_fast8_t","int_least16_t","int_least32_t","int_least64_t","int_least8_t","intmax_t","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","length","location","max_align_t","mlirAffineAddExprGet","mlirAffineBinaryOpExprGetLHS","mlirAffineBinaryOpExprGetRHS","mlirAffineCeilDivExprGet","mlirAffineConstantExprGet","mlirAffineConstantExprGetValue","mlirAffineDimExprGet","mlirAffineDimExprGetPosition","mlirAffineExprCompose","mlirAffineExprDump","mlirAffineExprEqual","mlirAffineExprGetContext","mlirAffineExprGetLargestKnownDivisor","mlirAffineExprIsAAdd","mlirAffineExprIsABinary","mlirAffineExprIsACeilDiv","mlirAffineExprIsAConstant","mlirAffineExprIsADim","mlirAffineExprIsAFloorDiv","mlirAffineExprIsAMod","mlirAffineExprIsAMul","mlirAffineExprIsASymbol","mlirAffineExprIsFunctionOfDim","mlirAffineExprIsMultipleOf","mlirAffineExprIsPureAffine","mlirAffineExprIsSymbolicOrConstant","mlirAffineExprPrint","mlirAffineFloorDivExprGet","mlirAffineMapAttrGet","mlirAffineMapAttrGetValue","mlirAffineMapCompressUnusedSymbols","mlirAffineMapConstantGet","mlirAffineMapDump","mlirAffineMapEmptyGet","mlirAffineMapEqual","mlirAffineMapGet","mlirAffineMapGetContext","mlirAffineMapGetMajorSubMap","mlirAffineMapGetMinorSubMap","mlirAffineMapGetNumDims","mlirAffineMapGetNumInputs","mlirAffineMapGetNumResults","mlirAffineMapGetNumSymbols","mlirAffineMapGetResult","mlirAffineMapGetSingleConstantResult","mlirAffineMapGetSubMap","mlirAffineMapIsEmpty","mlirAffineMapIsIdentity","mlirAffineMapIsMinorIdentity","mlirAffineMapIsPermutation","mlirAffineMapIsProjectedPermutation","mlirAffineMapIsSingleConstant","mlirAffineMapMinorIdentityGet","mlirAffineMapMultiDimIdentityGet","mlirAffineMapPermutationGet","mlirAffineMapPrint","mlirAffineMapReplace","mlirAffineMapZeroResultGet","mlirAffineModExprGet","mlirAffineMulExprGet","mlirAffineSymbolExprGet","mlirAffineSymbolExprGetPosition","mlirAnyQuantizedTypeGet","mlirArrayAttrGet","mlirArrayAttrGetElement","mlirArrayAttrGetNumElements","mlirAttributeDump","mlirAttributeEqual","mlirAttributeGetContext","mlirAttributeGetNull","mlirAttributeGetType","mlirAttributeGetTypeID","mlirAttributeIsAAffineMap","mlirAttributeIsAArray","mlirAttributeIsABool","mlirAttributeIsADenseBoolArray","mlirAttributeIsADenseElements","mlirAttributeIsADenseF32Array","mlirAttributeIsADenseF64Array","mlirAttributeIsADenseFPElements","mlirAttributeIsADenseI16Array","mlirAttributeIsADenseI32Array","mlirAttributeIsADenseI64Array","mlirAttributeIsADenseI8Array","mlirAttributeIsADenseIntElements","mlirAttributeIsADictionary","mlirAttributeIsAElements","mlirAttributeIsAFlatSymbolRef","mlirAttributeIsAFloat","mlirAttributeIsAInteger","mlirAttributeIsAIntegerSet","mlirAttributeIsAOpaque","mlirAttributeIsASparseElements","mlirAttributeIsASparseTensorEncodingAttr","mlirAttributeIsAStridedLayout","mlirAttributeIsAString","mlirAttributeIsASymbolRef","mlirAttributeIsAType","mlirAttributeIsAUnit","mlirAttributeParseGet","mlirAttributePrint","mlirBF16TypeGet","mlirBlockAddArgument","mlirBlockAppendOwnedOperation","mlirBlockArgumentGetArgNumber","mlirBlockArgumentGetOwner","mlirBlockArgumentSetType","mlirBlockCreate","mlirBlockDestroy","mlirBlockDetach","mlirBlockEqual","mlirBlockGetArgument","mlirBlockGetFirstOperation","mlirBlockGetNextInRegion","mlirBlockGetNumArguments","mlirBlockGetParentOperation","mlirBlockGetParentRegion","mlirBlockGetTerminator","mlirBlockInsertOwnedOperation","mlirBlockInsertOwnedOperationAfter","mlirBlockInsertOwnedOperationBefore","mlirBlockPrint","mlirBoolAttrGet","mlirBoolAttrGetValue","mlirCalibratedQuantizedTypeGet","mlirCalibratedQuantizedTypeGetMax","mlirCalibratedQuantizedTypeGetMin","mlirComplexTypeGet","mlirComplexTypeGetElementType","mlirContextAppendDialectRegistry","mlirContextAttachDiagnosticHandler","mlirContextCreate","mlirContextDestroy","mlirContextDetachDiagnosticHandler","mlirContextEnableMultithreading","mlirContextEqual","mlirContextGetAllowUnregisteredDialects","mlirContextGetNumLoadedDialects","mlirContextGetNumRegisteredDialects","mlirContextGetOrLoadDialect","mlirContextIsRegisteredOperation","mlirContextLoadAllAvailableDialects","mlirContextSetAllowUnregisteredDialects","mlirCreateAsyncAsyncFuncToAsyncRuntime","mlirCreateAsyncAsyncParallelFor","mlirCreateAsyncAsyncRuntimePolicyBasedRefCounting","mlirCreateAsyncAsyncRuntimeRefCounting","mlirCreateAsyncAsyncRuntimeRefCountingOpt","mlirCreateAsyncAsyncToAsyncRuntime","mlirCreateConversionArithToLLVMConversionPass","mlirCreateConversionConvertAMDGPUToROCDL","mlirCreateConversionConvertAffineForToGPU","mlirCreateConversionConvertAffineToStandard","mlirCreateConversionConvertArithToSPIRV","mlirCreateConversionConvertArmNeon2dToIntr","mlirCreateConversionConvertAsyncToLLVM","mlirCreateConversionConvertBufferizationToMemRef","mlirCreateConversionConvertComplexToLLVM","mlirCreateConversionConvertComplexToLibm","mlirCreateConversionConvertComplexToStandard","mlirCreateConversionConvertControlFlowToLLVM","mlirCreateConversionConvertControlFlowToSPIRV","mlirCreateConversionConvertFuncToLLVM","mlirCreateConversionConvertFuncToSPIRV","mlirCreateConversionConvertGPUToSPIRV","mlirCreateConversionConvertGpuLaunchFuncToVulkanLaunchFunc","mlirCreateConversionConvertGpuOpsToNVVMOps","mlirCreateConversionConvertGpuOpsToROCDLOps","mlirCreateConversionConvertIndexToLLVMPass","mlirCreateConversionConvertLinalgToLLVM","mlirCreateConversionConvertLinalgToStandard","mlirCreateConversionConvertMathToFuncs","mlirCreateConversionConvertMathToLLVM","mlirCreateConversionConvertMathToLibm","mlirCreateConversionConvertMathToSPIRV","mlirCreateConversionConvertMemRefToSPIRV","mlirCreateConversionConvertNVGPUToNVVM","mlirCreateConversionConvertOpenACCToLLVM","mlirCreateConversionConvertOpenACCToSCF","mlirCreateConversionConvertOpenMPToLLVM","mlirCreateConversionConvertPDLToPDLInterp","mlirCreateConversionConvertParallelLoopToGpu","mlirCreateConversionConvertSCFToOpenMP","mlirCreateConversionConvertSPIRVToLLVM","mlirCreateConversionConvertShapeConstraints","mlirCreateConversionConvertShapeToStandard","mlirCreateConversionConvertTensorToLinalg","mlirCreateConversionConvertTensorToSPIRV","mlirCreateConversionConvertVectorToGPU","mlirCreateConversionConvertVectorToLLVM","mlirCreateConversionConvertVectorToSCF","mlirCreateConversionConvertVectorToSPIRV","mlirCreateConversionConvertVulkanLaunchFuncToVulkanCalls","mlirCreateConversionGpuToLLVMConversionPass","mlirCreateConversionLowerHostCodeToLLVM","mlirCreateConversionMapMemRefStorageClass","mlirCreateConversionMemRefToLLVMConversionPass","mlirCreateConversionReconcileUnrealizedCasts","mlirCreateConversionSCFToControlFlow","mlirCreateConversionSCFToSPIRV","mlirCreateConversionTosaToArith","mlirCreateConversionTosaToLinalg","mlirCreateConversionTosaToLinalgNamed","mlirCreateConversionTosaToSCF","mlirCreateConversionTosaToTensor","mlirCreateExternalPass","mlirCreateGPUGPULowerMemorySpaceAttributesPass","mlirCreateGPUGpuAsyncRegionPass","mlirCreateGPUGpuKernelOutlining","mlirCreateGPUGpuLaunchSinkIndexComputations","mlirCreateGPUGpuMapParallelLoopsPass","mlirCreateLinalgConvertElementwiseToLinalg","mlirCreateLinalgLinalgBufferize","mlirCreateLinalgLinalgDetensorize","mlirCreateLinalgLinalgElementwiseOpFusion","mlirCreateLinalgLinalgFoldUnitExtentDims","mlirCreateLinalgLinalgGeneralization","mlirCreateLinalgLinalgInlineScalarOperands","mlirCreateLinalgLinalgLowerToAffineLoops","mlirCreateLinalgLinalgLowerToLoops","mlirCreateLinalgLinalgLowerToParallelLoops","mlirCreateLinalgLinalgNamedOpConversion","mlirCreateSparseTensorPostSparsificationRewrite","mlirCreateSparseTensorPreSparsificationRewrite","mlirCreateSparseTensorSparseBufferRewrite","mlirCreateSparseTensorSparseTensorCodegen","mlirCreateSparseTensorSparseTensorConversionPass","mlirCreateSparseTensorSparseVectorization","mlirCreateSparseTensorSparsificationPass","mlirCreateSparseTensorStorageSpecifierToLLVM","mlirCreateTransformsCSE","mlirCreateTransformsCanonicalizer","mlirCreateTransformsControlFlowSink","mlirCreateTransformsGenerateRuntimeVerification","mlirCreateTransformsInliner","mlirCreateTransformsLocationSnapshot","mlirCreateTransformsLoopInvariantCodeMotion","mlirCreateTransformsPrintOpStats","mlirCreateTransformsSCCP","mlirCreateTransformsStripDebugInfo","mlirCreateTransformsSymbolDCE","mlirCreateTransformsSymbolPrivatize","mlirCreateTransformsTopologicalSort","mlirCreateTransformsViewOpGraph","mlirDenseArrayGetNumElements","mlirDenseBoolArrayGet","mlirDenseBoolArrayGetElement","mlirDenseBoolResourceElementsAttrGetValue","mlirDenseDoubleResourceElementsAttrGetValue","mlirDenseElementsAttrBFloat16Get","mlirDenseElementsAttrBoolGet","mlirDenseElementsAttrBoolSplatGet","mlirDenseElementsAttrDoubleGet","mlirDenseElementsAttrDoubleSplatGet","mlirDenseElementsAttrFloat16Get","mlirDenseElementsAttrFloatGet","mlirDenseElementsAttrFloatSplatGet","mlirDenseElementsAttrGet","mlirDenseElementsAttrGetBoolSplatValue","mlirDenseElementsAttrGetBoolValue","mlirDenseElementsAttrGetDoubleSplatValue","mlirDenseElementsAttrGetDoubleValue","mlirDenseElementsAttrGetFloatSplatValue","mlirDenseElementsAttrGetFloatValue","mlirDenseElementsAttrGetInt16Value","mlirDenseElementsAttrGetInt32SplatValue","mlirDenseElementsAttrGetInt32Value","mlirDenseElementsAttrGetInt64SplatValue","mlirDenseElementsAttrGetInt64Value","mlirDenseElementsAttrGetInt8SplatValue","mlirDenseElementsAttrGetInt8Value","mlirDenseElementsAttrGetRawData","mlirDenseElementsAttrGetSplatValue","mlirDenseElementsAttrGetStringSplatValue","mlirDenseElementsAttrGetStringValue","mlirDenseElementsAttrGetUInt16Value","mlirDenseElementsAttrGetUInt32SplatValue","mlirDenseElementsAttrGetUInt32Value","mlirDenseElementsAttrGetUInt64SplatValue","mlirDenseElementsAttrGetUInt64Value","mlirDenseElementsAttrGetUInt8SplatValue","mlirDenseElementsAttrGetUInt8Value","mlirDenseElementsAttrInt16Get","mlirDenseElementsAttrInt32Get","mlirDenseElementsAttrInt32SplatGet","mlirDenseElementsAttrInt64Get","mlirDenseElementsAttrInt64SplatGet","mlirDenseElementsAttrInt8Get","mlirDenseElementsAttrInt8SplatGet","mlirDenseElementsAttrIsSplat","mlirDenseElementsAttrRawBufferGet","mlirDenseElementsAttrReshapeGet","mlirDenseElementsAttrSplatGet","mlirDenseElementsAttrStringGet","mlirDenseElementsAttrUInt16Get","mlirDenseElementsAttrUInt32Get","mlirDenseElementsAttrUInt32SplatGet","mlirDenseElementsAttrUInt64Get","mlirDenseElementsAttrUInt64SplatGet","mlirDenseElementsAttrUInt8Get","mlirDenseElementsAttrUInt8SplatGet","mlirDenseF32ArrayGet","mlirDenseF32ArrayGetElement","mlirDenseF64ArrayGet","mlirDenseF64ArrayGetElement","mlirDenseFloatResourceElementsAttrGetValue","mlirDenseI16ArrayGet","mlirDenseI16ArrayGetElement","mlirDenseI32ArrayGet","mlirDenseI32ArrayGetElement","mlirDenseI64ArrayGet","mlirDenseI64ArrayGetElement","mlirDenseI8ArrayGet","mlirDenseI8ArrayGetElement","mlirDenseInt16ResourceElementsAttrGetValue","mlirDenseInt32ResourceElementsAttrGetValue","mlirDenseInt64ResourceElementsAttrGetValue","mlirDenseInt8ResourceElementsAttrGetValue","mlirDenseUInt16ResourceElementsAttrGetValue","mlirDenseUInt32ResourceElementsAttrGetValue","mlirDenseUInt64ResourceElementsAttrGetValue","mlirDenseUInt8ResourceElementsAttrGetValue","mlirDiagnosticGetLocation","mlirDiagnosticGetNote","mlirDiagnosticGetNumNotes","mlirDiagnosticGetSeverity","mlirDiagnosticPrint","mlirDialectEqual","mlirDialectGetContext","mlirDialectGetNamespace","mlirDialectHandleGetNamespace","mlirDialectHandleInsertDialect","mlirDialectHandleLoadDialect","mlirDialectHandleRegisterDialect","mlirDialectRegistryCreate","mlirDialectRegistryDestroy","mlirDictionaryAttrGet","mlirDictionaryAttrGetElement","mlirDictionaryAttrGetElementByName","mlirDictionaryAttrGetNumElements","mlirElementsAttrGetNumElements","mlirElementsAttrGetValue","mlirElementsAttrIsValidIndex","mlirEmitError","mlirEnableGlobalDebug","mlirExecutionEngineCreate","mlirExecutionEngineDestroy","mlirExecutionEngineDumpToObjectFile","mlirExecutionEngineInvokePacked","mlirExecutionEngineLookup","mlirExecutionEngineLookupPacked","mlirExecutionEngineRegisterSymbol","mlirExternalPassSignalFailure","mlirF16TypeGet","mlirF32TypeGet","mlirF64TypeGet","mlirFlatSymbolRefAttrGet","mlirFlatSymbolRefAttrGetValue","mlirFloat8E4M3FNTypeGet","mlirFloat8E5M2TypeGet","mlirFloatAttrDoubleGet","mlirFloatAttrDoubleGetChecked","mlirFloatAttrGetValueDouble","mlirFunctionTypeGet","mlirFunctionTypeGetInput","mlirFunctionTypeGetNumInputs","mlirFunctionTypeGetNumResults","mlirFunctionTypeGetResult","mlirGetDialectHandle__async__","mlirGetDialectHandle__cf__","mlirGetDialectHandle__func__","mlirGetDialectHandle__gpu__","mlirGetDialectHandle__linalg__","mlirGetDialectHandle__llvm__","mlirGetDialectHandle__ml_program__","mlirGetDialectHandle__pdl__","mlirGetDialectHandle__quant__","mlirGetDialectHandle__scf__","mlirGetDialectHandle__shape__","mlirGetDialectHandle__sparse_tensor__","mlirGetDialectHandle__tensor__","mlirGetDialectHandle__transform__","mlirIdentifierEqual","mlirIdentifierGet","mlirIdentifierGetContext","mlirIdentifierStr","mlirIndexTypeGet","mlirInferTypeOpInterfaceInferReturnTypes","mlirInferTypeOpInterfaceTypeID","mlirIntegerAttrGet","mlirIntegerAttrGetValueInt","mlirIntegerAttrGetValueSInt","mlirIntegerAttrGetValueUInt","mlirIntegerSetDump","mlirIntegerSetEmptyGet","mlirIntegerSetEqual","mlirIntegerSetGet","mlirIntegerSetGetConstraint","mlirIntegerSetGetContext","mlirIntegerSetGetNumConstraints","mlirIntegerSetGetNumDims","mlirIntegerSetGetNumEqualities","mlirIntegerSetGetNumInequalities","mlirIntegerSetGetNumInputs","mlirIntegerSetGetNumSymbols","mlirIntegerSetIsCanonicalEmpty","mlirIntegerSetIsConstraintEq","mlirIntegerSetPrint","mlirIntegerSetReplaceGet","mlirIntegerTypeGet","mlirIntegerTypeGetWidth","mlirIntegerTypeIsSigned","mlirIntegerTypeIsSignless","mlirIntegerTypeIsUnsigned","mlirIntegerTypeSignedGet","mlirIntegerTypeUnsignedGet","mlirIsGlobalDebugEnabled","mlirLLVMArrayTypeGet","mlirLLVMFunctionTypeGet","mlirLLVMPointerTypeGet","mlirLLVMStructTypeLiteralGet","mlirLLVMVoidTypeGet","mlirLinalgFillBuiltinNamedOpRegion","mlirLocationCallSiteGet","mlirLocationEqual","mlirLocationFileLineColGet","mlirLocationFusedGet","mlirLocationGetContext","mlirLocationNameGet","mlirLocationPrint","mlirLocationUnknownGet","mlirMemRefTypeContiguousGet","mlirMemRefTypeContiguousGetChecked","mlirMemRefTypeGet","mlirMemRefTypeGetAffineMap","mlirMemRefTypeGetChecked","mlirMemRefTypeGetLayout","mlirMemRefTypeGetMemorySpace","mlirModuleCreateEmpty","mlirModuleCreateParse","mlirModuleDestroy","mlirModuleFromOperation","mlirModuleGetBody","mlirModuleGetContext","mlirModuleGetOperation","mlirNamedAttributeGet","mlirNoneTypeGet","mlirOpOperandGetNextUse","mlirOpOperandGetOperandNumber","mlirOpOperandGetOwner","mlirOpOperandIsNull","mlirOpPassManagerAddOwnedPass","mlirOpPassManagerAddPipeline","mlirOpPassManagerGetNestedUnder","mlirOpPrintingFlagsCreate","mlirOpPrintingFlagsDestroy","mlirOpPrintingFlagsElideLargeElementsAttrs","mlirOpPrintingFlagsEnableDebugInfo","mlirOpPrintingFlagsPrintGenericOpForm","mlirOpPrintingFlagsUseLocalScope","mlirOpResultGetOwner","mlirOpResultGetResultNumber","mlirOpaqueAttrGet","mlirOpaqueAttrGetData","mlirOpaqueAttrGetDialectNamespace","mlirOpaqueTypeGet","mlirOpaqueTypeGetData","mlirOpaqueTypeGetDialectNamespace","mlirOperationClone","mlirOperationCreate","mlirOperationDestroy","mlirOperationDump","mlirOperationEqual","mlirOperationGetAttribute","mlirOperationGetAttributeByName","mlirOperationGetBlock","mlirOperationGetContext","mlirOperationGetFirstRegion","mlirOperationGetLocation","mlirOperationGetName","mlirOperationGetNextInBlock","mlirOperationGetNumAttributes","mlirOperationGetNumOperands","mlirOperationGetNumRegions","mlirOperationGetNumResults","mlirOperationGetNumSuccessors","mlirOperationGetOperand","mlirOperationGetParentOperation","mlirOperationGetRegion","mlirOperationGetResult","mlirOperationGetSuccessor","mlirOperationGetTypeID","mlirOperationImplementsInterface","mlirOperationImplementsInterfaceStatic","mlirOperationMoveAfter","mlirOperationMoveBefore","mlirOperationPrint","mlirOperationPrintWithFlags","mlirOperationRemoveAttributeByName","mlirOperationRemoveFromParent","mlirOperationSetAttributeByName","mlirOperationSetOperand","mlirOperationStateAddAttributes","mlirOperationStateAddOperands","mlirOperationStateAddOwnedRegions","mlirOperationStateAddResults","mlirOperationStateAddSuccessors","mlirOperationStateEnableResultTypeInference","mlirOperationStateGet","mlirOperationVerify","mlirOperationWriteBytecode","mlirPDLAttributeTypeGet","mlirPDLOperationTypeGet","mlirPDLRangeTypeGet","mlirPDLRangeTypeGetElementType","mlirPDLTypeTypeGet","mlirPDLValueTypeGet","mlirParsePassPipeline","mlirPassManagerAddOwnedPass","mlirPassManagerCreate","mlirPassManagerCreateOnOperation","mlirPassManagerDestroy","mlirPassManagerEnableIRPrinting","mlirPassManagerEnableVerifier","mlirPassManagerGetAsOpPassManager","mlirPassManagerGetNestedUnder","mlirPassManagerRun","mlirPrintPassPipeline","mlirQuantizedTypeCastExpressedToStorageType","mlirQuantizedTypeCastFromExpressedType","mlirQuantizedTypeCastFromStorageType","mlirQuantizedTypeCastToExpressedType","mlirQuantizedTypeCastToStorageType","mlirQuantizedTypeGetDefaultMaximumForInteger","mlirQuantizedTypeGetDefaultMinimumForInteger","mlirQuantizedTypeGetExpressedType","mlirQuantizedTypeGetFlags","mlirQuantizedTypeGetQuantizedElementType","mlirQuantizedTypeGetSignedFlag","mlirQuantizedTypeGetStorageType","mlirQuantizedTypeGetStorageTypeIntegralWidth","mlirQuantizedTypeGetStorageTypeMax","mlirQuantizedTypeGetStorageTypeMin","mlirQuantizedTypeIsCompatibleExpressedType","mlirQuantizedTypeIsSigned","mlirRankedTensorTypeGet","mlirRankedTensorTypeGetChecked","mlirRankedTensorTypeGetEncoding","mlirRegionAppendOwnedBlock","mlirRegionCreate","mlirRegionDestroy","mlirRegionEqual","mlirRegionGetFirstBlock","mlirRegionGetNextInOperation","mlirRegionInsertOwnedBlock","mlirRegionInsertOwnedBlockAfter","mlirRegionInsertOwnedBlockBefore","mlirRegisterAllDialects","mlirRegisterAllLLVMTranslations","mlirRegisterAllPasses","mlirRegisterAsyncAsyncFuncToAsyncRuntime","mlirRegisterAsyncAsyncParallelFor","mlirRegisterAsyncAsyncRuntimePolicyBasedRefCounting","mlirRegisterAsyncAsyncRuntimeRefCounting","mlirRegisterAsyncAsyncRuntimeRefCountingOpt","mlirRegisterAsyncAsyncToAsyncRuntime","mlirRegisterAsyncPasses","mlirRegisterConversionArithToLLVMConversionPass","mlirRegisterConversionConvertAMDGPUToROCDL","mlirRegisterConversionConvertAffineForToGPU","mlirRegisterConversionConvertAffineToStandard","mlirRegisterConversionConvertArithToSPIRV","mlirRegisterConversionConvertArmNeon2dToIntr","mlirRegisterConversionConvertAsyncToLLVM","mlirRegisterConversionConvertBufferizationToMemRef","mlirRegisterConversionConvertComplexToLLVM","mlirRegisterConversionConvertComplexToLibm","mlirRegisterConversionConvertComplexToStandard","mlirRegisterConversionConvertControlFlowToLLVM","mlirRegisterConversionConvertControlFlowToSPIRV","mlirRegisterConversionConvertFuncToLLVM","mlirRegisterConversionConvertFuncToSPIRV","mlirRegisterConversionConvertGPUToSPIRV","mlirRegisterConversionConvertGpuLaunchFuncToVulkanLaunchFunc","mlirRegisterConversionConvertGpuOpsToNVVMOps","mlirRegisterConversionConvertGpuOpsToROCDLOps","mlirRegisterConversionConvertIndexToLLVMPass","mlirRegisterConversionConvertLinalgToLLVM","mlirRegisterConversionConvertLinalgToStandard","mlirRegisterConversionConvertMathToFuncs","mlirRegisterConversionConvertMathToLLVM","mlirRegisterConversionConvertMathToLibm","mlirRegisterConversionConvertMathToSPIRV","mlirRegisterConversionConvertMemRefToSPIRV","mlirRegisterConversionConvertNVGPUToNVVM","mlirRegisterConversionConvertOpenACCToLLVM","mlirRegisterConversionConvertOpenACCToSCF","mlirRegisterConversionConvertOpenMPToLLVM","mlirRegisterConversionConvertPDLToPDLInterp","mlirRegisterConversionConvertParallelLoopToGpu","mlirRegisterConversionConvertSCFToOpenMP","mlirRegisterConversionConvertSPIRVToLLVM","mlirRegisterConversionConvertShapeConstraints","mlirRegisterConversionConvertShapeToStandard","mlirRegisterConversionConvertTensorToLinalg","mlirRegisterConversionConvertTensorToSPIRV","mlirRegisterConversionConvertVectorToGPU","mlirRegisterConversionConvertVectorToLLVM","mlirRegisterConversionConvertVectorToSCF","mlirRegisterConversionConvertVectorToSPIRV","mlirRegisterConversionConvertVulkanLaunchFuncToVulkanCalls","mlirRegisterConversionGpuToLLVMConversionPass","mlirRegisterConversionLowerHostCodeToLLVM","mlirRegisterConversionMapMemRefStorageClass","mlirRegisterConversionMemRefToLLVMConversionPass","mlirRegisterConversionPasses","mlirRegisterConversionReconcileUnrealizedCasts","mlirRegisterConversionSCFToControlFlow","mlirRegisterConversionSCFToSPIRV","mlirRegisterConversionTosaToArith","mlirRegisterConversionTosaToLinalg","mlirRegisterConversionTosaToLinalgNamed","mlirRegisterConversionTosaToSCF","mlirRegisterConversionTosaToTensor","mlirRegisterGPUGPULowerMemorySpaceAttributesPass","mlirRegisterGPUGpuAsyncRegionPass","mlirRegisterGPUGpuKernelOutlining","mlirRegisterGPUGpuLaunchSinkIndexComputations","mlirRegisterGPUGpuMapParallelLoopsPass","mlirRegisterGPUPasses","mlirRegisterLinalgConvertElementwiseToLinalg","mlirRegisterLinalgLinalgBufferize","mlirRegisterLinalgLinalgDetensorize","mlirRegisterLinalgLinalgElementwiseOpFusion","mlirRegisterLinalgLinalgFoldUnitExtentDims","mlirRegisterLinalgLinalgGeneralization","mlirRegisterLinalgLinalgInlineScalarOperands","mlirRegisterLinalgLinalgLowerToAffineLoops","mlirRegisterLinalgLinalgLowerToLoops","mlirRegisterLinalgLinalgLowerToParallelLoops","mlirRegisterLinalgLinalgNamedOpConversion","mlirRegisterLinalgPasses","mlirRegisterSparseTensorPasses","mlirRegisterSparseTensorPostSparsificationRewrite","mlirRegisterSparseTensorPreSparsificationRewrite","mlirRegisterSparseTensorSparseBufferRewrite","mlirRegisterSparseTensorSparseTensorCodegen","mlirRegisterSparseTensorSparseTensorConversionPass","mlirRegisterSparseTensorSparseVectorization","mlirRegisterSparseTensorSparsificationPass","mlirRegisterSparseTensorStorageSpecifierToLLVM","mlirRegisterTransformsCSE","mlirRegisterTransformsCanonicalizer","mlirRegisterTransformsControlFlowSink","mlirRegisterTransformsGenerateRuntimeVerification","mlirRegisterTransformsInliner","mlirRegisterTransformsLocationSnapshot","mlirRegisterTransformsLoopInvariantCodeMotion","mlirRegisterTransformsPasses","mlirRegisterTransformsPrintOpStats","mlirRegisterTransformsSCCP","mlirRegisterTransformsStripDebugInfo","mlirRegisterTransformsSymbolDCE","mlirRegisterTransformsSymbolPrivatize","mlirRegisterTransformsTopologicalSort","mlirRegisterTransformsViewOpGraph","mlirShapedTypeGetDimSize","mlirShapedTypeGetDynamicSize","mlirShapedTypeGetDynamicStrideOrOffset","mlirShapedTypeGetElementType","mlirShapedTypeGetRank","mlirShapedTypeHasRank","mlirShapedTypeHasStaticShape","mlirShapedTypeIsDynamicDim","mlirShapedTypeIsDynamicSize","mlirShapedTypeIsDynamicStrideOrOffset","mlirSparseElementsAttrGetIndices","mlirSparseElementsAttrGetValues","mlirSparseElementsAttribute","mlirSparseTensorEncodingAttrGet","mlirSparseTensorEncodingAttrGetDimLevelType","mlirSparseTensorEncodingAttrGetDimOrdering","mlirSparseTensorEncodingAttrGetHigherOrdering","mlirSparseTensorEncodingAttrGetIndexBitWidth","mlirSparseTensorEncodingAttrGetPointerBitWidth","mlirSparseTensorEncodingGetNumDimLevelTypes","mlirStridedLayoutAttrGet","mlirStridedLayoutAttrGetNumStrides","mlirStridedLayoutAttrGetOffset","mlirStridedLayoutAttrGetStride","mlirStringAttrGet","mlirStringAttrGetValue","mlirStringAttrTypedGet","mlirStringRefCreateFromCString","mlirStringRefEqual","mlirSymbolRefAttrGet","mlirSymbolRefAttrGetLeafReference","mlirSymbolRefAttrGetNestedReference","mlirSymbolRefAttrGetNumNestedReferences","mlirSymbolRefAttrGetRootReference","mlirSymbolTableCreate","mlirSymbolTableDestroy","mlirSymbolTableErase","mlirSymbolTableGetSymbolAttributeName","mlirSymbolTableGetVisibilityAttributeName","mlirSymbolTableInsert","mlirSymbolTableLookup","mlirSymbolTableReplaceAllSymbolUses","mlirSymbolTableWalkSymbolTables","mlirTransformAnyOpTypeGet","mlirTransformOperationTypeGet","mlirTransformOperationTypeGetOperationName","mlirTupleTypeGet","mlirTupleTypeGetNumTypes","mlirTupleTypeGetType","mlirTypeAttrGet","mlirTypeAttrGetValue","mlirTypeDump","mlirTypeEqual","mlirTypeGetContext","mlirTypeGetTypeID","mlirTypeIDAllocatorAllocateTypeID","mlirTypeIDAllocatorCreate","mlirTypeIDAllocatorDestroy","mlirTypeIDCreate","mlirTypeIDEqual","mlirTypeIDHashValue","mlirTypeIsAAnyQuantizedType","mlirTypeIsABF16","mlirTypeIsACalibratedQuantizedType","mlirTypeIsAComplex","mlirTypeIsAF16","mlirTypeIsAF32","mlirTypeIsAF64","mlirTypeIsAFloat8E4M3FN","mlirTypeIsAFloat8E5M2","mlirTypeIsAFunction","mlirTypeIsAIndex","mlirTypeIsAInteger","mlirTypeIsAMemRef","mlirTypeIsANone","mlirTypeIsAOpaque","mlirTypeIsAPDLAttributeType","mlirTypeIsAPDLOperationType","mlirTypeIsAPDLRangeType","mlirTypeIsAPDLType","mlirTypeIsAPDLTypeType","mlirTypeIsAPDLValueType","mlirTypeIsAQuantizedType","mlirTypeIsARankedTensor","mlirTypeIsAShaped","mlirTypeIsATensor","mlirTypeIsATransformAnyOpType","mlirTypeIsATransformOperationType","mlirTypeIsATuple","mlirTypeIsAUniformQuantizedPerAxisType","mlirTypeIsAUniformQuantizedType","mlirTypeIsAUnrankedMemRef","mlirTypeIsAUnrankedTensor","mlirTypeIsAVector","mlirTypeParseGet","mlirTypePrint","mlirUniformQuantizedPerAxisTypeGet","mlirUniformQuantizedPerAxisTypeGetNumDims","mlirUniformQuantizedPerAxisTypeGetQuantizedDimension","mlirUniformQuantizedPerAxisTypeGetScale","mlirUniformQuantizedPerAxisTypeGetZeroPoint","mlirUniformQuantizedPerAxisTypeIsFixedPoint","mlirUniformQuantizedTypeGet","mlirUniformQuantizedTypeGetScale","mlirUniformQuantizedTypeGetZeroPoint","mlirUniformQuantizedTypeIsFixedPoint","mlirUnitAttrGet","mlirUnmanagedDenseBoolResourceElementsAttrGet","mlirUnmanagedDenseDoubleResourceElementsAttrGet","mlirUnmanagedDenseFloatResourceElementsAttrGet","mlirUnmanagedDenseInt16ResourceElementsAttrGet","mlirUnmanagedDenseInt32ResourceElementsAttrGet","mlirUnmanagedDenseInt64ResourceElementsAttrGet","mlirUnmanagedDenseInt8ResourceElementsAttrGet","mlirUnmanagedDenseUInt16ResourceElementsAttrGet","mlirUnmanagedDenseUInt32ResourceElementsAttrGet","mlirUnmanagedDenseUInt64ResourceElementsAttrGet","mlirUnmanagedDenseUInt8ResourceElementsAttrGet","mlirUnrankedMemRefTypeGet","mlirUnrankedMemRefTypeGetChecked","mlirUnrankedMemrefGetMemorySpace","mlirUnrankedTensorTypeGet","mlirUnrankedTensorTypeGetChecked","mlirValueDump","mlirValueEqual","mlirValueGetFirstUse","mlirValueGetType","mlirValueIsABlockArgument","mlirValueIsAOpResult","mlirValuePrint","mlirVectorTypeGet","mlirVectorTypeGetChecked","nAttributes","nOperands","nRegions","nResults","nSuccessors","name","name","operands","ptr","ptr","ptr","ptr","ptr","ptr","ptr","ptr","ptr","ptr","ptr","ptr","ptr","ptr","ptr","ptr","ptr","ptr","ptr","ptr","ptr","ptr","ptr","ptr","ptr","ptr","ptr","regions","results","run","successors","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","true_","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","uint_fast16_t","uint_fast32_t","uint_fast64_t","uint_fast8_t","uint_least16_t","uint_least32_t","uint_least64_t","uint_least8_t","uintmax_t","value","wchar_t"],"q":["mlir_sys","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","","","","","","","","","","","","","","","","","","","","","","","","","An opaque reference to a diagnostic, always owned by the …","Diagnostic handler type. Accepts a reference to a …","Opaque identifier of a diagnostic handler, useful to …","Severity of a diagnostic.","","","","","","","","","","Structure of external <code>MlirPass</code> callbacks. All callbacks …","","","","A logical result value, essentially a boolean with named …","","Named MLIR attribute.","","","","","An auxiliary class for constructing operations.","","","","Dimension level types (and properties) that define sparse …","","","","","","","","","","A callback for returning string references.","A pointer to a sized fragment of a string, not necessarily …","","","","","These callbacks are used to return multiple types from …his callback is called when the pass is cloned. See …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","This callback is called from the pass is created. This is …","&lt; Pointer to the first symbol.","This callback is called when the pass is destroyed This is …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","This callback is optional. The callback is called before …","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","&lt; Length of the fragment.","","","Creates an affine add expression with ‘lhs’ and ‘rhs…","Returns the left hand side affine expression of the given …","Returns the right hand side affine expression of the given …","Creates an affine ceildiv expression with ‘lhs’ and ‘…","Creates an affine constant expression with ‘constant’ …","Returns the value of the given affine constant expression.","Creates an affine dimension expression with ‘position’ …","Returns the position of the given affine dimension …","Composes the given map with the given expression.","Prints the affine expression to the standard error stream.","Returns <code>true</code> if the two affine expressions are equal.","Gets the context that owns the affine expression.","Returns the greatest known integral divisor of this affine …","Checks whether the given affine expression is an add …","Checks whether the given affine expression is binary.","Checks whether the given affine expression is an ceildiv …","Checks whether the given affine expression is a constant …","Checks whether the given affine expression is a dimension …","Checks whether the given affine expression is an floordiv …","Checks whether the given affine expression is an mod …","Checks whether the given affine expression is an mul …","Checks whether the given affine expression is a symbol …","Checks whether the given affine expression involves …","Checks whether the given affine expression is a multiple …","Checks whether the given affine expression is a pure …","Checks whether the given affine expression is made out of …","Prints an affine expression by sending chunks of the …","Creates an affine floordiv expression with ‘lhs’ and …","Creates an affine map attribute wrapping the given map. …","Returns the affine map wrapped in the given affine map …","Returns the simplified affine map resulting from dropping …","Creates a single constant result affine map in the …","Prints the affine map to the standard error stream.","Creates a zero result affine map with no dimensions or …","Checks if two affine maps are equal.","Creates an affine map with results defined by the given …","Gets the context that the given affine map was created with","Returns the affine map consisting of the most major …","Returns the affine map consisting of the most minor …","Returns the number of dimensions of the given affine map.","Returns the number of inputs (dimensions + symbols) of the …","Returns the number of results of the given affine map.","Returns the number of symbols of the given affine map.","Returns the result at the given position.","Returns the constant result of the given affine map. The …","Returns the affine map consisting of the <code>resultPos</code> subset.","Checks whether the given affine map is an empty affine map.","Checks whether the given affine map is an identity affine …","Checks whether the given affine map is a minor identity …","Checks whether the given affine map represents a …","Checks whether the given affine map represents a subset of …","Checks whether the given affine map is a single result …","Creates an identity affine map on the most minor …","Creates an affine map with ‘numDims’ identity in the …","Creates an affine map with a permutation expression and …","Prints an affine map by sending chunks of the string …","Apply AffineExpr::replace(<code>map</code>) to each of the results and …","Creates a zero result affine map of the given dimensions …","Creates an affine mod expression with ‘lhs’ and ‘rhs…","Creates an affine mul expression with ‘lhs’ and ‘rhs…","Creates an affine symbol expression with ‘position’ in …","Returns the position of the given affine symbol expression.","Creates an instance of AnyQuantizedType with the given …","Creates an array element containing the given list of …","Returns pos-th element stored in the given array attribute.","Returns the number of elements stored in the given array …","Prints the attribute to the standard error stream.","Checks if two attributes are equal.","Gets the context that an attribute was created with.","Returns an empty attribute.","Gets the type of this attribute.","Gets the type id of the attribute.","Checks whether the given attribute is an affine map …","Checks whether the given attribute is an array attribute.","Checks whether the given attribute is a bool attribute.","Checks whether the given attribute is a dense array …","Checks whether the given attribute is a dense elements …","","","","","","","","","Checks whether the given attribute is a dictionary …","Checks whether the given attribute is an elements …","Checks whether the given attribute is a flat symbol …","Checks whether the given attribute is a floating point …","Checks whether the given attribute is an integer attribute.","Checks whether the given attribute is an integer set …","Checks whether the given attribute is an opaque attribute.","Checks whether the given attribute is a sparse elements …","Checks whether the given attribute is a …","","Checks whether the given attribute is a string attribute.","Checks whether the given attribute is a symbol reference …","Checks whether the given attribute is a type attribute.","Checks whether the given attribute is a unit attribute.","Parses an attribute. The attribute is owned by the context.","Prints an attribute by sending chunks of the string …","Creates a bf16 type in the given context. The type is …","Appends an argument of the specified type to the block. …","Takes an operation owned by the caller and appends it to …","Returns the position of the value in the argument list of …","Returns the block in which this value is defined as an …","Sets the type of the block argument to the given type.","Creates a new empty block with the given argument types …","Takes a block owned by the caller and destroys it.","Detach a block from the owning region and assume ownership.","Checks whether two blocks handles point to the same block. …","Returns <code>pos</code>-th argument of the block.","Returns the first operation in the block.","Returns the block immediately following the given block in …","Returns the number of arguments of the block.","Returns the closest surrounding operation that contains …","Returns the region that contains this block.","Returns the terminator operation in the block or null if …","Takes an operation owned by the caller and inserts it as …","Takes an operation owned by the caller and inserts it …","Takes an operation owned by the caller and inserts it …","Prints a block by sending chunks of the string …","Creates a bool attribute in the given context with the …","Returns the value stored in the given bool attribute.","Creates an instance of CalibratedQuantizedType with the …","Returns the max value of the given calibrated quantized …","Returns the min value of the given calibrated quantized …","Creates a complex type with the given element type in the …","Returns the element type of the given complex type.","Append the contents of the given dialect registry to the …","Attaches the diagnostic handler to the context. Handlers …","Creates an MLIR context and transfers its ownership to the …","Takes an MLIR context owned by the caller and destroys it.","Detaches an attached diagnostic handler from the context …","Set threading mode (must be set to false to …","Checks if two contexts are equal.","Returns whether the context allows unregistered dialects.","Returns the number of dialects loaded by the context.","Returns the number of dialects registered with the given …","Gets the dialect instance owned by the given context using …","Returns whether the given fully-qualified operation (i.e. …","Eagerly loads all available dialects registered with a …","Sets whether unregistered dialects are allowed in this …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Creates an external <code>MlirPass</code> that calls the supplied …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Get the size of a dense array.","Create a dense array attribute with the given elements.","Get an element of a dense array.","Returns the pos-th value (flat contiguous indexing) of a …","","","Creates a dense elements attribute with the given shaped …","","","","","","","Creates a dense elements attribute with the given Shaped …","","Returns the pos-th value (flat contiguous indexing) of a …","","","","","","","","","","","","Returns the raw data of the given dense elements attribute.","Returns the single replicated value (splat) of a specific …","","","","","","","","","","","","","","","","","Checks whether the given dense elements attribute contains …","Creates a dense elements attribute with the given Shaped …","Creates a dense elements attribute that has the same data …","Creates a dense elements attribute with the given Shaped …","Creates a dense elements attribute with the given shaped …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the location at which the diagnostic is reported.","Returns <code>pos</code>-th note attached to the diagnostic. Expects <code>pos</code>…","Returns the number of notes attached to the diagnostic.","Returns the severity of the diagnostic.","Prints a diagnostic using the provided callback.","Checks if two dialects that belong to the same context are …","Returns the context that owns the dialect.","Returns the namespace of the given dialect.","Returns the namespace associated with the provided dialect …","Inserts the dialect associated with the provided dialect …","Loads the dialect associated with the provided dialect …","Registers the dialect associated with the provided dialect …","Creates a dialect registry and transfers its ownership to …","Takes a dialect registry owned by the caller and destroys …","Creates a dictionary attribute containing the given list …","Returns pos-th element of the given dictionary attribute.","Returns the dictionary attribute element with the given …","Returns the number of attributes contained in a dictionary …","Gets the total number of elements in the given elements …","Returns the element at the given rank-dimensional index.","Checks whether the given rank-dimensional index is valid …","Emits an error at the given location through the …","Sets the global debugging flag.","Creates an ExecutionEngine for the provided ModuleOp. The …","Destroy an ExecutionEngine instance.","Dump as an object in <code>fileName</code>.","Invoke a native function in the execution engine by name …","Lookup a native function in the execution engine by name, …","Lookup the wrapper of the native function in the execution …","Register a symbol with the jit: this symbol will be …","This signals that the pass has failed. This is only valid …","Creates an f16 type in the given context. The type is …","Creates an f32 type in the given context. The type is …","Creates a f64 type in the given context. The type is owned …","Creates a flat symbol reference attribute in the given …","Returns the referenced symbol as a string reference. The …","Creates an f8E4M3FN type in the given context. The type is …","Creates an f8E5M2 type in the given context. The type is …","Creates a floating point attribute in the given context …","Same as “mlirFloatAttrDoubleGet”, but if the type is …","Returns the value stored in the given floating point …","Creates a function type, mapping a list of input types to …","Returns the pos-th input type.","Returns the number of input types.","Returns the number of result types.","Returns the pos-th result type.","","","","","","","","","","","","","","","Checks whether two identifiers are the same.","Gets an identifier with the given string value.","Returns the context associated with this identifier","Gets the string value of the identifier.","Creates an index type in the given context. The type is …","Infers the return types of the operation identified by its …","Returns the interface TypeID of the InferTypeOpInterface.","Creates an integer attribute of the given type with the …","Returns the value stored in the given integer attribute, …","Returns the value stored in the given integer attribute, …","Returns the value stored in the given integer attribute, …","Prints an integer set to the standard error stream.","Gets or creates a new canonically empty integer set with …","Checks if two integer set objects are equal. This is a “…","Gets or creates a new integer set in the given context. …","Returns <code>pos</code>-th constraint of the set.","Gets the context in which the given integer set lives.","Returns the number of constraints (equalities + …","Returns the number of dimensions in the given set.","Returns the number of equalities in the given set.","Returns the number of inequalities in the given set.","Returns the number of inputs (dimensions + symbols) in the …","Returns the number of symbols in the given set.","Checks whether the given set is a canonical empty set, …","Returns <code>true</code> of the <code>pos</code>-th constraint of the set is an …","Prints an integer set by sending chunks of the string …","Gets or creates a new integer set in which the values and …","Creates a signless integer type of the given bitwidth in …","Returns the bitwidth of an integer type.","Checks whether the given integer type is signed.","Checks whether the given integer type is signless.","Checks whether the given integer type is unsigned.","Creates a signed integer type of the given bitwidth in the …","Creates an unsigned integer type of the given bitwidth in …","Retuns <code>true</code> if the global debugging flag is set, false …","Creates an llvm.array type.","Creates an llvm.func type.","Creates an llvm.ptr type.","Creates an LLVM literal (unnamed) struct type.","Creates an llmv.void type.","Apply the special region builder for the builtin named …","Creates a call site location with a callee and a caller.","Checks if two locations are equal.","Creates an File/Line/Column location owned by the given …","Creates a fused location with an array of locations and …","Gets the context that a location was created with.","Creates a name location owned by the given context. …","Prints a location by sending chunks of the string …","Creates a location with unknown position owned by the …","Creates a MemRef type with the given rank, shape, memory …","Same as “mlirMemRefTypeContiguousGet” but returns a …","Creates a MemRef type with the given rank and shape, a …","Returns the affine map of the given MemRef type.","Same as “mlirMemRefTypeGet” but returns a …","Returns the layout of the given MemRef type.","Returns the memory space of the given MemRef type.","Creates a new, empty module and transfers ownership to the …","Parses a module from the string and transfers ownership to …","Takes a module owned by the caller and deletes it.","Views the generic operation as a module. The returned …","Gets the body of the module, i.e. the only block it …","Gets the context that a module was created with.","Views the module as a generic operation.","Associates an attribute with the name. Takes ownership of …","Creates a None type in the given context. The type is …","Returns an op operand representing the next use of the …","Returns the operand number of an op operand.","Returns the owner operation of an op operand.","Returns whether the op operand is null.","Add a pass and transfer ownership to the provided …","Parse a sequence of textual MLIR pass pipeline elements …","Nest an OpPassManager under the provided OpPassManager, …","Creates new printing flags with defaults, intended for …","Destroys printing flags created with …","Enables the elision of large elements attributes by …","Enable or disable printing of debug information (based on …","Always print operations in the generic form.","Use local scope when printing the operation. This allows …","Returns an operation that produced this value as its …","Returns the position of the value in the list of results …","Creates an opaque attribute in the given context …","Returns the raw data as a string reference. The data …","Returns the namespace of the dialect with which the given …","Creates an opaque type in the given context associated …","Returns the raw data as a string reference. The data …","Returns the namespace of the dialect with which the given …","Creates a deep copy of an operation. The operation is not …","Creates an operation and transfers ownership to the caller.","Takes an operation owned by the caller and destroys it.","Prints an operation to stderr.","Checks whether two operation handles point to the same …","Return <code>pos</code>-th attribute of the operation.","Returns an attribute attached to the operation given its …","Gets the block that owns this operation, returning null if …","Gets the context this operation is associated with","Returns first region attached to the operation.","Gets the location of the operation.","Gets the name of the operation as an identifier.","Returns an operation immediately following the given …","Returns the number of attributes attached to the operation.","Returns the number of operands of the operation.","Returns the number of regions attached to the given …","Returns the number of results of the operation.","Returns the number of successor blocks of the operation.","Returns <code>pos</code>-th operand of the operation.","Gets the operation that owns this operation, returning …","Returns <code>pos</code>-th region attached to the operation.","Returns <code>pos</code>-th result of the operation.","Returns <code>pos</code>-th successor of the operation.","Gets the type id of the operation. Returns null if the …","Returns <code>true</code> if the given operation implements an …","Returns <code>true</code> if the operation identified by its canonical …","Moves the given operation immediately after the other …","Moves the given operation immediately before the other …","Prints an operation by sending chunks of the string …","Same as mlirOperationPrint but accepts flags controlling …","Removes an attribute by name. Returns false if the …","Removes the given operation from its parent block. The …","Sets an attribute by name, replacing the existing if it …","Sets the <code>pos</code>-th operand of the operation.","","","","Adds a list of components to the operation state.","","Enables result type inference for the operation under …","Constructs an operation state from a name and a location.","Verify the operation and return true if it passes, false …","Same as mlirOperationPrint but writing the bytecode format …","","","","","","","Parse a textual MLIR pass pipeline and assign it to the …","Add a pass and transfer ownership to the provided …","Create a new top-level PassManager with the default anchor.","Create a new top-level PassManager anchored on <code>anchorOp</code>.","Destroy the provided PassManager.","Enable mlir-print-ir-after-all.","Enable / disable verify-each.","Cast a top-level PassManager to a generic OpPassManager.","Nest an OpPassManager under the top-level PassManager, the …","Run the provided <code>passManager</code> on the given <code>module</code>.","Print a textual MLIR pass pipeline by sending chunks of …","Casts from a type based on the expressed type of the given …","Casts from a type based on the expressed type of the given …","Casts from a type based on the storage type of the given …","Casts from a type based on a quantized type to a …","Casts from a type based on a quantized type to a …","Returns the maximum possible value stored by a quantized …","Returns the minimum possible value stored by a quantized …","Gets the original type approximated by the given quantized …","Gets the flags associated with the given quantized type.","Returns the element type of the given quantized type as …","Returns the bit flag used to indicate signedness of a …","Returns the underlying type used to store the values.","Returns the integral bitwidth that the storage type of the …","Returns the maximum value that the storage type of the …","Returns the minimum value that the storage type of the …","Returns <code>true</code> if the <code>candidate</code> type is compatible with the …","Returns <code>true</code> if the given type is signed, <code>false</code> otherwise.","Creates a tensor type of a fixed rank with the given …","Same as “mlirRankedTensorTypeGet” but returns a …","Gets the ‘encoding’ attribute from the ranked tensor …","Takes a block owned by the caller and appends it to the …","Creates a new empty region and transfers ownership to the …","Takes a region owned by the caller and destroys it.","Checks whether two region handles point to the same …","Gets the first block in the region.","Returns the region immediately following the given region …","Takes a block owned by the caller and inserts it at <code>pos</code> to …","Takes a block owned by the caller and inserts it after the …","Takes a block owned by the caller and inserts it before …","Appends all upstream dialects and extensions to the …","Register all translations to LLVM IR for dialects that can …","Register all compiler passes of MLIR.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the dim-th dimension of the given ranked shaped …","Returns the value indicating a dynamic size in a shaped …","Returns the value indicating a dynamic stride or offset in …","Returns the element type of the shaped type.","Returns the rank of the given ranked shaped type.","Checks whether the given shaped type is ranked.","Checks whether the given shaped type has a static shape.","Checks wither the dim-th dimension of the given shaped …","Checks whether the given value is used as a placeholder …","Checks whether the given value is used as a placeholder …","Returns the dense elements attribute containing 64-bit …","Returns the dense elements attribute containing the …","Creates a sparse elements attribute of the given shape …","Creates a sparse_tensor.encoding attribute with the given …","Returns a specified dim level type in a …","Returns the dimension ordering in a sparse_tensor.encoding …","Returns the higher ordering in a sparse_tensor.encoding …","Returns the index bit width in a sparse_tensor.encoding …","Returns the pointer bit width in a sparse_tensor.encoding …","Returns the number of dim level types in a …","","","","","Creates a string attribute in the given context containing …","Returns the attribute values as a string reference. The …","Creates a string attribute in the given context containing …","Constructs a string reference from a null-terminated C …","Returns true if two string references are equal, false …","Creates a symbol reference attribute in the given context …","Returns the string reference to the leaf referenced …","Returns pos-th reference nested in the given symbol …","Returns the number of references nested in the given …","Returns the string reference to the root referenced …","Creates a symbol table for the given operation. If the …","Destroys the symbol table created with …","Removes the given operation from the symbol table and …","Returns the name of the attribute used to store symbol …","Returns the name of the attribute used to store symbol …","Inserts the given operation into the given symbol table. …","Looks up a symbol with the given name in the given symbol …","Attempt to replace all uses that are nested within the …","Walks all symbol table operations nested within, and …","","","","Creates a tuple type that consists of the given list of …","Returns the number of types contained in a tuple.","Returns the pos-th type in the tuple type.","Creates a type attribute wrapping the given type in the …","Returns the type stored in the given type attribute.","Prints the type to the standard error stream.","Checks if two types are equal.","Gets the context that a type was created with.","Gets the type ID of the type.","Allocates a type id that is valid for the lifetime of the …","Creates a type id allocator for dynamic type id creation","Deallocates the allocator and all allocated type ids","<code>ptr</code> must be 8 byte aligned and unique to a type valid for …","Checks if two type ids are equal.","Returns the hash value of the type id.","Returns <code>true</code> if the given type is an AnyQuantizedType.","Checks whether the given type is a bf16 type.","Returns <code>true</code> if the given type is a …","Checks whether the given type is a Complex type.","Checks whether the given type is an f16 type.","Checks whether the given type is an f32 type.","Checks whether the given type is an f64 type.","Checks whether the given type is an f8E4M3FN type.","Checks whether the given type is an f8E5M2 type.","Checks whether the given type is a function type.","Checks whether the given type is an index type.","Checks whether the given type is an integer type.","Checks whether the given type is a MemRef type.","Checks whether the given type is a None type.","Checks whether the given type is an opaque type.","","","","","","","Returns <code>true</code> if the given type is a quantization dialect …","Checks whether the given type is a ranked tensor type.","Checks whether the given type is a Shaped type.","Checks whether the given type is a Tensor type.","","","Checks whether the given type is a tuple type.","Returns <code>true</code> if the given type is a …","Returns <code>true</code> if the given type is a UniformQuantizedType.","Checks whether the given type is an UnrankedMemRef type.","Checks whether the given type is an unranked tensor type.","Checks whether the given type is a Vector type.","Parses a type. The type is owned by the context.","Prints a location by sending chunks of the string …","Creates an instance of UniformQuantizedPerAxisType with …","Returns the number of axes in the given quantized per-axis …","Returns the index of the quantized dimension in the given …","Returns <code>pos</code>-th scale of the given quantized per-axis type.","Returns <code>pos</code>-th zero point of the given quantized per-axis …","Returns <code>true</code> if the given uniform quantized per-axis type …","Creates an instance of UniformQuantizedType with the given …","Returns the scale of the given uniform quantized type.","Returns the zero point of the given uniform quantized type.","Returns <code>true</code> if the given uniform quantized type is …","Creates a unit attribute in the given context.","","","","","","","","","","","","Creates an Unranked MemRef type with the given element …","Same as “mlirUnrankedMemRefTypeGet” but returns a …","Returns the memory spcae of the given Unranked MemRef type.","Creates an unranked tensor type with the given element …","Same as “mlirUnrankedTensorTypeGet” but returns a …","Prints the value to the standard error stream.","Returns 1 if two values are equal, 0 otherwise.","Returns an op operand representing the first use of the …","Returns the type of the value.","Returns 1 if the value is a block argument, 0 otherwise.","Returns 1 if the value is an operation result, 0 otherwise.","Prints a value by sending chunks of the string …","Creates a vector type of the shape identified by its rank …","Same as “mlirVectorTypeGet” but returns a nullptr …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","This callback is called when the pass is run. See …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,22,24,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,31,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,31,5,31,24,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,31,0,0,0,0,0,0,0,0,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,5,24,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,24,24,24,24,24,22,24,24,3,4,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,23,25,26,27,28,29,30,32,33,34,24,24,31,24,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,0,0,0,0,0,0,0,0,0,6,0],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[1,1],[2,2],[3,3],[4,4],[5,5],[6,6],[7,7],[8,8],[9,9],[10,10],[11,11],[12,12],[13,13],[14,14],[15,15],[16,16],[17,17],[18,18],[19,19],[20,20],[21,21],[22,22],[23,23],[24,24],[25,25],[26,26],[27,27],[28,28],[29,29],[30,30],[31,31],[32,32],[33,33],[34,34],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,[[1,35],36],[[2,35],36],[[3,35],36],[[4,35],36],[[5,35],36],[[6,35],36],[[7,35],36],[[8,35],36],[[9,35],36],[[10,35],36],[[11,35],36],[[12,35],36],[[13,35],36],[[14,35],36],[[15,35],36],[[16,35],36],[[17,35],36],[[18,35],36],[[19,35],36],[[20,35],36],[[21,35],36],[[22,35],36],[[23,35],36],[[24,35],36],[[25,35],36],[[26,35],36],[[27,35],36],[[28,35],36],[[29,35],36],[[30,35],36],[[31,35],36],[[32,35],36],[[33,35],36],[[34,35],36],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],38],[[],38],[[],38],[[],38],[[],38],[[],38],[[],38],[[],38],[[],38],[[],38],[[],38],[[],38],[[],38],[[],38],[[],38],[[],38],[[],38],[[],38],[[],38],[[],38],[[],38],[[],38],[[],38],[[],38],[[],38],[[],38],[[],38],[[],38],[[],38],[[],38],[[],38],[[],38],[[],38],[[],38],0,0,0,0,0,0,0,0,0,0,0],"p":[[3,"__fsid_t"],[3,"max_align_t"],[3,"MlirTypeID"],[3,"MlirTypeIDAllocator"],[3,"MlirStringRef"],[3,"MlirLogicalResult"],[3,"MlirContext"],[3,"MlirDialect"],[3,"MlirDialectRegistry"],[3,"MlirOperation"],[3,"MlirOpOperand"],[3,"MlirOpPrintingFlags"],[3,"MlirBlock"],[3,"MlirRegion"],[3,"MlirSymbolTable"],[3,"MlirAttribute"],[3,"MlirIdentifier"],[3,"MlirLocation"],[3,"MlirModule"],[3,"MlirType"],[3,"MlirValue"],[3,"MlirNamedAttribute"],[3,"MlirDialectHandle"],[3,"MlirOperationState"],[3,"MlirAffineExpr"],[3,"MlirAffineMap"],[3,"MlirPass"],[3,"MlirExternalPass"],[3,"MlirPassManager"],[3,"MlirOpPassManager"],[3,"MlirExternalPassCallbacks"],[3,"MlirDiagnostic"],[3,"MlirExecutionEngine"],[3,"MlirIntegerSet"],[3,"Formatter"],[6,"Result"],[4,"Result"],[3,"TypeId"]]},\
"once_cell":{"doc":"Overview","t":"AAADDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL","n":["race","sync","unsync","OnceBool","OnceBox","OnceNonZeroUsize","OnceRef","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","default","default","default","default","drop","fmt","fmt","fmt","fmt","from","from","from","from","get","get","get","get","get_or_init","get_or_init","get_or_init","get_or_init","get_or_try_init","get_or_try_init","get_or_try_init","get_or_try_init","into","into","into","into","new","new","new","new","set","set","set","set","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","Lazy","OnceCell","borrow","borrow","borrow_mut","borrow_mut","clone","clone_from","clone_into","default","default","deref","deref_mut","eq","fmt","fmt","force","force_mut","from","from","from","from","get","get","get_mut","get_mut","get_or_init","get_or_try_init","get_unchecked","into","into","into_inner","into_value","new","new","set","take","to_owned","try_from","try_from","try_insert","try_into","try_into","type_id","type_id","wait","with_value","Lazy","OnceCell","borrow","borrow","borrow_mut","borrow_mut","clone","clone_from","clone_into","default","default","deref","deref_mut","eq","fmt","fmt","force","force_mut","from","from","from","from","get","get","get_mut","get_mut","get_or_init","get_or_try_init","into","into","into_inner","into_value","new","new","set","take","to_owned","try_from","try_from","try_insert","try_into","try_into","type_id","type_id","with_value"],"q":["once_cell","","","once_cell::race","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","once_cell::sync","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","once_cell::unsync","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Thread-safe, non-blocking, “first one wins” flavor of …","Thread-safe, blocking version of <code>OnceCell</code>.","Single-threaded version of <code>OnceCell</code>.","A thread-safe cell which can be written to only once.","A thread-safe cell which can be written to only once.","A thread-safe cell which can be written to only once.","A thread-safe cell which can be written to only once.","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Gets a reference to the underlying value.","Gets a reference to the underlying value.","Gets the underlying value.","Gets the underlying value.","Gets the contents of the cell, initializing it with <code>f</code> if …","Gets the contents of the cell, initializing it with <code>f</code> if …","Gets the contents of the cell, initializing it with <code>f</code> if …","Gets the contents of the cell, initializing it with <code>f</code> if …","Gets the contents of the cell, initializing it with <code>f</code> if …","Gets the contents of the cell, initializing it with <code>f</code> if …","Gets the contents of the cell, initializing it with <code>f</code> if …","Gets the contents of the cell, initializing it with <code>f</code> if …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Creates a new empty cell.","Creates a new empty cell.","Creates a new empty cell.","Creates a new empty cell.","Sets the contents of this cell to <code>value</code>.","Sets the contents of this cell to <code>value</code>.","Sets the contents of this cell to <code>value</code>.","Sets the contents of this cell to <code>value</code>.","","","","","","","","","","","","","A value which is initialized on the first access.","A thread-safe cell which can be written to only once.","","","","","","","","","Creates a new lazy value using <code>Default</code> as the initializing …","","","","","","Forces the evaluation of this lazy value and returns a …","Forces the evaluation of this lazy value and returns a …","Returns the argument unchanged.","","","Returns the argument unchanged.","Gets the reference to the underlying value.","Gets the reference to the result of this lazy value if it …","Gets the mutable reference to the underlying value.","Gets the reference to the result of this lazy value if it …","Gets the contents of the cell, initializing it with <code>f</code> if …","Gets the contents of the cell, initializing it with <code>f</code> if …","Get the reference to the underlying value, without …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Consumes the <code>OnceCell</code>, returning the wrapped value. Returns","Consumes this <code>Lazy</code> returning the stored value.","Creates a new empty cell.","Creates a new lazy value with the given initializing …","Sets the contents of this cell to <code>value</code>.","Takes the value out of this <code>OnceCell</code>, moving it back to an …","","","","Like <code>set</code>, but also returns a reference to the final cell …","","","","","Gets the reference to the underlying value, blocking the …","Creates a new initialized cell.","A value which is initialized on the first access.","A cell which can be written to only once. It is not thread …","","","","","","","","","Creates a new lazy value using <code>Default</code> as the initializing …","","","","","","Forces the evaluation of this lazy value and returns a …","Forces the evaluation of this lazy value and returns a …","","Returns the argument unchanged.","","Returns the argument unchanged.","Gets a reference to the underlying value.","Gets the reference to the result of this lazy value if it …","Gets a mutable reference to the underlying value.","Gets the mutable reference to the result of this lazy …","Gets the contents of the cell, initializing it with <code>f</code> if …","Gets the contents of the cell, initializing it with <code>f</code> if …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Consumes the <code>OnceCell</code>, returning the wrapped value.","Consumes this <code>Lazy</code> returning the stored value.","Creates a new empty cell.","Creates a new lazy value with the given initializing …","Sets the contents of this cell to <code>value</code>.","Takes the value out of this <code>OnceCell</code>, moving it back to an …","","","","Like <code>set</code>, but also returns a reference to the final cell …","","","","","Creates a new initialized cell."],"i":[0,0,0,0,0,0,0,1,2,3,4,1,2,3,4,1,2,3,4,2,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,0,0,14,16,14,16,14,14,14,14,16,16,16,14,14,16,16,16,14,14,14,16,14,16,14,16,14,14,14,14,16,14,16,14,16,14,14,14,14,16,14,14,16,14,16,14,14,0,0,21,22,21,22,21,21,21,21,22,22,22,21,21,22,22,22,21,21,21,22,21,22,21,22,21,21,21,22,21,22,21,22,21,21,21,21,22,21,21,22,21,22,21],"f":[0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],1],[[],2],[[],3],[[],4],[2],[[1,5],6],[[2,5],6],[[3,5],6],[[4,5],6],[[]],[[]],[[]],[[]],[1,7],[2,7],[3,[[7,[8]]]],[4,[[7,[9]]]],[1],[2],[3,8],[4,9],[1,10],[2,10],[3,[[10,[8]]]],[4,[[10,[9]]]],[[]],[[]],[[]],[[]],[[],1],[[],2],[[],3],[[],4],[1,10],[[2,11],[[10,[11]]]],[[3,8],10],[[4,9],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],12],[[],12],[[],12],[[],12],0,0,[[]],[[]],[[]],[[]],[[[14,[13]]],[[14,[13]]]],[[[14,[13]],[14,[13]]]],[[]],[[],14],[[],[[16,[15]]]],[[[16,[17]]]],[[[16,[17]]]],[[[14,[18]],14],9],[[[14,[19]],5],6],[[[16,[19]],5],6],[16],[16],[[]],[20],[[],14],[[]],[14,7],[16,7],[14,7],[16,7],[14],[14,10],[14],[[]],[[]],[14,7],[16,10],[[],14],[[],16],[14,10],[14,7],[[]],[[],10],[[],10],[14,10],[[],10],[[],10],[[],12],[[],12],[14],[[],14],0,0,[[]],[[]],[[]],[[]],[[[21,[13]]],[[21,[13]]]],[[[21,[13]],[21,[13]]]],[[]],[[],21],[[],[[22,[15]]]],[[[22,[17]]]],[[[22,[17]]]],[[[21,[18]],[21,[18]]],9],[[[21,[19]],5],6],[[[22,[19]],5],6],[22],[22],[20],[[]],[[],21],[[]],[21,7],[22,7],[21,7],[22,7],[21],[21,10],[[]],[[]],[21,7],[22,10],[[],21],[[],22],[21,10],[21,7],[[]],[[],10],[[],10],[21,10],[[],10],[[],10],[[],12],[[],12],[[],21]],"p":[[3,"OnceRef"],[3,"OnceBox"],[3,"OnceNonZeroUsize"],[3,"OnceBool"],[3,"Formatter"],[6,"Result"],[4,"Option"],[3,"NonZeroUsize"],[15,"bool"],[4,"Result"],[3,"Box"],[3,"TypeId"],[8,"Clone"],[3,"OnceCell"],[8,"Default"],[3,"Lazy"],[8,"FnOnce"],[8,"PartialEq"],[8,"Debug"],[15,"never"],[3,"OnceCell"],[3,"Lazy"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
