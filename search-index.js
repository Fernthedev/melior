var searchIndex = JSON.parse('{\
"convert_case":{"doc":"Converts to and from various cases.","t":"NNNENNNEINDNNNNNNNNNNENNNNNNNDNNNNNNNNNNNNNLLLLLLLLLLLLLLLMLLLLLLLLLLMLLLLLLLLLLLLLLLKLLLLLLLLKLLLLLMLLLLLLLKLLLLLLLLLLLLLLLLLLLLKLL","n":["Acronym","Alternating","Alternating","Boundary","Camel","Camel","Capital","Case","Casing","Cobol","Converter","DigitLower","DigitUpper","Flat","Hyphen","Kebab","Lower","LowerDigit","LowerUpper","Lowercase","Pascal","Pattern","PseudoRandom","PseudoRandom","Random","ScreamingSnake","Sentence","Snake","Space","StateConverter","Title","Toggle","Toggle","Train","Underscore","Upper","UpperCamel","UpperDigit","UpperFlat","UpperKebab","UpperLower","UpperSnake","Uppercase","add_boundaries","add_boundary","all","all_cases","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","boundaries","boundaries","clone","clone","clone","clone_into","clone_into","clone_into","convert","default","defaults","delim","delim","delims","deterministic_cases","digit_letter","digits","eq","eq","eq","fmt","fmt","fmt","from","from","from","from","from","from_case","from_case","from_case","hash","into","into","into","into","into","is_case","letter_digit","list_from","mutate","new","pattern","pattern","remove_boundaries","remove_boundary","remove_delim","remove_pattern","set_boundaries","set_delim","set_pattern","to_case","to_case","to_case","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","with_boundaries","with_boundaries","without_boundaries"],"q":["convert_case","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Acronyms are identified by two uppercase letters followed …","Alternating case strings are delimited by spaces.  …","Alternating patterns make each letter of each word …","A boundary defines how a string is split into words.  Some …","Camel case strings are lowercase, but for every word …","Camel patterns make the first word lowercase and the …","Capital patterns makes the first letter of each word …","Defines the type of casing a string can be.","Describes items that can be converted into a case.  This …","Cobol case strings are delimited by hyphens <code>-</code> and are all …","The parameters for performing a case conversion.","Splits where digit is followed by a lowercase letter.","Splits where digit is followed by an uppercase letter.","Flat case strings are all lowercase, with no delimiter. …","Splits on <code>-</code>, consuming the character on segmentation.","Kebab case strings are delimited by hyphens <code>-</code> and are all …","Lowercase strings are delimited by spaces and all …","Splits where a lowercase letter is followed by a digit.","Splits where a lowercase letter is followed by an …","Lowercase patterns make all words lowercase.","Pascal case strings are lowercase, but for every word the …","A pattern is how a set of words is mutated before joining …","Pseudo-random case strings are delimited by spaces and …","PseudoRandom patterns are random-like patterns.  Instead …","Random case strings are delimited by spaces and characters …","Screaming snake case is an alternative name for upper …","Capital patterns make the first word capitalized and the …","Snake case strings are delimited by underscores <code>_</code> and are …","Splits on space, consuming the character on segmentation.","Holds information about parsing before converting into a …","Title case strings are delimited by spaces. Only the …","Toggle case strings are delimited by spaces.  All …","Toggle patterns have the first letter of each word …","Train case strings are delimited by hyphens <code>-</code>.  All …","Splits on <code>_</code>, consuming the character on segmentation.","Uppercase strings are delimited by spaces and all …","Upper camel case is an alternative name for Pascal case.","Splits where an uppercase letter is followed by a digit.","Upper flat case strings are all uppercase, with no …","Upper kebab case is an alternative name for Cobol case.","Splits where an uppercase letter is followed by a …","Upper snake case strings are delimited by underscores <code>_</code> …","Uppercase patterns make all words uppercase.","Adds a vector of boundaries to the list of boundaries.","Adds a boundary to the list of boundaries.","Returns all boundaries.  Note that this includes the …","Returns a vector with all case enum variants in no …","","","","","","","","","","","Returns the boundaries used in the corresponding case.  …","How a string is segmented into words.","","","","","","","Converts a string.","","The default list of boundaries used when <code>Casing::to_case</code> …","Returns the delimiter used in the corresponding case.  The …","The string used to join mutated words together.","Returns the boundaries that split around single …","Returns a vector with all the cases that do not depend on …","Returns the boundaries that are digits followed by …","Returns the boundaries that involve digits: <code>DigitUpper</code>, …","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Start the case conversion by storing the boundaries …","Sets the boundaries to those associated with the provided …","Uses the boundaries associated with <code>case</code> for word …","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Determines if <code>self</code> is of the given case.  This is done …","Returns the boundaries that are letters followed by …","Returns a list of all boundaries that are identified …","Generates a vector of new <code>String</code>s in the right pattern …","Creates a new <code>Converter</code> with default fields.  This is the …","Returns the pattern used in the corresponding case.  The …","How each word is mutated before joining.  In the case that …","Removes all the provided boundaries from the list of …","Removes a boundary from the list of boundaries if it …","Sets the delimeter to an empty string.","Sets the pattern field to <code>None</code>.  Where there is no …","Sets the boundaries to those provided.","Sets the delimeter.","Sets the pattern.","Convert the string into the given case.  It will reference …","Set the pattern and delimiter to those associated with the …","Consumes the <code>StateConverter</code> and returns the converted …","","","","","","","","","","","","","","","","","","","Creates a <code>StateConverter</code> struct initialized with the …","Overwrites boundaries for word segmentation with those …","Removes any boundaries that were already initialized.  …"],"i":[2,4,5,0,4,5,5,0,0,4,0,2,2,4,2,4,4,2,2,5,4,0,4,5,4,4,5,4,2,0,4,4,5,4,2,4,4,2,4,4,2,4,5,1,1,2,4,1,11,4,5,2,1,11,4,5,2,4,1,4,5,2,4,5,2,1,1,2,4,1,2,4,2,2,4,5,2,4,5,2,1,11,4,5,2,15,1,11,4,1,11,4,5,2,15,2,2,5,1,4,1,1,1,1,1,1,1,1,15,1,11,4,5,2,1,11,4,5,2,1,11,4,5,2,1,11,4,5,2,15,11,11],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[1,1],[[1,2],1],[[],[[3,[2]]]],[[],[[3,[4]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[4,[[3,[2]]]],0,[4,4],[5,5],[2,2],[[]],[[]],[[]],[1,6],[[],1],[[],[[3,[2]]]],[4,7],0,[[],[[3,[2]]]],[[],[[3,[4]]]],[[],[[3,[2]]]],[[],[[3,[2]]]],[[4,4],8],[[5,5],8],[[2,2],8],[[4,9],10],[[5,9],10],[[2,9],10],[[]],[[]],[[]],[[]],[[]],[4,11],[[1,4],1],[[[11,[[12,[7]]]],4],[[11,[[12,[7]]]]]],[4],[[]],[[]],[[]],[[]],[[]],[4,8],[[],[[3,[2]]]],[7,[[3,[2]]]],[5,[[3,[6]]]],[[],1],[4,5],0,[1,1],[[1,2],1],[1,1],[1,1],[1,1],[1,1],[[1,5],1],[4,6],[[1,4],1],[[[11,[[12,[7]]]],4],6],[[]],[[]],[[]],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],14],[[],14],[[],14],[[],14],[[],14],[[],11],[[[11,[[12,[7]]]]],[[11,[[12,[7]]]]]],[[[11,[[12,[7]]]]],[[11,[[12,[7]]]]]]],"p":[[3,"Converter"],[4,"Boundary"],[3,"Vec"],[4,"Case"],[4,"Pattern"],[3,"String"],[15,"str"],[15,"bool"],[3,"Formatter"],[6,"Result"],[3,"StateConverter"],[8,"AsRef"],[4,"Result"],[3,"TypeId"],[8,"Casing"]]},\
"melior":{"doc":"Melior is the rustic MLIR bindings for Rust. It aims to …","t":"NNDDEDNNNNNNNNNDNNLLLLLLLLLLLLLLLLLLLALLLLLLLLLLLLLLLLLLLLLLLLLALLLLLALLLLLLLLLLLLLLLLLLLLLADDDALLLLLLLLLLLLLLLLLLLLLLALLLLLLLALLLLLLLLLLLLLLLLLLLLLLLFFFFFFFFFFAFFFFFFDDCCDDDCCDDCIDILLLALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLALLLLLLLLKKLLLLLLLLLLLLLLLLLLLLLALLLLLLLLLLLLLDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDCDDILLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLDDLLLLLLLLLLLLLLLLLLLLLLLLLDDDLLLLLLLLLLLLALLLLLLLLLLLLLLLLLALLLLLLLLLFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF","n":["BlockArgumentExpected","BlockArgumentPosition","Context","ContextRef","Error","ExecutionEngine","FunctionExpected","FunctionInputPosition","FunctionResultPosition","InvokeFunction","MemRefExpected","OperationResultExpected","OperationResultPosition","ParsePassPipeline","RunPass","StringRef","TupleExpected","TupleFieldPosition","allow_unregistered_dialects","append_dialect_registry","as_str","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","deref","dialect","drop","drop","enable_multi_threading","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","get_or_load_dialect","into","into","into","into","into","invoke_packed","ir","is_registered_operation","load_all_available_dialects","loaded_dialect_count","new","new","pass","provide","registered_dialect_count","set_allow_unregistered_dialects","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","utility","Dialect","Handle","Registry","arith","async","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","cf","clone","clone","clone_into","clone_into","context","default","drop","eq","fmt","fmt","fmt","from","from","from","func","func","gpu","insert_dialect","into","into","into","linalg","llvm","llvm","load_dialect","namespace","namespace","new","pdl","quant","register_dialect","scf","shape","sparse_tensor","tensor","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","addf","addi","divf","divi","mulf","muli","subf","subi","func","return","type","array","function","opaque_pointer","pointer","struct","void","AffineMap","Attribute","Block","BlockRef","Identifier","Location","Module","Operation","OperationRef","Region","RegionRef","Type","TypeLike","Value","ValueLike","append_block","as_operation","as_string_ref","block","body","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","context","context","context","context","context","default","deref","drop","drop","dump","dump","dump","dump","eq","eq","eq","eq","eq","eq","eq","first_block","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from_operation","fused","insert_block_after","insert_block_before","into","into","into","into","into","into","into","into","is_affine_map","is_array","is_block_argument","is_block_argument","is_bool","is_dense_elements","is_dense_float_elements","is_dense_integer_elements","is_dictionary","is_elements","is_float","is_integer","is_integer_set","is_null","is_opaque","is_operation_result","is_operation_result","is_sparse_elements","is_string","is_symbol","is_type","is_unit","name","new","new","new","new","null","operation","parse","parse","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_raw","to_raw","to_raw","to_string","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type","type","type","type","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unknown","Argument","Block","BlockRef","add_argument","append_operation","argument","argument_count","argument_number","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","deref","detach","drop","eq","eq","first_operation","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","insert_operation","insert_operation_after","insert_operation_before","into","into","into","new","next_in_region","owner","parent_operation","parent_region","set_type","terminator","to_owned","to_owned","to_raw","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","Builder","Operation","OperationRef","ResultValue","add_attributes","add_operands","add_regions","add_results","add_successors","block","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","build","clone","clone","clone","clone_into","clone_into","clone_into","context","deref","drop","dump","enable_result_type_inference","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","into","into","into","into","name","new","next_in_block","owner","region","region_count","result","result_count","result_number","to_owned","to_owned","to_owned","to_raw","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","verify","Function","Id","Tuple","Type","TypeLike","bfloat16","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","context","context","context","dump","dump","dump","eq","float16","float32","float64","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","get_width","get_width","get_width","id","id","id","id","index","input","input_count","integer","into","into","into","is_bfloat16","is_bfloat16","is_bfloat16","is_float16","is_float16","is_float16","is_float32","is_float32","is_float32","is_float64","is_float64","is_float64","is_function","is_function","is_function","is_index","is_index","is_index","is_integer","is_integer","is_integer","is_mem_ref","is_mem_ref","is_mem_ref","is_tuple","is_tuple","is_tuple","is_vector","is_vector","is_vector","new","new","none","parse","result","result_count","signed_integer","to_owned","to_owned","to_owned","to_raw","to_raw","to_raw","to_raw","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","type","type_count","type_id","type_id","type_id","unsigned_integer","vector","vector_checked","Allocator","Id","allocate_type_id","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","default","drop","eq","fmt","fmt","from","from","hash","into","into","new","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","Manager","OperationManager","Pass","__private_from_raw_fn","add_pass","add_pass","as_operation_pass_manager","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","conversion","drop","enable_ir_printing","enable_verifier","fmt","fmt","from","from","from","into","into","into","nested_under","nested_under","new","run","to_owned","to_string","transform","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","arith_to_llvm","convert_affine_for_to_gpu","convert_affine_to_standard","convert_amdgpu_to_rocdl","convert_arith_to_spirv","convert_arm_neon_2_d_to_intr","convert_async_to_llvm","convert_bufferization_to_mem_ref","convert_complex_to_libm","convert_complex_to_llvm","convert_complex_to_standard","convert_control_flow_to_llvm","convert_control_flow_to_spirv","convert_func_to_llvm","convert_func_to_spirv","convert_gpu_launch_func_to_vulkan_launch_func","convert_gpu_ops_to_nvvm_ops","convert_gpu_ops_to_rocdl_ops","convert_gpu_to_spirv","convert_index_to_llvm_pass","convert_linalg_to_llvm","convert_linalg_to_standard","convert_math_to_funcs","convert_math_to_libm","convert_math_to_llvm","convert_math_to_spirv","convert_mem_ref_to_spirv","convert_nvgpu_to_nvvm","convert_open_acc_to_llvm","convert_open_acc_to_scf","convert_open_mp_to_llvm","convert_parallel_loop_to_gpu","convert_pdl_to_pdl_interp","convert_scf_to_open_mp","convert_shape_constraints","convert_shape_to_standard","convert_spirv_to_llvm","convert_tensor_to_linalg","convert_tensor_to_spirv","convert_vector_to_gpu","convert_vector_to_llvm","convert_vector_to_scf","convert_vector_to_spirv","convert_vulkan_launch_func_to_vulkan_calls","gpu_to_llvm","lower_host_code_to_llvm","map_mem_ref_storage_class","mem_ref_to_llvm","reconcile_unrealized_casts","scf_to_control_flow","scf_to_spirv","tosa_to_arith","tosa_to_linalg","tosa_to_linalg_named","tosa_to_scf","tosa_to_tensor","canonicalizer","cse","inliner","print_operation_stats","register_canonicalizer","register_cse","register_inliner","register_print_operation_stats","register_sccp","register_strip_debug_info","register_symbol_dce","register_symbol_privatize","sccp","strip_debug_info","symbol_dce","symbol_privatize","parse_pass_pipeline","register_all_dialects","register_all_llvm_translations","register_all_passes"],"q":["melior","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","melior::dialect","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","melior::dialect::arith","","","","","","","","melior::dialect::func","","melior::dialect::llvm","melior::dialect::llvm::type","","","","","","melior::irmelior::ir::block","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","melior::ir::operation","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","melior::ir::type","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","melior::ir::type::id","","","","","","","","","","","","","","","","","","","","","","","","","","","melior::pass","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","melior::pass::conversion","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","melior::pass::transform","","","","","","","","","","","","","","","","melior::utility","","",""],"d":["","","A context of IR, dialects, and passes.","A reference to a context.","A Melior error.","An execution engine.","","","","","","","","","","A string reference.","","","Returns <code>true</code> if unregistered dialects are allowed.","Appends a dialect registry.","Converts a string reference into a <code>str</code>.","","","","","","","","","","","","","","","","","Dialect handles, instances, and registry.","","","Enables multi-threading.","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Gets or loads a dialect.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Invokes a function in a module. The <code>arguments</code> argument …","IR objects and builders.","Returns <code>true</code> if a given operation is registered in a …","Loads all available dialects.","Gets a number of loaded dialects.","Creates an execution engine.","Creates a context.","Passes and pass managers.","","Gets a number of registered dialects.","Set if unregistered dialects are allowed.","","","","","","","","","","","","","","","","","","","Utility functions.","A dialect.","A dialect handle.","A dialect registry.","","Creates a <code>async</code> dialect handle.","","","","","","","Creates a <code>cf</code> dialect handle.","","","","","Gets a context.","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Creates a <code>func</code> dialect handle.","Creates a <code>gpu</code> dialect handle.","Inserts a dialect into a dialect registry.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Creates a <code>linalg</code> dialect handle.","The <code>llvm</code> dialect","Creates a <code>llvm</code> dialect handle.","Loads a dialect into a context.","Gets a namespace.","Gets a namespace.","Creates a dialect registry.","Creates a <code>pdl</code> dialect handle.","Creates a <code>quant</code> dialect handle.","Registers a dialect into a context.","Creates a <code>scf</code> dialect handle.","Creates a <code>shape</code> dialect handle.","Creates a <code>sparse_tensor</code> dialect handle.","Creates a <code>tensor</code> dialect handle.","","","","","","","","","","","","","Create a <code>arith.addi</code> operation.","","","","","","","Create a <code>func.func</code> operation.","Create a <code>func.return</code> operation.","LLVM types","Creates an LLVM array type.","Creates an LLVM function type.","Creates an LLVM opaque pointer type.","Creates an LLVM pointer type.","Creates an LLVM struct type.","Creates an LLVM void type.","An affine map.","An attribute.","","","An identifier.","A location","A module.","","","A region.","A reference to a region.","","Trait for type-like types.","A value.","Trait for value-like types.","Appends a block.","Converts a module into an operation.","Converts an identifier into a string reference.","Blocks.","Gets a block of a module body.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Gets a context.","Gets a context.","Gets a context.","Gets a context.","Gets a context.","","","","","Dumps a value.","Dumps a value.","Dumps an affine map.","Dumps an attribute.","","","","","","","","Gets the first block in a region.","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","Converts an operation into a module.","Creates a fused location.","Inserts a block after another block.","Inserts a block before another block.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns <code>true</code> if an attribute is a affine map.","Returns <code>true</code> if an attribute is a array.","Returns <code>true</code> if a value is a block argument.","Returns <code>true</code> if a value is a block argument.","Returns <code>true</code> if an attribute is a bool.","Returns <code>true</code> if an attribute is dense elements.","Returns <code>true</code> if an attribute is dense float elements.","Returns <code>true</code> if an attribute is dense integer elements.","Returns <code>true</code> if an attribute is a dictionary.","Returns <code>true</code> if an attribute is elements.","Returns <code>true</code> if an attribute is a float.","Returns <code>true</code> if an attribute is an integer.","Returns <code>true</code> if an attribute is an integer set.","Returns <code>true</code> if an attribute is null.","Returns <code>true</code> if an attribute is opaque.","Returns <code>true</code> if a value is an operation result.","Returns <code>true</code> if a value is an operation result.","Returns <code>true</code> if an attribute is sparse elements.","Returns <code>true</code> if an attribute is a string.","Returns <code>true</code> if an attribute is a symbol.","Returns <code>true</code> if an attribute is a type.","Returns <code>true</code> if an attribute is a unit.","Creates a name location.","Creates an identifier.","Creates a location with a filename and line and column …","Creates a module.","Creates a region.","Creates a null attribute.","Operations and operation builders.","Parses an attribute.","Parses a module.","","","","","","","Converts a type into a raw type.","Converts a value into a raw value.","","","","","","","","","","","","","","","","","","","","","","Types and type IDs.","Gets a type.","Gets a type.","Gets a type.","","Gets a type ID.","","","","","","","","Creates an unknown location.","A block argument.","A block.","A reference of a block.","Adds an argument.","Appends an operation.","Gets an argument at a position.","Gets a number of arguments.","","","","","","","","","","","","","Detaches a block from a region and assumes its ownership.","","","","Gets the first operation.","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Inserts an operation.","Inserts an operation after another.","Inserts an operation before another.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Creates a block.","Gets a next block in a region.","","Gets a parent operation.","Gets a parent region.","","Gets a terminator operation.","","","","","","","","","","","","","","","","","An operation builder.","An operation.","A reference to an operation.","An operation result.","Adds attributes.","Adds operands.","Adds regions.","Adds results.","Adds successor blocks.","Gets a block.","","","","","","","","","Builds an operation.","","","","","","","Gets a context.","","","Dumps an operation.","Enables result type inference.","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Gets a name.","Creates an operation builder.","Gets the next operation in the same block.","","Gets a result at an index.","Gets a number of regions.","Gets a result at a position.","Gets a number of results.","","","","","","","","","","","","","","","","","","","","","","Verifies an operation.","A function type.","","A tuple type.","A type.","Trait for type-like types.","Creates a bfloat16 type.","","","","","","","","","","","","","Gets a context.","Gets a context.","Gets a context.","Dumps a type.","Dumps a type.","Dumps a type.","","Creates a float16 type.","Creates a float32 type.","Creates a float64 type.","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","Gets a bit width of an integer type.","Gets a bit width of an integer type.","Gets a bit width of an integer type.","Type IDs and allocators","Gets an ID.","Gets an ID.","Gets an ID.","Creates an index type.","Gets an input at a position.","Gets a number of inputs.","Creates an integer type.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns <code>true</code> if a type is bfloat16.","Returns <code>true</code> if a type is bfloat16.","Returns <code>true</code> if a type is bfloat16.","Returns <code>true</code> if a type is float16.","Returns <code>true</code> if a type is float16.","Returns <code>true</code> if a type is float16.","Returns <code>true</code> if a type is float32.","Returns <code>true</code> if a type is float32.","Returns <code>true</code> if a type is float32.","Returns <code>true</code> if a type is float64.","Returns <code>true</code> if a type is float64.","Returns <code>true</code> if a type is float64.","Returns <code>true</code> if a type is a function.","Returns <code>true</code> if a type is a function.","Returns <code>true</code> if a type is a function.","Returns <code>true</code> if a type is index.","Returns <code>true</code> if a type is index.","Returns <code>true</code> if a type is index.","Returns <code>true</code> if a type is integer.","Returns <code>true</code> if a type is integer.","Returns <code>true</code> if a type is integer.","Returns <code>true</code> if a type is a memory reference.","Returns <code>true</code> if a type is a memory reference.","Returns <code>true</code> if a type is a memory reference.","Returns <code>true</code> if a type is a tuple.","Returns <code>true</code> if a type is a tuple.","Returns <code>true</code> if a type is a tuple.","Returns <code>true</code> if a type is a vector.","Returns <code>true</code> if a type is a vector.","Returns <code>true</code> if a type is a vector.","Creates a function type.","Creates a tuple type.","Creates a none type.","Parses a type.","Gets a result at a position.","Gets a number of results.","Creates a signed integer type.","","","","Converts a type into a raw type.","","","","","","","","","","","","","","","Gets a field at a position.","Gets a number of fields.","","","","Creates an unsigned integer type.","Creates a vector type.","Creates a vector type with diagnostics.","A type ID allocator.","A type ID.","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","A pass manager.","An operation pass manager.","A pass.","","Adds a pass.","Adds a pass.","Converts a pass manager to an operation pass manager.","","","","","","","","","Dialect conversion passes.","","Enables IR printing.","Enables a verifier.","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Gets an operation pass manager for nested operations …","Gets an operation pass manager for nested operations …","Creates a pass manager.","Runs passes added to a pass manager against a module.","","","General transformation passes.","","","","","","","","","","Creates a pass of <code>ArithToLLVM</code>.","Creates a pass of <code>ConvertAffineForToGPU</code>.","Creates a pass of <code>ConvertAffineToStandard</code>.","Creates a pass of <code>ConvertAMDGPUToROCDL</code>.","Creates a pass of <code>ConvertArithToSPIRV</code>.","Creates a pass of <code>ConvertArmNeon2dToIntr</code>.","Creates a pass of <code>ConvertAsyncToLLVM</code>.","Creates a pass of <code>ConvertBufferizationToMemRef</code>.","Creates a pass of <code>ConvertComplexToLibm</code>.","Creates a pass of <code>ConvertComplexToLLVM</code>.","Creates a pass of <code>ConvertComplexToStandard</code>.","Creates a pass of <code>ConvertControlFlowToLLVM</code>.","Creates a pass of <code>ConvertControlFlowToSPIRV</code>.","Creates a pass of <code>ConvertFuncToLLVM</code>.","Creates a pass of <code>ConvertFuncToSPIRV</code>.","Creates a pass of <code>ConvertGpuLaunchFuncToVulkanLaunchFunc</code>.","Creates a pass of <code>ConvertGpuOpsToNVVMOps</code>.","Creates a pass of <code>ConvertGpuOpsToROCDLOps</code>.","Creates a pass of <code>ConvertGPUToSPIRV</code>.","Creates a pass of <code>ConvertIndexToLLVMPass</code>.","Creates a pass of <code>ConvertLinalgToLLVM</code>.","Creates a pass of <code>ConvertLinalgToStandard</code>.","Creates a pass of <code>ConvertMathToFuncs</code>.","Creates a pass of <code>ConvertMathToLibm</code>.","Creates a pass of <code>ConvertMathToLLVM</code>.","Creates a pass of <code>ConvertMathToSPIRV</code>.","Creates a pass of <code>ConvertMemRefToSPIRV</code>.","Creates a pass of <code>ConvertNVGPUToNVVM</code>.","Creates a pass of <code>ConvertOpenACCToLLVM</code>.","Creates a pass of <code>ConvertOpenACCToSCF</code>.","Creates a pass of <code>ConvertOpenMPToLLVM</code>.","Creates a pass of <code>ConvertParallelLoopToGpu</code>.","Creates a pass of <code>ConvertPDLToPDLInterp</code>.","Creates a pass of <code>ConvertSCFToOpenMP</code>.","Creates a pass of <code>ConvertShapeConstraints</code>.","Creates a pass of <code>ConvertShapeToStandard</code>.","Creates a pass of <code>ConvertSPIRVToLLVM</code>.","Creates a pass of <code>ConvertTensorToLinalg</code>.","Creates a pass of <code>ConvertTensorToSPIRV</code>.","Creates a pass of <code>ConvertVectorToGPU</code>.","Creates a pass of <code>ConvertVectorToLLVM</code>.","Creates a pass of <code>ConvertVectorToSCF</code>.","Creates a pass of <code>ConvertVectorToSPIRV</code>.","Creates a pass of <code>ConvertVulkanLaunchFuncToVulkanCalls</code>.","Creates a pass of <code>GpuToLLVM</code>.","Creates a pass of <code>LowerHostCodeToLLVM</code>.","Creates a pass of <code>MapMemRefStorageClass</code>.","Creates a pass of <code>MemRefToLLVM</code>.","Creates a pass of <code>ReconcileUnrealizedCasts</code>.","Creates a pass of <code>SCFToControlFlow</code>.","Creates a pass of <code>SCFToSPIRV</code>.","Creates a pass of <code>TosaToArith</code>.","Creates a pass of <code>TosaToLinalg</code>.","Creates a pass of <code>TosaToLinalgNamed</code>.","Creates a pass of <code>TosaToSCF</code>.","Creates a pass of <code>TosaToTensor</code>.","Creates a pass to canonicalize IR.","Creates a pass to eliminate common sub-expressions.","Creates a pass to inline function calls.","Creates a pass to print operation statistics.","Registers a pass to canonicalize IR.","Registers a pass to print operation stats.","Registers a pass to inline function calls.","Registers a pass to print operation stats.","Registers a pass to propagate constants.","Registers a pass to strip debug information.","Registers a pass to eliminate dead symbols.","Registers a pass to mark all top-level symbols private.","Creates a pass to propagate constants.","Creates a pass to strip debug information.","Creates a pass to eliminate dead symbols.","Creates a pass to mark all top-level symbols private.","Parses a pass pipeline.","Registers all dialects to a dialect registry.","Register all translations from other dialects to the <code>llvm</code> …","Register all passes."],"i":[10,10,0,0,0,0,10,10,10,10,10,10,10,10,10,0,10,10,1,1,4,9,1,8,10,4,9,1,8,10,4,8,4,8,4,1,8,0,9,1,1,1,8,10,4,1,8,10,10,4,9,1,8,10,4,4,1,9,1,8,10,4,9,0,1,1,1,9,1,0,10,1,1,8,4,10,9,1,8,10,4,9,1,8,10,4,9,1,8,10,4,0,0,0,0,0,19,19,3,13,19,3,13,19,19,13,19,13,13,3,3,13,19,3,13,19,3,13,0,19,19,19,19,3,13,19,0,19,19,19,13,3,19,19,19,19,19,19,19,19,13,19,3,13,19,3,13,19,3,13,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,24,15,30,0,15,31,23,30,21,15,24,32,20,31,23,30,21,15,24,32,20,31,23,30,21,32,20,31,23,30,21,32,20,31,23,30,21,15,24,32,15,24,47,47,31,23,31,23,30,21,24,32,20,24,31,31,23,23,30,21,21,15,24,32,20,20,31,23,30,21,15,24,32,20,20,20,15,21,24,24,31,23,30,21,15,24,32,20,23,23,47,47,23,23,23,23,23,23,23,23,23,23,23,47,47,23,23,23,23,23,21,30,21,15,24,23,0,23,15,31,23,30,21,32,20,48,47,20,31,23,21,20,31,23,30,21,15,24,32,20,31,23,30,21,15,24,32,20,0,47,47,23,31,23,23,30,21,15,24,32,20,21,0,0,0,27,27,27,27,35,27,35,28,27,35,28,35,28,35,28,28,27,27,27,28,27,27,27,35,35,28,28,27,35,28,27,27,27,27,35,28,27,27,35,27,27,35,27,35,28,35,27,35,28,27,35,35,28,27,35,28,27,35,28,0,0,0,0,39,39,39,39,39,22,39,22,34,29,39,22,34,29,39,22,34,29,22,34,29,22,29,22,22,39,22,29,22,22,34,34,29,29,39,22,34,29,39,22,34,29,22,39,22,34,22,22,22,22,34,22,34,29,34,22,34,29,39,22,34,34,29,39,22,34,29,39,22,34,29,22,0,0,0,0,0,25,41,42,25,41,42,25,41,42,25,41,42,25,48,48,48,48,48,48,25,25,25,25,41,41,42,42,25,25,41,42,25,25,25,48,48,48,0,48,48,48,25,41,41,25,41,42,25,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,41,42,25,25,41,41,25,41,42,25,48,41,42,25,41,42,25,41,41,42,42,25,41,42,25,42,42,41,42,25,25,25,25,0,0,43,43,38,43,38,38,38,43,43,38,43,38,43,38,38,43,38,43,38,43,38,43,38,43,38,0,0,0,44,45,46,45,45,44,46,45,44,46,46,46,0,45,45,45,46,46,45,44,46,45,44,46,45,46,45,45,46,46,0,45,44,46,45,44,46,45,44,46,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[1,2],[[1,3]],[4,[[7,[5,6]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[8,8],[4,4],[[]],[[]],[[],1],[8],0,[9],[1],[[1,2]],[[1,1],2],[[8,8],2],[[10,10],2],[[4,4],2],[[1,11],12],[[8,11],12],[[10,11],12],[[10,11],12],[[4,11],12],[[]],[[]],[[]],[[]],[5,4],[[]],[[1,5],13],[[]],[[]],[[]],[[]],[[]],[[9,5],[[7,[10]]]],0,[[1,5],2],[1],[1,14],[[15,14,2],9],[[],1],0,[16],[1,14],[[1,2]],[[]],[[]],[[],17],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],18],[[],18],[[],18],[[],18],[[],18],0,0,0,0,0,[[],19],[[]],[[]],[[]],[[]],[[]],[[]],[[],19],[19,19],[13,13],[[]],[[]],[13,8],[[],3],[3],[[13,13],2],[[19,11],12],[[3,11],12],[[13,11],12],[[]],[[]],[[]],0,[[],19],[[],19],[[19,3]],[[]],[[]],[[]],[[],19],0,[[],19],[[19,1],13],[19,4],[13,4],[[],3],[[],19],[[],19],[[19,1]],[[],19],[[],19],[[],19],[[],19],[[]],[[]],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],18],[[],18],[[],18],[[20,20,21],22],[[20,20,21],22],[[20,20,21],22],[[20,20,21],22],[[20,20,21],22],[[20,20,21],22],[[20,20,21],22],[[20,20,21],22],[[1,23,23,24,21],22],[21,22],0,[[25,26],25],[[25,2],25],[1,25],[[25,26],25],[[1,2],25],[1,25],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[24,27],28],[15,29],[30,4],0,[15,28],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[31,31],[23,23],[30,30],[21,21],[32,32],[20,20],[[]],[[]],[[]],[[]],[[]],[[]],[31,8],[23,8],[30,8],[21,8],[15,8],[[],24],[32],[15],[24],[[]],[[]],[31],[23],[[31,31],2],[[23,23],2],[[30,30],2],[[21,21],2],[[24,24],2],[[32,32],2],[[20,20],2],[24,[[33,[28]]]],[[31,11],12],[[31,11],12],[[23,11],12],[[23,11],12],[[30,11],12],[[21,11],12],[[21,11],12],[[15,11],12],[[24,11],12],[[32,11],12],[[20,11],12],[[20,11],12],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[34,20],[[]],[35,20],[22,[[33,[15]]]],[[1,23],21],[[24,28,27],28],[[24,28,27],28],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[23,2],[23,2],[[],2],[[],2],[23,2],[23,2],[23,2],[23,2],[23,2],[23,2],[23,2],[23,2],[23,2],[23,2],[23,2],[[],2],[[],2],[23,2],[23,2],[23,2],[23,2],[23,2],[[1,5,21],21],[[1,5],30],[[1,5,14,14],21],[21,15],[[],24],[[],23],0,[[1,5],[[33,[23]]]],[[1,5],[[33,[15]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],36],[[],37],[20,37],[[],17],[[],17],[[],17],[[],17],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],0,[[],25],[[],25],[23,[[33,[25]]]],[[],18],[23,[[33,[38]]]],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[1,21],0,0,0,[[27,25,21],20],[[27,22],29],[[27,14],[[7,[35,10]]]],[27,14],[35,14],[[]],[[]],[[]],[[]],[[]],[[]],[35,35],[28,28],[[]],[[]],[28],[27,[[33,[27]]]],[27],[[27,27],2],[[28,28],2],[27,[[33,[29]]]],[[27,11],12],[[27,11],12],[[35,11],12],[[35,11],12],[[28,11],12],[[28,11],12],[[]],[[]],[[]],[[27,14,22],29],[[27,29,22],29],[[27,29,22],29],[[]],[[]],[[]],[[],27],[27,[[33,[28]]]],[35,28],[27,[[33,[29]]]],[27,[[33,[32]]]],[[35,25]],[27,[[33,[29]]]],[[]],[[]],[35,37],[[],17],[[],17],[[],17],[[],7],[[],7],[20,[[7,[35]]]],[[],7],[[],7],[[],7],[[],7],[[],18],[[],18],[[],18],0,0,0,0,[39,39],[39,39],[[39,[40,[24]]],39],[39,39],[39,39],[22,[[33,[28]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[39,22],[22,22],[34,34],[29,29],[[]],[[]],[[]],[22,8],[29],[22],[22],[39,39],[[22,22],2],[[29,29],2],[[22,11],12],[[22,11],12],[[34,11],12],[[34,11],12],[[29,11],12],[[29,11],12],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[22,30],[[5,21],39],[22,[[33,[29]]]],[34,29],[[22,14],[[33,[32]]]],[22,14],[[22,14],[[7,[34,10]]]],[22,14],[34,14],[[]],[[]],[[]],[34,37],[[],17],[[],17],[[],17],[[],7],[[],7],[[],7],[20,[[7,[34]]]],[[],7],[[],7],[[],7],[[],7],[[],7],[[],18],[[],18],[[],18],[[],18],[22,2],0,0,0,0,0,[1,25],[[]],[[]],[[]],[[]],[[]],[[]],[41,41],[42,42],[25,25],[[]],[[]],[[]],[[],8],[[],8],[[],8],[[]],[[]],[[]],[[25,25],2],[1,25],[1,25],[1,25],[[41,11],12],[[41,11],12],[[42,11],12],[[42,11],12],[[25,11],12],[[25,11],12],[[]],[[]],[41,25],[[]],[42,25],[[],[[33,[14]]]],[[],[[33,[14]]]],[[],[[33,[14]]]],0,[[],38],[[],38],[[],38],[1,25],[[41,14],[[7,[25,10]]]],[41,14],[[1,26],25],[[]],[[]],[[]],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[1,41],[1,42],[1,25],[[1,5],[[33,[25]]]],[[41,14],[[7,[25,10]]]],[41,14],[[1,26],25],[[]],[[]],[[]],[[],36],[41,36],[42,36],[25,36],[[],17],[[],17],[[],17],[25,[[7,[41]]]],[[],7],[[],7],[25,[[7,[42]]]],[[],7],[[],7],[[],7],[[],7],[[42,14],[[7,[25,10]]]],[42,14],[[],18],[[],18],[[],18],[[1,26],25],[25,25],[[21,25],[[33,[25]]]],0,0,[43,38],[[]],[[]],[[]],[[]],[38,38],[[]],[[],43],[43],[[38,38],2],[[43,11],12],[[38,11],12],[[]],[[]],[38],[[]],[[]],[[],43],[[]],[[],7],[[],7],[[],7],[[],7],[[],18],[[],18],0,0,0,[[],44],[[45,44]],[[46,44]],[45,46],[[]],[[]],[[]],[[]],[[]],[[]],[46,46],[[]],0,[45],[45],[[45,2]],[[46,11],12],[[46,11],12],[[]],[[]],[[]],[[]],[[]],[[]],[[45,5],46],[[46,5],46],[1,45],[[45,15],[[7,[10]]]],[[]],[[],17],0,[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],18],[[],18],[[],18],[[],44],[[],44],[[],44],[[],44],[[],44],[[],44],[[],44],[[],44],[[],44],[[],44],[[],44],[[],44],[[],44],[[],44],[[],44],[[],44],[[],44],[[],44],[[],44],[[],44],[[],44],[[],44],[[],44],[[],44],[[],44],[[],44],[[],44],[[],44],[[],44],[[],44],[[],44],[[],44],[[],44],[[],44],[[],44],[[],44],[[],44],[[],44],[[],44],[[],44],[[],44],[[],44],[[],44],[[],44],[[],44],[[],44],[[],44],[[],44],[[],44],[[],44],[[],44],[[],44],[[],44],[[],44],[[],44],[[],44],[[],44],[[],44],[[],44],[[],44],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],44],[[],44],[[],44],[[],44],[[46,5],[[7,[10]]]],[3],[1],[[]]],"p":[[3,"Context"],[15,"bool"],[3,"Registry"],[3,"StringRef"],[15,"str"],[3,"Utf8Error"],[4,"Result"],[3,"ContextRef"],[3,"ExecutionEngine"],[4,"Error"],[3,"Formatter"],[6,"Result"],[3,"Dialect"],[15,"usize"],[3,"Module"],[3,"Demand"],[3,"String"],[3,"TypeId"],[3,"Handle"],[3,"Value"],[3,"Location"],[3,"Operation"],[3,"Attribute"],[3,"Region"],[3,"Type"],[15,"u32"],[3,"Block"],[3,"BlockRef"],[3,"OperationRef"],[3,"Identifier"],[3,"AffineMap"],[3,"RegionRef"],[4,"Option"],[3,"ResultValue"],[3,"Argument"],[3,"MlirType"],[3,"MlirValue"],[3,"Id"],[3,"Builder"],[3,"Vec"],[3,"Function"],[3,"Tuple"],[3,"Allocator"],[3,"Pass"],[3,"Manager"],[3,"OperationManager"],[8,"ValueLike"],[8,"TypeLike"]]},\
"melior_macro":{"doc":"","t":"O","n":["conversion_passes"],"q":["melior_macro"],"d":[""],"i":[0],"f":[0],"p":[]},\
"mlir_sys":{"doc":"","t":"RRRRRRRRRRRRRRRRRRRRDDDDDDGGGRRRRDDDDDDDDDDDDDDDDDDDDGRRRRRRRRRGDDDDDGDRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRMGGGRGMMGGGGGGGGDGGRGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMRLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMGGGGGGGGGLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMDFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLRLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLGGGGGGGGGMG","n":["INT16_MAX","INT16_MIN","INT32_MAX","INT32_MIN","INT8_MAX","INT8_MIN","INTPTR_MAX","INTPTR_MIN","INT_FAST16_MAX","INT_FAST16_MIN","INT_FAST32_MAX","INT_FAST32_MIN","INT_FAST8_MAX","INT_FAST8_MIN","INT_LEAST16_MAX","INT_LEAST16_MIN","INT_LEAST32_MAX","INT_LEAST32_MIN","INT_LEAST8_MAX","INT_LEAST8_MIN","MlirAffineExpr","MlirAffineMap","MlirAttribute","MlirBlock","MlirContext","MlirDiagnostic","MlirDiagnosticHandler","MlirDiagnosticHandlerID","MlirDiagnosticSeverity","MlirDiagnosticSeverity_MlirDiagnosticError","MlirDiagnosticSeverity_MlirDiagnosticNote","MlirDiagnosticSeverity_MlirDiagnosticRemark","MlirDiagnosticSeverity_MlirDiagnosticWarning","MlirDialect","MlirDialectHandle","MlirDialectRegistry","MlirExecutionEngine","MlirExternalPass","MlirExternalPassCallbacks","MlirIdentifier","MlirIntegerSet","MlirLocation","MlirLogicalResult","MlirModule","MlirNamedAttribute","MlirOpOperand","MlirOpPassManager","MlirOpPrintingFlags","MlirOperation","MlirOperationState","MlirPass","MlirPassManager","MlirRegion","MlirSparseTensorDimLevelType","MlirSparseTensorDimLevelType_MLIR_SPARSE_TENSOR_DIM_LEVEL_COMPRESSED","MlirSparseTensorDimLevelType_MLIR_SPARSE_TENSOR_DIM_LEVEL_COMPRESSED_NO","MlirSparseTensorDimLevelType_MLIR_SPARSE_TENSOR_DIM_LEVEL_COMPRESSED_NU","MlirSparseTensorDimLevelType_MLIR_SPARSE_TENSOR_DIM_LEVEL_COMPRESSED_NU_NO","MlirSparseTensorDimLevelType_MLIR_SPARSE_TENSOR_DIM_LEVEL_DENSE","MlirSparseTensorDimLevelType_MLIR_SPARSE_TENSOR_DIM_LEVEL_SINGLETON","MlirSparseTensorDimLevelType_MLIR_SPARSE_TENSOR_DIM_LEVEL_SINGLETON_NO","MlirSparseTensorDimLevelType_MLIR_SPARSE_TENSOR_DIM_LEVEL_SINGLETON_NU","MlirSparseTensorDimLevelType_MLIR_SPARSE_TENSOR_DIM_LEVEL_SINGLETON_NU_NO","MlirStringCallback","MlirStringRef","MlirSymbolTable","MlirType","MlirTypeID","MlirTypeIDAllocator","MlirTypesCallback","MlirValue","PTRDIFF_MAX","PTRDIFF_MIN","SIG_ATOMIC_MAX","SIG_ATOMIC_MIN","SIZE_MAX","UINT16_MAX","UINT32_MAX","UINT8_MAX","UINTPTR_MAX","UINT_FAST16_MAX","UINT_FAST32_MAX","UINT_FAST8_MAX","UINT_LEAST16_MAX","UINT_LEAST32_MAX","UINT_LEAST8_MAX","WINT_MAX","WINT_MIN","_ATFILE_SOURCE","_BITS_STDINT_INTN_H","_BITS_STDINT_UINTN_H","_BITS_TIME64_H","_BITS_TYPESIZES_H","_BITS_TYPES_H","_BITS_WCHAR_H","_DEFAULT_SOURCE","_FEATURES_H","_POSIX_C_SOURCE","_POSIX_SOURCE","_STDC_PREDEF_H","_STDINT_H","_SYS_CDEFS_H","__FD_SETSIZE","__GLIBC_MINOR__","__GLIBC_USE_DEPRECATED_GETS","__GLIBC_USE_DEPRECATED_SCANF","__GLIBC_USE_IEC_60559_BFP_EXT","__GLIBC_USE_IEC_60559_BFP_EXT_C2X","__GLIBC_USE_IEC_60559_EXT","__GLIBC_USE_IEC_60559_FUNCS_EXT","__GLIBC_USE_IEC_60559_FUNCS_EXT_C2X","__GLIBC_USE_IEC_60559_TYPES_EXT","__GLIBC_USE_ISOC2X","__GLIBC_USE_LIB_EXT2","__GLIBC__","__GNU_LIBRARY__","__HAVE_GENERIC_SELECTION","__INO_T_MATCHES_INO64_T","__KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64","__LDOUBLE_REDIRECTS_TO_FLOAT128_ABI","__OFF_T_MATCHES_OFF64_T","__RLIM_T_MATCHES_RLIM64_T","__STATFS_MATCHES_STATFS64","__STDC_IEC_559_COMPLEX__","__STDC_IEC_559__","__STDC_IEC_60559_BFP__","__STDC_IEC_60559_COMPLEX__","__STDC_ISO_10646__","__SYSCALL_WORDSIZE","__TIMESIZE","__USE_ATFILE","__USE_FORTIFY_LEVEL","__USE_ISOC11","__USE_ISOC95","__USE_ISOC99","__USE_MISC","__USE_POSIX","__USE_POSIX199309","__USE_POSIX199506","__USE_POSIX2","__USE_POSIX_IMPLICITLY","__USE_XOPEN2K","__USE_XOPEN2K8","__WORDSIZE","__WORDSIZE_TIME64_COMPAT32","__bindgen_padding_0","__blkcnt64_t","__blkcnt_t","__blksize_t","__bool_true_false_are_defined","__caddr_t","__clang_max_align_nonce1","__clang_max_align_nonce2","__clock_t","__clockid_t","__daddr_t","__dev_t","__fsblkcnt64_t","__fsblkcnt_t","__fsfilcnt64_t","__fsfilcnt_t","__fsid_t","__fsword_t","__gid_t","__glibc_c99_flexarr_available","__id_t","__ino64_t","__ino_t","__int16_t","__int32_t","__int64_t","__int8_t","__int_least16_t","__int_least32_t","__int_least64_t","__int_least8_t","__intmax_t","__intptr_t","__key_t","__loff_t","__mode_t","__nlink_t","__off64_t","__off_t","__pid_t","__quad_t","__rlim64_t","__rlim_t","__sig_atomic_t","__socklen_t","__ssize_t","__suseconds64_t","__suseconds_t","__syscall_slong_t","__syscall_ulong_t","__time_t","__timer_t","__u_char","__u_int","__u_long","__u_quad_t","__u_short","__uid_t","__uint16_t","__uint32_t","__uint64_t","__uint8_t","__uint_least16_t","__uint_least32_t","__uint_least64_t","__uint_least8_t","__uintmax_t","__useconds_t","__val","attribute","attributes","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","construct","data","destruct","enableResultTypeInference","false_","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","initialize","int_fast16_t","int_fast32_t","int_fast64_t","int_fast8_t","int_least16_t","int_least32_t","int_least64_t","int_least8_t","intmax_t","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","length","location","max_align_t","mlirAffineAddExprGet","mlirAffineBinaryOpExprGetLHS","mlirAffineBinaryOpExprGetRHS","mlirAffineCeilDivExprGet","mlirAffineConstantExprGet","mlirAffineConstantExprGetValue","mlirAffineDimExprGet","mlirAffineDimExprGetPosition","mlirAffineExprCompose","mlirAffineExprDump","mlirAffineExprEqual","mlirAffineExprGetContext","mlirAffineExprGetLargestKnownDivisor","mlirAffineExprIsAAdd","mlirAffineExprIsABinary","mlirAffineExprIsACeilDiv","mlirAffineExprIsAConstant","mlirAffineExprIsADim","mlirAffineExprIsAFloorDiv","mlirAffineExprIsAMod","mlirAffineExprIsAMul","mlirAffineExprIsASymbol","mlirAffineExprIsFunctionOfDim","mlirAffineExprIsMultipleOf","mlirAffineExprIsPureAffine","mlirAffineExprIsSymbolicOrConstant","mlirAffineExprPrint","mlirAffineFloorDivExprGet","mlirAffineMapAttrGet","mlirAffineMapAttrGetValue","mlirAffineMapCompressUnusedSymbols","mlirAffineMapConstantGet","mlirAffineMapDump","mlirAffineMapEmptyGet","mlirAffineMapEqual","mlirAffineMapGet","mlirAffineMapGetContext","mlirAffineMapGetMajorSubMap","mlirAffineMapGetMinorSubMap","mlirAffineMapGetNumDims","mlirAffineMapGetNumInputs","mlirAffineMapGetNumResults","mlirAffineMapGetNumSymbols","mlirAffineMapGetResult","mlirAffineMapGetSingleConstantResult","mlirAffineMapGetSubMap","mlirAffineMapIsEmpty","mlirAffineMapIsIdentity","mlirAffineMapIsMinorIdentity","mlirAffineMapIsPermutation","mlirAffineMapIsProjectedPermutation","mlirAffineMapIsSingleConstant","mlirAffineMapMinorIdentityGet","mlirAffineMapMultiDimIdentityGet","mlirAffineMapPermutationGet","mlirAffineMapPrint","mlirAffineMapReplace","mlirAffineMapZeroResultGet","mlirAffineModExprGet","mlirAffineMulExprGet","mlirAffineSymbolExprGet","mlirAffineSymbolExprGetPosition","mlirAnyQuantizedTypeGet","mlirArrayAttrGet","mlirArrayAttrGetElement","mlirArrayAttrGetNumElements","mlirAttributeDump","mlirAttributeEqual","mlirAttributeGetContext","mlirAttributeGetNull","mlirAttributeGetType","mlirAttributeGetTypeID","mlirAttributeIsAAffineMap","mlirAttributeIsAArray","mlirAttributeIsABool","mlirAttributeIsADenseBoolArray","mlirAttributeIsADenseElements","mlirAttributeIsADenseF32Array","mlirAttributeIsADenseF64Array","mlirAttributeIsADenseFPElements","mlirAttributeIsADenseI16Array","mlirAttributeIsADenseI32Array","mlirAttributeIsADenseI64Array","mlirAttributeIsADenseI8Array","mlirAttributeIsADenseIntElements","mlirAttributeIsADictionary","mlirAttributeIsAElements","mlirAttributeIsAFlatSymbolRef","mlirAttributeIsAFloat","mlirAttributeIsAInteger","mlirAttributeIsAIntegerSet","mlirAttributeIsAOpaque","mlirAttributeIsASparseElements","mlirAttributeIsASparseTensorEncodingAttr","mlirAttributeIsAStridedLayout","mlirAttributeIsAString","mlirAttributeIsASymbolRef","mlirAttributeIsAType","mlirAttributeIsAUnit","mlirAttributeParseGet","mlirAttributePrint","mlirBF16TypeGet","mlirBlockAddArgument","mlirBlockAppendOwnedOperation","mlirBlockArgumentGetArgNumber","mlirBlockArgumentGetOwner","mlirBlockArgumentSetType","mlirBlockCreate","mlirBlockDestroy","mlirBlockDetach","mlirBlockEqual","mlirBlockGetArgument","mlirBlockGetFirstOperation","mlirBlockGetNextInRegion","mlirBlockGetNumArguments","mlirBlockGetParentOperation","mlirBlockGetParentRegion","mlirBlockGetTerminator","mlirBlockInsertOwnedOperation","mlirBlockInsertOwnedOperationAfter","mlirBlockInsertOwnedOperationBefore","mlirBlockPrint","mlirBoolAttrGet","mlirBoolAttrGetValue","mlirCalibratedQuantizedTypeGet","mlirCalibratedQuantizedTypeGetMax","mlirCalibratedQuantizedTypeGetMin","mlirComplexTypeGet","mlirComplexTypeGetElementType","mlirContextAppendDialectRegistry","mlirContextAttachDiagnosticHandler","mlirContextCreate","mlirContextDestroy","mlirContextDetachDiagnosticHandler","mlirContextEnableMultithreading","mlirContextEqual","mlirContextGetAllowUnregisteredDialects","mlirContextGetNumLoadedDialects","mlirContextGetNumRegisteredDialects","mlirContextGetOrLoadDialect","mlirContextIsRegisteredOperation","mlirContextLoadAllAvailableDialects","mlirContextSetAllowUnregisteredDialects","mlirCreateAsyncAsyncFuncToAsyncRuntime","mlirCreateAsyncAsyncParallelFor","mlirCreateAsyncAsyncRuntimePolicyBasedRefCounting","mlirCreateAsyncAsyncRuntimeRefCounting","mlirCreateAsyncAsyncRuntimeRefCountingOpt","mlirCreateAsyncAsyncToAsyncRuntime","mlirCreateConversionArithToLLVMConversionPass","mlirCreateConversionConvertAMDGPUToROCDL","mlirCreateConversionConvertAffineForToGPU","mlirCreateConversionConvertAffineToStandard","mlirCreateConversionConvertArithToSPIRV","mlirCreateConversionConvertArmNeon2dToIntr","mlirCreateConversionConvertAsyncToLLVM","mlirCreateConversionConvertBufferizationToMemRef","mlirCreateConversionConvertComplexToLLVM","mlirCreateConversionConvertComplexToLibm","mlirCreateConversionConvertComplexToStandard","mlirCreateConversionConvertControlFlowToLLVM","mlirCreateConversionConvertControlFlowToSPIRV","mlirCreateConversionConvertFuncToLLVM","mlirCreateConversionConvertFuncToSPIRV","mlirCreateConversionConvertGPUToSPIRV","mlirCreateConversionConvertGpuLaunchFuncToVulkanLaunchFunc","mlirCreateConversionConvertGpuOpsToNVVMOps","mlirCreateConversionConvertGpuOpsToROCDLOps","mlirCreateConversionConvertIndexToLLVMPass","mlirCreateConversionConvertLinalgToLLVM","mlirCreateConversionConvertLinalgToStandard","mlirCreateConversionConvertMathToFuncs","mlirCreateConversionConvertMathToLLVM","mlirCreateConversionConvertMathToLibm","mlirCreateConversionConvertMathToSPIRV","mlirCreateConversionConvertMemRefToSPIRV","mlirCreateConversionConvertNVGPUToNVVM","mlirCreateConversionConvertOpenACCToLLVM","mlirCreateConversionConvertOpenACCToSCF","mlirCreateConversionConvertOpenMPToLLVM","mlirCreateConversionConvertPDLToPDLInterp","mlirCreateConversionConvertParallelLoopToGpu","mlirCreateConversionConvertSCFToOpenMP","mlirCreateConversionConvertSPIRVToLLVM","mlirCreateConversionConvertShapeConstraints","mlirCreateConversionConvertShapeToStandard","mlirCreateConversionConvertTensorToLinalg","mlirCreateConversionConvertTensorToSPIRV","mlirCreateConversionConvertVectorToGPU","mlirCreateConversionConvertVectorToLLVM","mlirCreateConversionConvertVectorToSCF","mlirCreateConversionConvertVectorToSPIRV","mlirCreateConversionConvertVulkanLaunchFuncToVulkanCalls","mlirCreateConversionGpuToLLVMConversionPass","mlirCreateConversionLowerHostCodeToLLVM","mlirCreateConversionMapMemRefStorageClass","mlirCreateConversionMemRefToLLVMConversionPass","mlirCreateConversionReconcileUnrealizedCasts","mlirCreateConversionSCFToControlFlow","mlirCreateConversionSCFToSPIRV","mlirCreateConversionTosaToArith","mlirCreateConversionTosaToLinalg","mlirCreateConversionTosaToLinalgNamed","mlirCreateConversionTosaToSCF","mlirCreateConversionTosaToTensor","mlirCreateExternalPass","mlirCreateGPUGPULowerMemorySpaceAttributesPass","mlirCreateGPUGpuAsyncRegionPass","mlirCreateGPUGpuKernelOutlining","mlirCreateGPUGpuLaunchSinkIndexComputations","mlirCreateGPUGpuMapParallelLoopsPass","mlirCreateLinalgConvertElementwiseToLinalg","mlirCreateLinalgLinalgBufferize","mlirCreateLinalgLinalgDetensorize","mlirCreateLinalgLinalgElementwiseOpFusion","mlirCreateLinalgLinalgFoldUnitExtentDims","mlirCreateLinalgLinalgGeneralization","mlirCreateLinalgLinalgInlineScalarOperands","mlirCreateLinalgLinalgLowerToAffineLoops","mlirCreateLinalgLinalgLowerToLoops","mlirCreateLinalgLinalgLowerToParallelLoops","mlirCreateLinalgLinalgNamedOpConversion","mlirCreateSparseTensorPostSparsificationRewrite","mlirCreateSparseTensorPreSparsificationRewrite","mlirCreateSparseTensorSparseBufferRewrite","mlirCreateSparseTensorSparseTensorCodegen","mlirCreateSparseTensorSparseTensorConversionPass","mlirCreateSparseTensorSparseVectorization","mlirCreateSparseTensorSparsificationPass","mlirCreateSparseTensorStorageSpecifierToLLVM","mlirCreateTransformsCSE","mlirCreateTransformsCanonicalizer","mlirCreateTransformsControlFlowSink","mlirCreateTransformsGenerateRuntimeVerification","mlirCreateTransformsInliner","mlirCreateTransformsLocationSnapshot","mlirCreateTransformsLoopInvariantCodeMotion","mlirCreateTransformsPrintOpStats","mlirCreateTransformsSCCP","mlirCreateTransformsStripDebugInfo","mlirCreateTransformsSymbolDCE","mlirCreateTransformsSymbolPrivatize","mlirCreateTransformsTopologicalSort","mlirCreateTransformsViewOpGraph","mlirDenseArrayGetNumElements","mlirDenseBoolArrayGet","mlirDenseBoolArrayGetElement","mlirDenseBoolResourceElementsAttrGetValue","mlirDenseDoubleResourceElementsAttrGetValue","mlirDenseElementsAttrBFloat16Get","mlirDenseElementsAttrBoolGet","mlirDenseElementsAttrBoolSplatGet","mlirDenseElementsAttrDoubleGet","mlirDenseElementsAttrDoubleSplatGet","mlirDenseElementsAttrFloat16Get","mlirDenseElementsAttrFloatGet","mlirDenseElementsAttrFloatSplatGet","mlirDenseElementsAttrGet","mlirDenseElementsAttrGetBoolSplatValue","mlirDenseElementsAttrGetBoolValue","mlirDenseElementsAttrGetDoubleSplatValue","mlirDenseElementsAttrGetDoubleValue","mlirDenseElementsAttrGetFloatSplatValue","mlirDenseElementsAttrGetFloatValue","mlirDenseElementsAttrGetInt16Value","mlirDenseElementsAttrGetInt32SplatValue","mlirDenseElementsAttrGetInt32Value","mlirDenseElementsAttrGetInt64SplatValue","mlirDenseElementsAttrGetInt64Value","mlirDenseElementsAttrGetInt8SplatValue","mlirDenseElementsAttrGetInt8Value","mlirDenseElementsAttrGetRawData","mlirDenseElementsAttrGetSplatValue","mlirDenseElementsAttrGetStringSplatValue","mlirDenseElementsAttrGetStringValue","mlirDenseElementsAttrGetUInt16Value","mlirDenseElementsAttrGetUInt32SplatValue","mlirDenseElementsAttrGetUInt32Value","mlirDenseElementsAttrGetUInt64SplatValue","mlirDenseElementsAttrGetUInt64Value","mlirDenseElementsAttrGetUInt8SplatValue","mlirDenseElementsAttrGetUInt8Value","mlirDenseElementsAttrInt16Get","mlirDenseElementsAttrInt32Get","mlirDenseElementsAttrInt32SplatGet","mlirDenseElementsAttrInt64Get","mlirDenseElementsAttrInt64SplatGet","mlirDenseElementsAttrInt8Get","mlirDenseElementsAttrInt8SplatGet","mlirDenseElementsAttrIsSplat","mlirDenseElementsAttrRawBufferGet","mlirDenseElementsAttrReshapeGet","mlirDenseElementsAttrSplatGet","mlirDenseElementsAttrStringGet","mlirDenseElementsAttrUInt16Get","mlirDenseElementsAttrUInt32Get","mlirDenseElementsAttrUInt32SplatGet","mlirDenseElementsAttrUInt64Get","mlirDenseElementsAttrUInt64SplatGet","mlirDenseElementsAttrUInt8Get","mlirDenseElementsAttrUInt8SplatGet","mlirDenseF32ArrayGet","mlirDenseF32ArrayGetElement","mlirDenseF64ArrayGet","mlirDenseF64ArrayGetElement","mlirDenseFloatResourceElementsAttrGetValue","mlirDenseI16ArrayGet","mlirDenseI16ArrayGetElement","mlirDenseI32ArrayGet","mlirDenseI32ArrayGetElement","mlirDenseI64ArrayGet","mlirDenseI64ArrayGetElement","mlirDenseI8ArrayGet","mlirDenseI8ArrayGetElement","mlirDenseInt16ResourceElementsAttrGetValue","mlirDenseInt32ResourceElementsAttrGetValue","mlirDenseInt64ResourceElementsAttrGetValue","mlirDenseInt8ResourceElementsAttrGetValue","mlirDenseUInt16ResourceElementsAttrGetValue","mlirDenseUInt32ResourceElementsAttrGetValue","mlirDenseUInt64ResourceElementsAttrGetValue","mlirDenseUInt8ResourceElementsAttrGetValue","mlirDiagnosticGetLocation","mlirDiagnosticGetNote","mlirDiagnosticGetNumNotes","mlirDiagnosticGetSeverity","mlirDiagnosticPrint","mlirDialectEqual","mlirDialectGetContext","mlirDialectGetNamespace","mlirDialectHandleGetNamespace","mlirDialectHandleInsertDialect","mlirDialectHandleLoadDialect","mlirDialectHandleRegisterDialect","mlirDialectRegistryCreate","mlirDialectRegistryDestroy","mlirDictionaryAttrGet","mlirDictionaryAttrGetElement","mlirDictionaryAttrGetElementByName","mlirDictionaryAttrGetNumElements","mlirElementsAttrGetNumElements","mlirElementsAttrGetValue","mlirElementsAttrIsValidIndex","mlirEmitError","mlirEnableGlobalDebug","mlirExecutionEngineCreate","mlirExecutionEngineDestroy","mlirExecutionEngineDumpToObjectFile","mlirExecutionEngineInvokePacked","mlirExecutionEngineLookup","mlirExecutionEngineLookupPacked","mlirExecutionEngineRegisterSymbol","mlirExternalPassSignalFailure","mlirF16TypeGet","mlirF32TypeGet","mlirF64TypeGet","mlirFlatSymbolRefAttrGet","mlirFlatSymbolRefAttrGetValue","mlirFloat8E4M3FNTypeGet","mlirFloat8E5M2TypeGet","mlirFloatAttrDoubleGet","mlirFloatAttrDoubleGetChecked","mlirFloatAttrGetValueDouble","mlirFunctionTypeGet","mlirFunctionTypeGetInput","mlirFunctionTypeGetNumInputs","mlirFunctionTypeGetNumResults","mlirFunctionTypeGetResult","mlirGetDialectHandle__async__","mlirGetDialectHandle__cf__","mlirGetDialectHandle__func__","mlirGetDialectHandle__gpu__","mlirGetDialectHandle__linalg__","mlirGetDialectHandle__llvm__","mlirGetDialectHandle__ml_program__","mlirGetDialectHandle__pdl__","mlirGetDialectHandle__quant__","mlirGetDialectHandle__scf__","mlirGetDialectHandle__shape__","mlirGetDialectHandle__sparse_tensor__","mlirGetDialectHandle__tensor__","mlirGetDialectHandle__transform__","mlirIdentifierEqual","mlirIdentifierGet","mlirIdentifierGetContext","mlirIdentifierStr","mlirIndexTypeGet","mlirInferTypeOpInterfaceInferReturnTypes","mlirInferTypeOpInterfaceTypeID","mlirIntegerAttrGet","mlirIntegerAttrGetValueInt","mlirIntegerAttrGetValueSInt","mlirIntegerAttrGetValueUInt","mlirIntegerSetDump","mlirIntegerSetEmptyGet","mlirIntegerSetEqual","mlirIntegerSetGet","mlirIntegerSetGetConstraint","mlirIntegerSetGetContext","mlirIntegerSetGetNumConstraints","mlirIntegerSetGetNumDims","mlirIntegerSetGetNumEqualities","mlirIntegerSetGetNumInequalities","mlirIntegerSetGetNumInputs","mlirIntegerSetGetNumSymbols","mlirIntegerSetIsCanonicalEmpty","mlirIntegerSetIsConstraintEq","mlirIntegerSetPrint","mlirIntegerSetReplaceGet","mlirIntegerTypeGet","mlirIntegerTypeGetWidth","mlirIntegerTypeIsSigned","mlirIntegerTypeIsSignless","mlirIntegerTypeIsUnsigned","mlirIntegerTypeSignedGet","mlirIntegerTypeUnsignedGet","mlirIsGlobalDebugEnabled","mlirLLVMArrayTypeGet","mlirLLVMFunctionTypeGet","mlirLLVMPointerTypeGet","mlirLLVMStructTypeLiteralGet","mlirLLVMVoidTypeGet","mlirLinalgFillBuiltinNamedOpRegion","mlirLocationCallSiteGet","mlirLocationEqual","mlirLocationFileLineColGet","mlirLocationFusedGet","mlirLocationGetContext","mlirLocationNameGet","mlirLocationPrint","mlirLocationUnknownGet","mlirMemRefTypeContiguousGet","mlirMemRefTypeContiguousGetChecked","mlirMemRefTypeGet","mlirMemRefTypeGetAffineMap","mlirMemRefTypeGetChecked","mlirMemRefTypeGetLayout","mlirMemRefTypeGetMemorySpace","mlirModuleCreateEmpty","mlirModuleCreateParse","mlirModuleDestroy","mlirModuleFromOperation","mlirModuleGetBody","mlirModuleGetContext","mlirModuleGetOperation","mlirNamedAttributeGet","mlirNoneTypeGet","mlirOpOperandGetNextUse","mlirOpOperandGetOperandNumber","mlirOpOperandGetOwner","mlirOpOperandIsNull","mlirOpPassManagerAddOwnedPass","mlirOpPassManagerAddPipeline","mlirOpPassManagerGetNestedUnder","mlirOpPrintingFlagsCreate","mlirOpPrintingFlagsDestroy","mlirOpPrintingFlagsElideLargeElementsAttrs","mlirOpPrintingFlagsEnableDebugInfo","mlirOpPrintingFlagsPrintGenericOpForm","mlirOpPrintingFlagsUseLocalScope","mlirOpResultGetOwner","mlirOpResultGetResultNumber","mlirOpaqueAttrGet","mlirOpaqueAttrGetData","mlirOpaqueAttrGetDialectNamespace","mlirOpaqueTypeGet","mlirOpaqueTypeGetData","mlirOpaqueTypeGetDialectNamespace","mlirOperationClone","mlirOperationCreate","mlirOperationDestroy","mlirOperationDump","mlirOperationEqual","mlirOperationGetAttribute","mlirOperationGetAttributeByName","mlirOperationGetBlock","mlirOperationGetContext","mlirOperationGetFirstRegion","mlirOperationGetLocation","mlirOperationGetName","mlirOperationGetNextInBlock","mlirOperationGetNumAttributes","mlirOperationGetNumOperands","mlirOperationGetNumRegions","mlirOperationGetNumResults","mlirOperationGetNumSuccessors","mlirOperationGetOperand","mlirOperationGetParentOperation","mlirOperationGetRegion","mlirOperationGetResult","mlirOperationGetSuccessor","mlirOperationGetTypeID","mlirOperationImplementsInterface","mlirOperationImplementsInterfaceStatic","mlirOperationMoveAfter","mlirOperationMoveBefore","mlirOperationPrint","mlirOperationPrintWithFlags","mlirOperationRemoveAttributeByName","mlirOperationRemoveFromParent","mlirOperationSetAttributeByName","mlirOperationSetOperand","mlirOperationStateAddAttributes","mlirOperationStateAddOperands","mlirOperationStateAddOwnedRegions","mlirOperationStateAddResults","mlirOperationStateAddSuccessors","mlirOperationStateEnableResultTypeInference","mlirOperationStateGet","mlirOperationVerify","mlirOperationWriteBytecode","mlirPDLAttributeTypeGet","mlirPDLOperationTypeGet","mlirPDLRangeTypeGet","mlirPDLRangeTypeGetElementType","mlirPDLTypeTypeGet","mlirPDLValueTypeGet","mlirParsePassPipeline","mlirPassManagerAddOwnedPass","mlirPassManagerCreate","mlirPassManagerCreateOnOperation","mlirPassManagerDestroy","mlirPassManagerEnableIRPrinting","mlirPassManagerEnableVerifier","mlirPassManagerGetAsOpPassManager","mlirPassManagerGetNestedUnder","mlirPassManagerRun","mlirPrintPassPipeline","mlirQuantizedTypeCastExpressedToStorageType","mlirQuantizedTypeCastFromExpressedType","mlirQuantizedTypeCastFromStorageType","mlirQuantizedTypeCastToExpressedType","mlirQuantizedTypeCastToStorageType","mlirQuantizedTypeGetDefaultMaximumForInteger","mlirQuantizedTypeGetDefaultMinimumForInteger","mlirQuantizedTypeGetExpressedType","mlirQuantizedTypeGetFlags","mlirQuantizedTypeGetQuantizedElementType","mlirQuantizedTypeGetSignedFlag","mlirQuantizedTypeGetStorageType","mlirQuantizedTypeGetStorageTypeIntegralWidth","mlirQuantizedTypeGetStorageTypeMax","mlirQuantizedTypeGetStorageTypeMin","mlirQuantizedTypeIsCompatibleExpressedType","mlirQuantizedTypeIsSigned","mlirRankedTensorTypeGet","mlirRankedTensorTypeGetChecked","mlirRankedTensorTypeGetEncoding","mlirRegionAppendOwnedBlock","mlirRegionCreate","mlirRegionDestroy","mlirRegionEqual","mlirRegionGetFirstBlock","mlirRegionGetNextInOperation","mlirRegionInsertOwnedBlock","mlirRegionInsertOwnedBlockAfter","mlirRegionInsertOwnedBlockBefore","mlirRegisterAllDialects","mlirRegisterAllLLVMTranslations","mlirRegisterAllPasses","mlirRegisterAsyncAsyncFuncToAsyncRuntime","mlirRegisterAsyncAsyncParallelFor","mlirRegisterAsyncAsyncRuntimePolicyBasedRefCounting","mlirRegisterAsyncAsyncRuntimeRefCounting","mlirRegisterAsyncAsyncRuntimeRefCountingOpt","mlirRegisterAsyncAsyncToAsyncRuntime","mlirRegisterAsyncPasses","mlirRegisterConversionArithToLLVMConversionPass","mlirRegisterConversionConvertAMDGPUToROCDL","mlirRegisterConversionConvertAffineForToGPU","mlirRegisterConversionConvertAffineToStandard","mlirRegisterConversionConvertArithToSPIRV","mlirRegisterConversionConvertArmNeon2dToIntr","mlirRegisterConversionConvertAsyncToLLVM","mlirRegisterConversionConvertBufferizationToMemRef","mlirRegisterConversionConvertComplexToLLVM","mlirRegisterConversionConvertComplexToLibm","mlirRegisterConversionConvertComplexToStandard","mlirRegisterConversionConvertControlFlowToLLVM","mlirRegisterConversionConvertControlFlowToSPIRV","mlirRegisterConversionConvertFuncToLLVM","mlirRegisterConversionConvertFuncToSPIRV","mlirRegisterConversionConvertGPUToSPIRV","mlirRegisterConversionConvertGpuLaunchFuncToVulkanLaunchFunc","mlirRegisterConversionConvertGpuOpsToNVVMOps","mlirRegisterConversionConvertGpuOpsToROCDLOps","mlirRegisterConversionConvertIndexToLLVMPass","mlirRegisterConversionConvertLinalgToLLVM","mlirRegisterConversionConvertLinalgToStandard","mlirRegisterConversionConvertMathToFuncs","mlirRegisterConversionConvertMathToLLVM","mlirRegisterConversionConvertMathToLibm","mlirRegisterConversionConvertMathToSPIRV","mlirRegisterConversionConvertMemRefToSPIRV","mlirRegisterConversionConvertNVGPUToNVVM","mlirRegisterConversionConvertOpenACCToLLVM","mlirRegisterConversionConvertOpenACCToSCF","mlirRegisterConversionConvertOpenMPToLLVM","mlirRegisterConversionConvertPDLToPDLInterp","mlirRegisterConversionConvertParallelLoopToGpu","mlirRegisterConversionConvertSCFToOpenMP","mlirRegisterConversionConvertSPIRVToLLVM","mlirRegisterConversionConvertShapeConstraints","mlirRegisterConversionConvertShapeToStandard","mlirRegisterConversionConvertTensorToLinalg","mlirRegisterConversionConvertTensorToSPIRV","mlirRegisterConversionConvertVectorToGPU","mlirRegisterConversionConvertVectorToLLVM","mlirRegisterConversionConvertVectorToSCF","mlirRegisterConversionConvertVectorToSPIRV","mlirRegisterConversionConvertVulkanLaunchFuncToVulkanCalls","mlirRegisterConversionGpuToLLVMConversionPass","mlirRegisterConversionLowerHostCodeToLLVM","mlirRegisterConversionMapMemRefStorageClass","mlirRegisterConversionMemRefToLLVMConversionPass","mlirRegisterConversionPasses","mlirRegisterConversionReconcileUnrealizedCasts","mlirRegisterConversionSCFToControlFlow","mlirRegisterConversionSCFToSPIRV","mlirRegisterConversionTosaToArith","mlirRegisterConversionTosaToLinalg","mlirRegisterConversionTosaToLinalgNamed","mlirRegisterConversionTosaToSCF","mlirRegisterConversionTosaToTensor","mlirRegisterGPUGPULowerMemorySpaceAttributesPass","mlirRegisterGPUGpuAsyncRegionPass","mlirRegisterGPUGpuKernelOutlining","mlirRegisterGPUGpuLaunchSinkIndexComputations","mlirRegisterGPUGpuMapParallelLoopsPass","mlirRegisterGPUPasses","mlirRegisterLinalgConvertElementwiseToLinalg","mlirRegisterLinalgLinalgBufferize","mlirRegisterLinalgLinalgDetensorize","mlirRegisterLinalgLinalgElementwiseOpFusion","mlirRegisterLinalgLinalgFoldUnitExtentDims","mlirRegisterLinalgLinalgGeneralization","mlirRegisterLinalgLinalgInlineScalarOperands","mlirRegisterLinalgLinalgLowerToAffineLoops","mlirRegisterLinalgLinalgLowerToLoops","mlirRegisterLinalgLinalgLowerToParallelLoops","mlirRegisterLinalgLinalgNamedOpConversion","mlirRegisterLinalgPasses","mlirRegisterSparseTensorPasses","mlirRegisterSparseTensorPostSparsificationRewrite","mlirRegisterSparseTensorPreSparsificationRewrite","mlirRegisterSparseTensorSparseBufferRewrite","mlirRegisterSparseTensorSparseTensorCodegen","mlirRegisterSparseTensorSparseTensorConversionPass","mlirRegisterSparseTensorSparseVectorization","mlirRegisterSparseTensorSparsificationPass","mlirRegisterSparseTensorStorageSpecifierToLLVM","mlirRegisterTransformsCSE","mlirRegisterTransformsCanonicalizer","mlirRegisterTransformsControlFlowSink","mlirRegisterTransformsGenerateRuntimeVerification","mlirRegisterTransformsInliner","mlirRegisterTransformsLocationSnapshot","mlirRegisterTransformsLoopInvariantCodeMotion","mlirRegisterTransformsPasses","mlirRegisterTransformsPrintOpStats","mlirRegisterTransformsSCCP","mlirRegisterTransformsStripDebugInfo","mlirRegisterTransformsSymbolDCE","mlirRegisterTransformsSymbolPrivatize","mlirRegisterTransformsTopologicalSort","mlirRegisterTransformsViewOpGraph","mlirShapedTypeGetDimSize","mlirShapedTypeGetDynamicSize","mlirShapedTypeGetDynamicStrideOrOffset","mlirShapedTypeGetElementType","mlirShapedTypeGetRank","mlirShapedTypeHasRank","mlirShapedTypeHasStaticShape","mlirShapedTypeIsDynamicDim","mlirShapedTypeIsDynamicSize","mlirShapedTypeIsDynamicStrideOrOffset","mlirSparseElementsAttrGetIndices","mlirSparseElementsAttrGetValues","mlirSparseElementsAttribute","mlirSparseTensorEncodingAttrGet","mlirSparseTensorEncodingAttrGetDimLevelType","mlirSparseTensorEncodingAttrGetDimOrdering","mlirSparseTensorEncodingAttrGetHigherOrdering","mlirSparseTensorEncodingAttrGetIndexBitWidth","mlirSparseTensorEncodingAttrGetPointerBitWidth","mlirSparseTensorEncodingGetNumDimLevelTypes","mlirStridedLayoutAttrGet","mlirStridedLayoutAttrGetNumStrides","mlirStridedLayoutAttrGetOffset","mlirStridedLayoutAttrGetStride","mlirStringAttrGet","mlirStringAttrGetValue","mlirStringAttrTypedGet","mlirStringRefCreateFromCString","mlirStringRefEqual","mlirSymbolRefAttrGet","mlirSymbolRefAttrGetLeafReference","mlirSymbolRefAttrGetNestedReference","mlirSymbolRefAttrGetNumNestedReferences","mlirSymbolRefAttrGetRootReference","mlirSymbolTableCreate","mlirSymbolTableDestroy","mlirSymbolTableErase","mlirSymbolTableGetSymbolAttributeName","mlirSymbolTableGetVisibilityAttributeName","mlirSymbolTableInsert","mlirSymbolTableLookup","mlirSymbolTableReplaceAllSymbolUses","mlirSymbolTableWalkSymbolTables","mlirTransformAnyOpTypeGet","mlirTransformOperationTypeGet","mlirTransformOperationTypeGetOperationName","mlirTupleTypeGet","mlirTupleTypeGetNumTypes","mlirTupleTypeGetType","mlirTypeAttrGet","mlirTypeAttrGetValue","mlirTypeDump","mlirTypeEqual","mlirTypeGetContext","mlirTypeGetTypeID","mlirTypeIDAllocatorAllocateTypeID","mlirTypeIDAllocatorCreate","mlirTypeIDAllocatorDestroy","mlirTypeIDCreate","mlirTypeIDEqual","mlirTypeIDHashValue","mlirTypeIsAAnyQuantizedType","mlirTypeIsABF16","mlirTypeIsACalibratedQuantizedType","mlirTypeIsAComplex","mlirTypeIsAF16","mlirTypeIsAF32","mlirTypeIsAF64","mlirTypeIsAFloat8E4M3FN","mlirTypeIsAFloat8E5M2","mlirTypeIsAFunction","mlirTypeIsAIndex","mlirTypeIsAInteger","mlirTypeIsAMemRef","mlirTypeIsANone","mlirTypeIsAOpaque","mlirTypeIsAPDLAttributeType","mlirTypeIsAPDLOperationType","mlirTypeIsAPDLRangeType","mlirTypeIsAPDLType","mlirTypeIsAPDLTypeType","mlirTypeIsAPDLValueType","mlirTypeIsAQuantizedType","mlirTypeIsARankedTensor","mlirTypeIsAShaped","mlirTypeIsATensor","mlirTypeIsATransformAnyOpType","mlirTypeIsATransformOperationType","mlirTypeIsATuple","mlirTypeIsAUniformQuantizedPerAxisType","mlirTypeIsAUniformQuantizedType","mlirTypeIsAUnrankedMemRef","mlirTypeIsAUnrankedTensor","mlirTypeIsAVector","mlirTypeParseGet","mlirTypePrint","mlirUniformQuantizedPerAxisTypeGet","mlirUniformQuantizedPerAxisTypeGetNumDims","mlirUniformQuantizedPerAxisTypeGetQuantizedDimension","mlirUniformQuantizedPerAxisTypeGetScale","mlirUniformQuantizedPerAxisTypeGetZeroPoint","mlirUniformQuantizedPerAxisTypeIsFixedPoint","mlirUniformQuantizedTypeGet","mlirUniformQuantizedTypeGetScale","mlirUniformQuantizedTypeGetZeroPoint","mlirUniformQuantizedTypeIsFixedPoint","mlirUnitAttrGet","mlirUnmanagedDenseBoolResourceElementsAttrGet","mlirUnmanagedDenseDoubleResourceElementsAttrGet","mlirUnmanagedDenseFloatResourceElementsAttrGet","mlirUnmanagedDenseInt16ResourceElementsAttrGet","mlirUnmanagedDenseInt32ResourceElementsAttrGet","mlirUnmanagedDenseInt64ResourceElementsAttrGet","mlirUnmanagedDenseInt8ResourceElementsAttrGet","mlirUnmanagedDenseUInt16ResourceElementsAttrGet","mlirUnmanagedDenseUInt32ResourceElementsAttrGet","mlirUnmanagedDenseUInt64ResourceElementsAttrGet","mlirUnmanagedDenseUInt8ResourceElementsAttrGet","mlirUnrankedMemRefTypeGet","mlirUnrankedMemRefTypeGetChecked","mlirUnrankedMemrefGetMemorySpace","mlirUnrankedTensorTypeGet","mlirUnrankedTensorTypeGetChecked","mlirValueDump","mlirValueEqual","mlirValueGetFirstUse","mlirValueGetType","mlirValueIsABlockArgument","mlirValueIsAOpResult","mlirValuePrint","mlirVectorTypeGet","mlirVectorTypeGetChecked","nAttributes","nOperands","nRegions","nResults","nSuccessors","name","name","operands","ptr","ptr","ptr","ptr","ptr","ptr","ptr","ptr","ptr","ptr","ptr","ptr","ptr","ptr","ptr","ptr","ptr","ptr","ptr","ptr","ptr","ptr","ptr","ptr","ptr","ptr","ptr","regions","results","run","successors","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","true_","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","uint_fast16_t","uint_fast32_t","uint_fast64_t","uint_fast8_t","uint_least16_t","uint_least32_t","uint_least64_t","uint_least8_t","uintmax_t","value","wchar_t"],"q":["mlir_sys","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","","","","","","","","","","","","","","","","","","","","","","","","","An opaque reference to a diagnostic, always owned by the …","Diagnostic handler type. Accepts a reference to a …","Opaque identifier of a diagnostic handler, useful to …","Severity of a diagnostic.","","","","","","","","","","Structure of external <code>MlirPass</code> callbacks. All callbacks …","","","","A logical result value, essentially a boolean with named …","","Named MLIR attribute.","","","","","An auxiliary class for constructing operations.","","","","Dimension level types (and properties) that define sparse …","","","","","","","","","","A callback for returning string references.","A pointer to a sized fragment of a string, not necessarily …","","","","","These callbacks are used to return multiple types from …his callback is called when the pass is cloned. See …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","This callback is called from the pass is created. This is …","&lt; Pointer to the first symbol.","This callback is called when the pass is destroyed This is …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","This callback is optional. The callback is called before …","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","&lt; Length of the fragment.","","","Creates an affine add expression with ‘lhs’ and ‘rhs…","Returns the left hand side affine expression of the given …","Returns the right hand side affine expression of the given …","Creates an affine ceildiv expression with ‘lhs’ and ‘…","Creates an affine constant expression with ‘constant’ …","Returns the value of the given affine constant expression.","Creates an affine dimension expression with ‘position’ …","Returns the position of the given affine dimension …","Composes the given map with the given expression.","Prints the affine expression to the standard error stream.","Returns <code>true</code> if the two affine expressions are equal.","Gets the context that owns the affine expression.","Returns the greatest known integral divisor of this affine …","Checks whether the given affine expression is an add …","Checks whether the given affine expression is binary.","Checks whether the given affine expression is an ceildiv …","Checks whether the given affine expression is a constant …","Checks whether the given affine expression is a dimension …","Checks whether the given affine expression is an floordiv …","Checks whether the given affine expression is an mod …","Checks whether the given affine expression is an mul …","Checks whether the given affine expression is a symbol …","Checks whether the given affine expression involves …","Checks whether the given affine expression is a multiple …","Checks whether the given affine expression is a pure …","Checks whether the given affine expression is made out of …","Prints an affine expression by sending chunks of the …","Creates an affine floordiv expression with ‘lhs’ and …","Creates an affine map attribute wrapping the given map. …","Returns the affine map wrapped in the given affine map …","Returns the simplified affine map resulting from dropping …","Creates a single constant result affine map in the …","Prints the affine map to the standard error stream.","Creates a zero result affine map with no dimensions or …","Checks if two affine maps are equal.","Creates an affine map with results defined by the given …","Gets the context that the given affine map was created with","Returns the affine map consisting of the most major …","Returns the affine map consisting of the most minor …","Returns the number of dimensions of the given affine map.","Returns the number of inputs (dimensions + symbols) of the …","Returns the number of results of the given affine map.","Returns the number of symbols of the given affine map.","Returns the result at the given position.","Returns the constant result of the given affine map. The …","Returns the affine map consisting of the <code>resultPos</code> subset.","Checks whether the given affine map is an empty affine map.","Checks whether the given affine map is an identity affine …","Checks whether the given affine map is a minor identity …","Checks whether the given affine map represents a …","Checks whether the given affine map represents a subset of …","Checks whether the given affine map is a single result …","Creates an identity affine map on the most minor …","Creates an affine map with ‘numDims’ identity in the …","Creates an affine map with a permutation expression and …","Prints an affine map by sending chunks of the string …","Apply AffineExpr::replace(<code>map</code>) to each of the results and …","Creates a zero result affine map of the given dimensions …","Creates an affine mod expression with ‘lhs’ and ‘rhs…","Creates an affine mul expression with ‘lhs’ and ‘rhs…","Creates an affine symbol expression with ‘position’ in …","Returns the position of the given affine symbol expression.","Creates an instance of AnyQuantizedType with the given …","Creates an array element containing the given list of …","Returns pos-th element stored in the given array attribute.","Returns the number of elements stored in the given array …","Prints the attribute to the standard error stream.","Checks if two attributes are equal.","Gets the context that an attribute was created with.","Returns an empty attribute.","Gets the type of this attribute.","Gets the type id of the attribute.","Checks whether the given attribute is an affine map …","Checks whether the given attribute is an array attribute.","Checks whether the given attribute is a bool attribute.","Checks whether the given attribute is a dense array …","Checks whether the given attribute is a dense elements …","","","","","","","","","Checks whether the given attribute is a dictionary …","Checks whether the given attribute is an elements …","Checks whether the given attribute is a flat symbol …","Checks whether the given attribute is a floating point …","Checks whether the given attribute is an integer attribute.","Checks whether the given attribute is an integer set …","Checks whether the given attribute is an opaque attribute.","Checks whether the given attribute is a sparse elements …","Checks whether the given attribute is a …","","Checks whether the given attribute is a string attribute.","Checks whether the given attribute is a symbol reference …","Checks whether the given attribute is a type attribute.","Checks whether the given attribute is a unit attribute.","Parses an attribute. The attribute is owned by the context.","Prints an attribute by sending chunks of the string …","Creates a bf16 type in the given context. The type is …","Appends an argument of the specified type to the block. …","Takes an operation owned by the caller and appends it to …","Returns the position of the value in the argument list of …","Returns the block in which this value is defined as an …","Sets the type of the block argument to the given type.","Creates a new empty block with the given argument types …","Takes a block owned by the caller and destroys it.","Detach a block from the owning region and assume ownership.","Checks whether two blocks handles point to the same block. …","Returns <code>pos</code>-th argument of the block.","Returns the first operation in the block.","Returns the block immediately following the given block in …","Returns the number of arguments of the block.","Returns the closest surrounding operation that contains …","Returns the region that contains this block.","Returns the terminator operation in the block or null if …","Takes an operation owned by the caller and inserts it as …","Takes an operation owned by the caller and inserts it …","Takes an operation owned by the caller and inserts it …","Prints a block by sending chunks of the string …","Creates a bool attribute in the given context with the …","Returns the value stored in the given bool attribute.","Creates an instance of CalibratedQuantizedType with the …","Returns the max value of the given calibrated quantized …","Returns the min value of the given calibrated quantized …","Creates a complex type with the given element type in the …","Returns the element type of the given complex type.","Append the contents of the given dialect registry to the …","Attaches the diagnostic handler to the context. Handlers …","Creates an MLIR context and transfers its ownership to the …","Takes an MLIR context owned by the caller and destroys it.","Detaches an attached diagnostic handler from the context …","Set threading mode (must be set to false to …","Checks if two contexts are equal.","Returns whether the context allows unregistered dialects.","Returns the number of dialects loaded by the context.","Returns the number of dialects registered with the given …","Gets the dialect instance owned by the given context using …","Returns whether the given fully-qualified operation (i.e. …","Eagerly loads all available dialects registered with a …","Sets whether unregistered dialects are allowed in this …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Creates an external <code>MlirPass</code> that calls the supplied …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Get the size of a dense array.","Create a dense array attribute with the given elements.","Get an element of a dense array.","Returns the pos-th value (flat contiguous indexing) of a …","","","Creates a dense elements attribute with the given shaped …","","","","","","","Creates a dense elements attribute with the given Shaped …","","Returns the pos-th value (flat contiguous indexing) of a …","","","","","","","","","","","","Returns the raw data of the given dense elements attribute.","Returns the single replicated value (splat) of a specific …","","","","","","","","","","","","","","","","","Checks whether the given dense elements attribute contains …","Creates a dense elements attribute with the given Shaped …","Creates a dense elements attribute that has the same data …","Creates a dense elements attribute with the given Shaped …","Creates a dense elements attribute with the given shaped …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the location at which the diagnostic is reported.","Returns <code>pos</code>-th note attached to the diagnostic. Expects <code>pos</code>…","Returns the number of notes attached to the diagnostic.","Returns the severity of the diagnostic.","Prints a diagnostic using the provided callback.","Checks if two dialects that belong to the same context are …","Returns the context that owns the dialect.","Returns the namespace of the given dialect.","Returns the namespace associated with the provided dialect …","Inserts the dialect associated with the provided dialect …","Loads the dialect associated with the provided dialect …","Registers the dialect associated with the provided dialect …","Creates a dialect registry and transfers its ownership to …","Takes a dialect registry owned by the caller and destroys …","Creates a dictionary attribute containing the given list …","Returns pos-th element of the given dictionary attribute.","Returns the dictionary attribute element with the given …","Returns the number of attributes contained in a dictionary …","Gets the total number of elements in the given elements …","Returns the element at the given rank-dimensional index.","Checks whether the given rank-dimensional index is valid …","Emits an error at the given location through the …","Sets the global debugging flag.","Creates an ExecutionEngine for the provided ModuleOp. The …","Destroy an ExecutionEngine instance.","Dump as an object in <code>fileName</code>.","Invoke a native function in the execution engine by name …","Lookup a native function in the execution engine by name, …","Lookup the wrapper of the native function in the execution …","Register a symbol with the jit: this symbol will be …","This signals that the pass has failed. This is only valid …","Creates an f16 type in the given context. The type is …","Creates an f32 type in the given context. The type is …","Creates a f64 type in the given context. The type is owned …","Creates a flat symbol reference attribute in the given …","Returns the referenced symbol as a string reference. The …","Creates an f8E4M3FN type in the given context. The type is …","Creates an f8E5M2 type in the given context. The type is …","Creates a floating point attribute in the given context …","Same as “mlirFloatAttrDoubleGet”, but if the type is …","Returns the value stored in the given floating point …","Creates a function type, mapping a list of input types to …","Returns the pos-th input type.","Returns the number of input types.","Returns the number of result types.","Returns the pos-th result type.","","","","","","","","","","","","","","","Checks whether two identifiers are the same.","Gets an identifier with the given string value.","Returns the context associated with this identifier","Gets the string value of the identifier.","Creates an index type in the given context. The type is …","Infers the return types of the operation identified by its …","Returns the interface TypeID of the InferTypeOpInterface.","Creates an integer attribute of the given type with the …","Returns the value stored in the given integer attribute, …","Returns the value stored in the given integer attribute, …","Returns the value stored in the given integer attribute, …","Prints an integer set to the standard error stream.","Gets or creates a new canonically empty integer set with …","Checks if two integer set objects are equal. This is a “…","Gets or creates a new integer set in the given context. …","Returns <code>pos</code>-th constraint of the set.","Gets the context in which the given integer set lives.","Returns the number of constraints (equalities + …","Returns the number of dimensions in the given set.","Returns the number of equalities in the given set.","Returns the number of inequalities in the given set.","Returns the number of inputs (dimensions + symbols) in the …","Returns the number of symbols in the given set.","Checks whether the given set is a canonical empty set, …","Returns <code>true</code> of the <code>pos</code>-th constraint of the set is an …","Prints an integer set by sending chunks of the string …","Gets or creates a new integer set in which the values and …","Creates a signless integer type of the given bitwidth in …","Returns the bitwidth of an integer type.","Checks whether the given integer type is signed.","Checks whether the given integer type is signless.","Checks whether the given integer type is unsigned.","Creates a signed integer type of the given bitwidth in the …","Creates an unsigned integer type of the given bitwidth in …","Retuns <code>true</code> if the global debugging flag is set, false …","Creates an llvm.array type.","Creates an llvm.func type.","Creates an llvm.ptr type.","Creates an LLVM literal (unnamed) struct type.","Creates an llmv.void type.","Apply the special region builder for the builtin named …","Creates a call site location with a callee and a caller.","Checks if two locations are equal.","Creates an File/Line/Column location owned by the given …","Creates a fused location with an array of locations and …","Gets the context that a location was created with.","Creates a name location owned by the given context. …","Prints a location by sending chunks of the string …","Creates a location with unknown position owned by the …","Creates a MemRef type with the given rank, shape, memory …","Same as “mlirMemRefTypeContiguousGet” but returns a …","Creates a MemRef type with the given rank and shape, a …","Returns the affine map of the given MemRef type.","Same as “mlirMemRefTypeGet” but returns a …","Returns the layout of the given MemRef type.","Returns the memory space of the given MemRef type.","Creates a new, empty module and transfers ownership to the …","Parses a module from the string and transfers ownership to …","Takes a module owned by the caller and deletes it.","Views the generic operation as a module. The returned …","Gets the body of the module, i.e. the only block it …","Gets the context that a module was created with.","Views the module as a generic operation.","Associates an attribute with the name. Takes ownership of …","Creates a None type in the given context. The type is …","Returns an op operand representing the next use of the …","Returns the operand number of an op operand.","Returns the owner operation of an op operand.","Returns whether the op operand is null.","Add a pass and transfer ownership to the provided …","Parse a sequence of textual MLIR pass pipeline elements …","Nest an OpPassManager under the provided OpPassManager, …","Creates new printing flags with defaults, intended for …","Destroys printing flags created with …","Enables the elision of large elements attributes by …","Enable or disable printing of debug information (based on …","Always print operations in the generic form.","Use local scope when printing the operation. This allows …","Returns an operation that produced this value as its …","Returns the position of the value in the list of results …","Creates an opaque attribute in the given context …","Returns the raw data as a string reference. The data …","Returns the namespace of the dialect with which the given …","Creates an opaque type in the given context associated …","Returns the raw data as a string reference. The data …","Returns the namespace of the dialect with which the given …","Creates a deep copy of an operation. The operation is not …","Creates an operation and transfers ownership to the caller.","Takes an operation owned by the caller and destroys it.","Prints an operation to stderr.","Checks whether two operation handles point to the same …","Return <code>pos</code>-th attribute of the operation.","Returns an attribute attached to the operation given its …","Gets the block that owns this operation, returning null if …","Gets the context this operation is associated with","Returns first region attached to the operation.","Gets the location of the operation.","Gets the name of the operation as an identifier.","Returns an operation immediately following the given …","Returns the number of attributes attached to the operation.","Returns the number of operands of the operation.","Returns the number of regions attached to the given …","Returns the number of results of the operation.","Returns the number of successor blocks of the operation.","Returns <code>pos</code>-th operand of the operation.","Gets the operation that owns this operation, returning …","Returns <code>pos</code>-th region attached to the operation.","Returns <code>pos</code>-th result of the operation.","Returns <code>pos</code>-th successor of the operation.","Gets the type id of the operation. Returns null if the …","Returns <code>true</code> if the given operation implements an …","Returns <code>true</code> if the operation identified by its canonical …","Moves the given operation immediately after the other …","Moves the given operation immediately before the other …","Prints an operation by sending chunks of the string …","Same as mlirOperationPrint but accepts flags controlling …","Removes an attribute by name. Returns false if the …","Removes the given operation from its parent block. The …","Sets an attribute by name, replacing the existing if it …","Sets the <code>pos</code>-th operand of the operation.","","","","Adds a list of components to the operation state.","","Enables result type inference for the operation under …","Constructs an operation state from a name and a location.","Verify the operation and return true if it passes, false …","Same as mlirOperationPrint but writing the bytecode format …","","","","","","","Parse a textual MLIR pass pipeline and assign it to the …","Add a pass and transfer ownership to the provided …","Create a new top-level PassManager with the default anchor.","Create a new top-level PassManager anchored on <code>anchorOp</code>.","Destroy the provided PassManager.","Enable mlir-print-ir-after-all.","Enable / disable verify-each.","Cast a top-level PassManager to a generic OpPassManager.","Nest an OpPassManager under the top-level PassManager, the …","Run the provided <code>passManager</code> on the given <code>module</code>.","Print a textual MLIR pass pipeline by sending chunks of …","Casts from a type based on the expressed type of the given …","Casts from a type based on the expressed type of the given …","Casts from a type based on the storage type of the given …","Casts from a type based on a quantized type to a …","Casts from a type based on a quantized type to a …","Returns the maximum possible value stored by a quantized …","Returns the minimum possible value stored by a quantized …","Gets the original type approximated by the given quantized …","Gets the flags associated with the given quantized type.","Returns the element type of the given quantized type as …","Returns the bit flag used to indicate signedness of a …","Returns the underlying type used to store the values.","Returns the integral bitwidth that the storage type of the …","Returns the maximum value that the storage type of the …","Returns the minimum value that the storage type of the …","Returns <code>true</code> if the <code>candidate</code> type is compatible with the …","Returns <code>true</code> if the given type is signed, <code>false</code> otherwise.","Creates a tensor type of a fixed rank with the given …","Same as “mlirRankedTensorTypeGet” but returns a …","Gets the ‘encoding’ attribute from the ranked tensor …","Takes a block owned by the caller and appends it to the …","Creates a new empty region and transfers ownership to the …","Takes a region owned by the caller and destroys it.","Checks whether two region handles point to the same …","Gets the first block in the region.","Returns the region immediately following the given region …","Takes a block owned by the caller and inserts it at <code>pos</code> to …","Takes a block owned by the caller and inserts it after the …","Takes a block owned by the caller and inserts it before …","Appends all upstream dialects and extensions to the …","Register all translations to LLVM IR for dialects that can …","Register all compiler passes of MLIR.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the dim-th dimension of the given ranked shaped …","Returns the value indicating a dynamic size in a shaped …","Returns the value indicating a dynamic stride or offset in …","Returns the element type of the shaped type.","Returns the rank of the given ranked shaped type.","Checks whether the given shaped type is ranked.","Checks whether the given shaped type has a static shape.","Checks wither the dim-th dimension of the given shaped …","Checks whether the given value is used as a placeholder …","Checks whether the given value is used as a placeholder …","Returns the dense elements attribute containing 64-bit …","Returns the dense elements attribute containing the …","Creates a sparse elements attribute of the given shape …","Creates a sparse_tensor.encoding attribute with the given …","Returns a specified dim level type in a …","Returns the dimension ordering in a sparse_tensor.encoding …","Returns the higher ordering in a sparse_tensor.encoding …","Returns the index bit width in a sparse_tensor.encoding …","Returns the pointer bit width in a sparse_tensor.encoding …","Returns the number of dim level types in a …","","","","","Creates a string attribute in the given context containing …","Returns the attribute values as a string reference. The …","Creates a string attribute in the given context containing …","Constructs a string reference from a null-terminated C …","Returns true if two string references are equal, false …","Creates a symbol reference attribute in the given context …","Returns the string reference to the leaf referenced …","Returns pos-th reference nested in the given symbol …","Returns the number of references nested in the given …","Returns the string reference to the root referenced …","Creates a symbol table for the given operation. If the …","Destroys the symbol table created with …","Removes the given operation from the symbol table and …","Returns the name of the attribute used to store symbol …","Returns the name of the attribute used to store symbol …","Inserts the given operation into the given symbol table. …","Looks up a symbol with the given name in the given symbol …","Attempt to replace all uses that are nested within the …","Walks all symbol table operations nested within, and …","","","","Creates a tuple type that consists of the given list of …","Returns the number of types contained in a tuple.","Returns the pos-th type in the tuple type.","Creates a type attribute wrapping the given type in the …","Returns the type stored in the given type attribute.","Prints the type to the standard error stream.","Checks if two types are equal.","Gets the context that a type was created with.","Gets the type ID of the type.","Allocates a type id that is valid for the lifetime of the …","Creates a type id allocator for dynamic type id creation","Deallocates the allocator and all allocated type ids","<code>ptr</code> must be 8 byte aligned and unique to a type valid for …","Checks if two type ids are equal.","Returns the hash value of the type id.","Returns <code>true</code> if the given type is an AnyQuantizedType.","Checks whether the given type is a bf16 type.","Returns <code>true</code> if the given type is a …","Checks whether the given type is a Complex type.","Checks whether the given type is an f16 type.","Checks whether the given type is an f32 type.","Checks whether the given type is an f64 type.","Checks whether the given type is an f8E4M3FN type.","Checks whether the given type is an f8E5M2 type.","Checks whether the given type is a function type.","Checks whether the given type is an index type.","Checks whether the given type is an integer type.","Checks whether the given type is a MemRef type.","Checks whether the given type is a None type.","Checks whether the given type is an opaque type.","","","","","","","Returns <code>true</code> if the given type is a quantization dialect …","Checks whether the given type is a ranked tensor type.","Checks whether the given type is a Shaped type.","Checks whether the given type is a Tensor type.","","","Checks whether the given type is a tuple type.","Returns <code>true</code> if the given type is a …","Returns <code>true</code> if the given type is a UniformQuantizedType.","Checks whether the given type is an UnrankedMemRef type.","Checks whether the given type is an unranked tensor type.","Checks whether the given type is a Vector type.","Parses a type. The type is owned by the context.","Prints a location by sending chunks of the string …","Creates an instance of UniformQuantizedPerAxisType with …","Returns the number of axes in the given quantized per-axis …","Returns the index of the quantized dimension in the given …","Returns <code>pos</code>-th scale of the given quantized per-axis type.","Returns <code>pos</code>-th zero point of the given quantized per-axis …","Returns <code>true</code> if the given uniform quantized per-axis type …","Creates an instance of UniformQuantizedType with the given …","Returns the scale of the given uniform quantized type.","Returns the zero point of the given uniform quantized type.","Returns <code>true</code> if the given uniform quantized type is …","Creates a unit attribute in the given context.","","","","","","","","","","","","Creates an Unranked MemRef type with the given element …","Same as “mlirUnrankedMemRefTypeGet” but returns a …","Returns the memory spcae of the given Unranked MemRef type.","Creates an unranked tensor type with the given element …","Same as “mlirUnrankedTensorTypeGet” but returns a …","Prints the value to the standard error stream.","Returns 1 if two values are equal, 0 otherwise.","Returns an op operand representing the first use of the …","Returns the type of the value.","Returns 1 if the value is a block argument, 0 otherwise.","Returns 1 if the value is an operation result, 0 otherwise.","Prints a value by sending chunks of the string …","Creates a vector type of the shape identified by its rank …","Same as “mlirVectorTypeGet” but returns a nullptr …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","This callback is called when the pass is run. See …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,22,24,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,31,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,31,5,31,24,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,31,0,0,0,0,0,0,0,0,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,5,24,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,24,24,24,24,24,22,24,24,3,4,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,23,25,26,27,28,29,30,32,33,34,24,24,31,24,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,0,0,0,0,0,0,0,0,0,6,0],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[1,1],[2,2],[3,3],[4,4],[5,5],[6,6],[7,7],[8,8],[9,9],[10,10],[11,11],[12,12],[13,13],[14,14],[15,15],[16,16],[17,17],[18,18],[19,19],[20,20],[21,21],[22,22],[23,23],[24,24],[25,25],[26,26],[27,27],[28,28],[29,29],[30,30],[31,31],[32,32],[33,33],[34,34],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,[[1,35],36],[[2,35],36],[[3,35],36],[[4,35],36],[[5,35],36],[[6,35],36],[[7,35],36],[[8,35],36],[[9,35],36],[[10,35],36],[[11,35],36],[[12,35],36],[[13,35],36],[[14,35],36],[[15,35],36],[[16,35],36],[[17,35],36],[[18,35],36],[[19,35],36],[[20,35],36],[[21,35],36],[[22,35],36],[[23,35],36],[[24,35],36],[[25,35],36],[[26,35],36],[[27,35],36],[[28,35],36],[[29,35],36],[[30,35],36],[[31,35],36],[[32,35],36],[[33,35],36],[[34,35],36],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],38],[[],38],[[],38],[[],38],[[],38],[[],38],[[],38],[[],38],[[],38],[[],38],[[],38],[[],38],[[],38],[[],38],[[],38],[[],38],[[],38],[[],38],[[],38],[[],38],[[],38],[[],38],[[],38],[[],38],[[],38],[[],38],[[],38],[[],38],[[],38],[[],38],[[],38],[[],38],[[],38],[[],38],0,0,0,0,0,0,0,0,0,0,0],"p":[[3,"__fsid_t"],[3,"max_align_t"],[3,"MlirTypeID"],[3,"MlirTypeIDAllocator"],[3,"MlirStringRef"],[3,"MlirLogicalResult"],[3,"MlirContext"],[3,"MlirDialect"],[3,"MlirDialectRegistry"],[3,"MlirOperation"],[3,"MlirOpOperand"],[3,"MlirOpPrintingFlags"],[3,"MlirBlock"],[3,"MlirRegion"],[3,"MlirSymbolTable"],[3,"MlirAttribute"],[3,"MlirIdentifier"],[3,"MlirLocation"],[3,"MlirModule"],[3,"MlirType"],[3,"MlirValue"],[3,"MlirNamedAttribute"],[3,"MlirDialectHandle"],[3,"MlirOperationState"],[3,"MlirAffineExpr"],[3,"MlirAffineMap"],[3,"MlirPass"],[3,"MlirExternalPass"],[3,"MlirPassManager"],[3,"MlirOpPassManager"],[3,"MlirExternalPassCallbacks"],[3,"MlirDiagnostic"],[3,"MlirExecutionEngine"],[3,"MlirIntegerSet"],[3,"Formatter"],[6,"Result"],[4,"Result"],[3,"TypeId"]]},\
"once_cell":{"doc":"Overview","t":"AAADDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL","n":["race","sync","unsync","OnceBool","OnceBox","OnceNonZeroUsize","OnceRef","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","default","default","default","default","drop","fmt","fmt","fmt","fmt","from","from","from","from","get","get","get","get","get_or_init","get_or_init","get_or_init","get_or_init","get_or_try_init","get_or_try_init","get_or_try_init","get_or_try_init","into","into","into","into","new","new","new","new","set","set","set","set","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","Lazy","OnceCell","borrow","borrow","borrow_mut","borrow_mut","clone","clone_from","clone_into","default","default","deref","deref_mut","eq","fmt","fmt","force","force_mut","from","from","from","from","get","get","get_mut","get_mut","get_or_init","get_or_try_init","get_unchecked","into","into","into_inner","into_value","new","new","set","take","to_owned","try_from","try_from","try_insert","try_into","try_into","type_id","type_id","wait","with_value","Lazy","OnceCell","borrow","borrow","borrow_mut","borrow_mut","clone","clone_from","clone_into","default","default","deref","deref_mut","eq","fmt","fmt","force","force_mut","from","from","from","from","get","get","get_mut","get_mut","get_or_init","get_or_try_init","into","into","into_inner","into_value","new","new","set","take","to_owned","try_from","try_from","try_insert","try_into","try_into","type_id","type_id","with_value"],"q":["once_cell","","","once_cell::race","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","once_cell::sync","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","once_cell::unsync","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Thread-safe, non-blocking, “first one wins” flavor of …","Thread-safe, blocking version of <code>OnceCell</code>.","Single-threaded version of <code>OnceCell</code>.","A thread-safe cell which can be written to only once.","A thread-safe cell which can be written to only once.","A thread-safe cell which can be written to only once.","A thread-safe cell which can be written to only once.","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Gets a reference to the underlying value.","Gets a reference to the underlying value.","Gets the underlying value.","Gets the underlying value.","Gets the contents of the cell, initializing it with <code>f</code> if …","Gets the contents of the cell, initializing it with <code>f</code> if …","Gets the contents of the cell, initializing it with <code>f</code> if …","Gets the contents of the cell, initializing it with <code>f</code> if …","Gets the contents of the cell, initializing it with <code>f</code> if …","Gets the contents of the cell, initializing it with <code>f</code> if …","Gets the contents of the cell, initializing it with <code>f</code> if …","Gets the contents of the cell, initializing it with <code>f</code> if …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Creates a new empty cell.","Creates a new empty cell.","Creates a new empty cell.","Creates a new empty cell.","Sets the contents of this cell to <code>value</code>.","Sets the contents of this cell to <code>value</code>.","Sets the contents of this cell to <code>value</code>.","Sets the contents of this cell to <code>value</code>.","","","","","","","","","","","","","A value which is initialized on the first access.","A thread-safe cell which can be written to only once.","","","","","","","","","Creates a new lazy value using <code>Default</code> as the initializing …","","","","","","Forces the evaluation of this lazy value and returns a …","Forces the evaluation of this lazy value and returns a …","Returns the argument unchanged.","","","Returns the argument unchanged.","Gets the reference to the underlying value.","Gets the reference to the result of this lazy value if it …","Gets the mutable reference to the underlying value.","Gets the reference to the result of this lazy value if it …","Gets the contents of the cell, initializing it with <code>f</code> if …","Gets the contents of the cell, initializing it with <code>f</code> if …","Get the reference to the underlying value, without …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Consumes the <code>OnceCell</code>, returning the wrapped value. Returns","Consumes this <code>Lazy</code> returning the stored value.","Creates a new empty cell.","Creates a new lazy value with the given initializing …","Sets the contents of this cell to <code>value</code>.","Takes the value out of this <code>OnceCell</code>, moving it back to an …","","","","Like <code>set</code>, but also returns a reference to the final cell …","","","","","Gets the reference to the underlying value, blocking the …","Creates a new initialized cell.","A value which is initialized on the first access.","A cell which can be written to only once. It is not thread …","","","","","","","","","Creates a new lazy value using <code>Default</code> as the initializing …","","","","","","Forces the evaluation of this lazy value and returns a …","Forces the evaluation of this lazy value and returns a …","","Returns the argument unchanged.","","Returns the argument unchanged.","Gets a reference to the underlying value.","Gets the reference to the result of this lazy value if it …","Gets a mutable reference to the underlying value.","Gets the mutable reference to the result of this lazy …","Gets the contents of the cell, initializing it with <code>f</code> if …","Gets the contents of the cell, initializing it with <code>f</code> if …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Consumes the <code>OnceCell</code>, returning the wrapped value.","Consumes this <code>Lazy</code> returning the stored value.","Creates a new empty cell.","Creates a new lazy value with the given initializing …","Sets the contents of this cell to <code>value</code>.","Takes the value out of this <code>OnceCell</code>, moving it back to an …","","","","Like <code>set</code>, but also returns a reference to the final cell …","","","","","Creates a new initialized cell."],"i":[0,0,0,0,0,0,0,1,2,3,4,1,2,3,4,1,2,3,4,2,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,0,0,14,16,14,16,14,14,14,14,16,16,16,14,14,16,16,16,14,14,14,16,14,16,14,16,14,14,14,14,16,14,16,14,16,14,14,14,14,16,14,14,16,14,16,14,14,0,0,21,22,21,22,21,21,21,21,22,22,22,21,21,22,22,22,21,21,21,22,21,22,21,22,21,21,21,22,21,22,21,22,21,21,21,21,22,21,21,22,21,22,21],"f":[0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],1],[[],2],[[],3],[[],4],[2],[[1,5],6],[[2,5],6],[[3,5],6],[[4,5],6],[[]],[[]],[[]],[[]],[1,7],[2,7],[3,[[7,[8]]]],[4,[[7,[9]]]],[1],[2],[3,8],[4,9],[1,10],[2,10],[3,[[10,[8]]]],[4,[[10,[9]]]],[[]],[[]],[[]],[[]],[[],1],[[],2],[[],3],[[],4],[1,10],[[2,11],[[10,[11]]]],[[3,8],10],[[4,9],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],12],[[],12],[[],12],[[],12],0,0,[[]],[[]],[[]],[[]],[[[14,[13]]],[[14,[13]]]],[[[14,[13]],[14,[13]]]],[[]],[[],14],[[],[[16,[15]]]],[[[16,[17]]]],[[[16,[17]]]],[[[14,[18]],14],9],[[[14,[19]],5],6],[[[16,[19]],5],6],[16],[16],[[]],[20],[[],14],[[]],[14,7],[16,7],[14,7],[16,7],[14],[14,10],[14],[[]],[[]],[14,7],[16,10],[[],14],[[],16],[14,10],[14,7],[[]],[[],10],[[],10],[14,10],[[],10],[[],10],[[],12],[[],12],[14],[[],14],0,0,[[]],[[]],[[]],[[]],[[[21,[13]]],[[21,[13]]]],[[[21,[13]],[21,[13]]]],[[]],[[],21],[[],[[22,[15]]]],[[[22,[17]]]],[[[22,[17]]]],[[[21,[18]],[21,[18]]],9],[[[21,[19]],5],6],[[[22,[19]],5],6],[22],[22],[20],[[]],[[],21],[[]],[21,7],[22,7],[21,7],[22,7],[21],[21,10],[[]],[[]],[21,7],[22,10],[[],21],[[],22],[21,10],[21,7],[[]],[[],10],[[],10],[21,10],[[],10],[[],10],[[],12],[[],12],[[],21]],"p":[[3,"OnceRef"],[3,"OnceBox"],[3,"OnceNonZeroUsize"],[3,"OnceBool"],[3,"Formatter"],[6,"Result"],[4,"Option"],[3,"NonZeroUsize"],[15,"bool"],[4,"Result"],[3,"Box"],[3,"TypeId"],[8,"Clone"],[3,"OnceCell"],[8,"Default"],[3,"Lazy"],[8,"FnOnce"],[8,"PartialEq"],[8,"Debug"],[15,"never"],[3,"OnceCell"],[3,"Lazy"]]},\
"proc_macro2":{"doc":"github crates-io docs-rs","t":"NNNEDNDNNDDNNNDNEDDELLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLDCLLLLLLLLLLLLLL","n":["Alone","Brace","Bracket","Delimiter","Group","Group","Ident","Ident","Joint","LexError","Literal","Literal","None","Parenthesis","Punct","Punct","Spacing","Span","TokenStream","TokenTree","as_char","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","byte_string","call_site","character","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","default","delim_span","delimiter","eq","eq","eq","eq","extend","extend","extra","f32_suffixed","f32_unsuffixed","f64_suffixed","f64_unsuffixed","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_iter","from_iter","from_str","from_str","hash","i128_suffixed","i128_unsuffixed","i16_suffixed","i16_unsuffixed","i32_suffixed","i32_unsuffixed","i64_suffixed","i64_unsuffixed","i8_suffixed","i8_unsuffixed","into","into","into","into","into","into","into","into","into","into","into_iter","is_empty","isize_suffixed","isize_unsuffixed","join","located_at","mixed_site","new","new","new","new","new_raw","partial_cmp","provide","resolved_at","set_span","set_span","set_span","set_span","set_span","source_text","spacing","span","span","span","span","span","span","span_close","span_open","stream","string","subspan","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","to_string","to_string","to_string","token_stream","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","u128_suffixed","u128_unsuffixed","u16_suffixed","u16_unsuffixed","u32_suffixed","u32_unsuffixed","u64_suffixed","u64_unsuffixed","u8_suffixed","u8_unsuffixed","unwrap","usize_suffixed","usize_unsuffixed","DelimSpan","borrow","borrow_mut","clone","clone_into","close","fmt","from","into","join","open","to_owned","try_from","try_into","type_id","IntoIter","TokenStream","borrow","borrow_mut","clone","clone_into","fmt","from","into","into_iter","next","size_hint","to_owned","try_from","try_into","type_id"],"q":["proc_macroproc_macro2::extra","","","","","","","","","","","","","","","proc_macro2::token_stream","","","","","","","","","","","","","","",""],"d":["E.g. <code>+</code> is <code>Alone</code> in <code>+ =</code>, <code>+ident</code> or <code>+()</code>.","<code>{ ... }</code>","<code>[ ... ]</code>","Describes how a sequence of token trees is delimited.","A delimited token stream.","A token stream surrounded by bracket delimiters.","A word of Rust code, which may be a keyword or legal …","An identifier.","E.g. <code>+</code> is <code>Joint</code> in <code>+=</code> or <code>&#39;</code> is <code>Joint</code> in <code>&#39;#</code>.","Error returned from <code>TokenStream::from_str</code>.","A literal string (<code>&quot;hello&quot;</code>), byte string (<code>b&quot;hello&quot;</code>), …","A literal character (<code>&#39;a&#39;</code>), string (<code>&quot;hello&quot;</code>), number (<code>2.3</code>), …","<code>Ø ... Ø</code>","<code>( ... )</code>","A <code>Punct</code> is a single punctuation character like <code>+</code>, <code>-</code> or <code>#</code>.","A single punctuation character (<code>+</code>, <code>,</code>, <code>$</code>, etc.).","Whether a <code>Punct</code> is followed immediately by another <code>Punct</code> …","A region of source code, along with macro expansion …","An abstract stream of tokens, or more concretely a …","A single token or a delimited sequence of token trees …","Returns the value of this punctuation character as <code>char</code>.","","","","","","","","","","","","","","","","","","","","","Byte string literal.","The span of the invocation of the current procedural macro.","Character literal.","","","","","","","","","","","","","","","","","","","","","Returns an object that holds this group’s <code>span_open()</code> and","Returns the punctuation used as the delimiter for this …","","","","","","","Items which do not have a correspondence to any API in the …","Creates a new suffixed floating-point literal.","Creates a new unsuffixed floating-point literal.","Creates a new suffixed floating-point literal.","Creates a new unsuffixed floating-point literal.","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Checks if this <code>TokenStream</code> is empty.","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","Create a new span encompassing <code>self</code> and <code>other</code>.","Creates a new span with the same name resolution behavior …","The span located at the invocation of the procedural …","Returns an empty <code>TokenStream</code> containing no token trees.","Creates a new <code>Group</code> with the given delimiter and token …","Creates a new <code>Punct</code> from the given character and spacing.","Creates a new <code>Ident</code> with the given <code>string</code> as well as the …","Same as <code>Ident::new</code>, but creates a raw identifier (<code>r#ident</code>…","","","Creates a new span with the same line/column information …","Configures the span for <em>only this token</em>.","Configures the span for this <code>Group</code>’s delimiters, but not …","Configure the span for this punctuation character.","Configures the span of this <code>Ident</code>, possibly changing its …","Configures the span associated for this literal.","Returns the source text behind a span. This preserves the …","Returns the spacing of this punctuation character, …","","Returns the span of this tree, delegating to the <code>span</code> …","Returns the span for the delimiters of this token stream, …","Returns the span for this punctuation character.","Returns the span of this <code>Ident</code>.","Returns the span encompassing this literal.","Returns the span pointing to the closing delimiter of this …","Returns the span pointing to the opening delimiter of this …","Returns the <code>TokenStream</code> of tokens that are delimited in …","String literal.","Returns a <code>Span</code> that is a subset of <code>self.span()</code> containing …","","","","","","","","","","","","","","","","","Public implementation details for the <code>TokenStream</code> type, …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","Convert <code>proc_macro2::Span</code> to <code>proc_macro::Span</code>.","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","An object that holds a <code>Group</code>’s <code>span_open()</code> and …","","","","","Returns a span for the closing punctuation of the group …","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Returns a span covering the entire delimited group.","Returns a span for the opening punctuation of the group …","","","","","An iterator over <code>TokenStream</code>’s <code>TokenTree</code>s.","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","",""],"i":[9,8,8,0,0,6,0,6,9,0,0,6,8,8,0,6,0,0,0,0,1,17,5,4,6,7,8,1,9,10,3,17,5,4,6,7,8,1,9,10,3,3,4,3,5,4,6,7,8,1,9,10,3,5,4,6,7,8,1,9,10,3,10,5,7,7,8,9,10,10,5,5,0,3,3,3,3,17,17,5,5,4,6,6,7,7,8,1,1,9,10,10,3,3,17,5,5,5,4,4,6,6,6,6,6,7,8,1,9,10,3,5,5,5,3,10,3,3,3,3,3,3,3,3,3,3,17,5,4,6,7,8,1,9,10,3,5,5,3,3,4,4,4,5,7,1,10,10,10,17,4,6,7,1,10,3,4,1,17,6,7,1,10,3,7,7,7,3,3,5,4,6,7,8,1,9,10,3,17,5,6,7,1,10,3,0,17,5,4,6,7,8,1,9,10,3,17,5,4,6,7,8,1,9,10,3,17,5,4,6,7,8,1,9,10,3,3,3,3,3,3,3,3,3,3,3,4,3,3,0,12,12,12,12,12,12,12,12,12,12,12,12,12,12,0,0,29,29,29,29,29,29,29,29,29,29,29,29,29,29],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[1,2],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],3],[[],4],[2,3],[5,5],[4,4],[6,6],[7,7],[8,8],[1,1],[9,9],[10,10],[3,3],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[10,10],11],[[],5],[7,12],[7,8],[[8,8],13],[[9,9],13],[[10,10],13],[10,13],[[5,14]],[[5,14]],0,[15,3],[15,3],[16,3],[16,3],[[17,18],19],[[17,18],19],[[5,18],19],[[5,18],19],[[4,18],19],[[6,18],19],[[6,18],19],[[7,18],19],[[7,18],19],[[8,18],19],[[1,18],19],[[1,18],19],[[9,18],19],[[10,18],19],[[10,18],19],[[3,18],19],[[3,18],19],[[]],[[]],[6,5],[20,5],[21,4],[[]],[[]],[3,6],[10,6],[1,6],[7,6],[[]],[[]],[[]],[[]],[[]],[[]],[14,5],[14,5],[22,[[23,[5,17]]]],[22,[[23,[3,17]]]],[10],[24,3],[24,3],[25,3],[25,3],[26,3],[26,3],[27,3],[27,3],[28,3],[28,3],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[5,29],[5,13],[30,3],[30,3],[[4,4],[[31,[4]]]],[[4,4],4],[[],4],[[],5],[[8,5],7],[[2,9],1],[[22,4],10],[[22,4],10],[[10,10],[[31,[11]]]],[32],[[4,4],4],[[6,4]],[[7,4]],[[1,4]],[[10,4]],[[3,4]],[4,[[31,[33]]]],[1,9],[17,4],[6,4],[7,4],[1,4],[10,4],[3,4],[7,4],[7,4],[7,5],[22,3],[[3,[35,[34]]],[[31,[4]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],0,[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],36],[[],36],[[],36],[[],36],[[],36],[[],36],[[],36],[[],36],[[],36],[[],36],[37,3],[37,3],[38,3],[38,3],[39,3],[39,3],[40,3],[40,3],[41,3],[41,3],[4,21],[34,3],[34,3],0,[[]],[[]],[12,12],[[]],[12,4],[[12,18],19],[[]],[[]],[12,4],[12,4],[[]],[[],23],[[],23],[[],36],0,0,[[]],[[]],[29,29],[[]],[[29,18],19],[[]],[[]],[[]],[29,[[31,[6]]]],[29],[[]],[[],23],[[],23],[[],36]],"p":[[3,"Punct"],[15,"char"],[3,"Literal"],[3,"Span"],[3,"TokenStream"],[4,"TokenTree"],[3,"Group"],[4,"Delimiter"],[4,"Spacing"],[3,"Ident"],[4,"Ordering"],[3,"DelimSpan"],[15,"bool"],[8,"IntoIterator"],[15,"f32"],[15,"f64"],[3,"LexError"],[3,"Formatter"],[6,"Result"],[3,"TokenStream"],[3,"Span"],[15,"str"],[4,"Result"],[15,"i128"],[15,"i16"],[15,"i32"],[15,"i64"],[15,"i8"],[3,"IntoIter"],[15,"isize"],[4,"Option"],[3,"Demand"],[3,"String"],[15,"usize"],[8,"RangeBounds"],[3,"TypeId"],[15,"u128"],[15,"u16"],[15,"u32"],[15,"u64"],[15,"u8"]]},\
"quote":{"doc":"github crates-io docs-rs","t":"IIIKKKKKOLLOOLLLLK","n":["IdentFragment","ToTokens","TokenStreamExt","append","append_all","append_separated","append_terminated","fmt","format_ident","into_token_stream","into_token_stream","quote","quote_spanned","span","span","to_token_stream","to_token_stream","to_tokens"],"q":["quote","","","","","","","","","","","","","","","","",""],"d":["Specialized formatting trait used by <code>format_ident!</code>.","Types that can be interpolated inside a <code>quote!</code> invocation.","TokenStream extension trait with methods for appending …","For use by <code>ToTokens</code> implementations.","For use by <code>ToTokens</code> implementations.","For use by <code>ToTokens</code> implementations.","For use by <code>ToTokens</code> implementations.","Format this value as an identifier fragment.","Formatting macro for constructing <code>Ident</code>s.","Convert <code>self</code> directly into a <code>TokenStream</code> object.","Convert <code>self</code> directly into a <code>TokenStream</code> object.","The whole point.","Same as <code>quote!</code>, but applies a given span to all tokens …","Span associated with this <code>IdentFragment</code>.","Span associated with this <code>IdentFragment</code>.","Convert <code>self</code> directly into a <code>TokenStream</code> object.","Convert <code>self</code> directly into a <code>TokenStream</code> object.","Write <code>self</code> to the given <code>TokenStream</code>."],"i":[0,0,0,6,6,6,6,7,0,8,8,0,0,7,7,8,8,8],"f":[0,0,0,[[]],[[]],[[]],[[]],[1,2],0,[[],3],[[],3],0,0,[[],[[5,[4]]]],[[],[[5,[4]]]],[[],3],[[],3],[3]],"p":[[3,"Formatter"],[6,"Result"],[3,"TokenStream"],[3,"Span"],[4,"Option"],[8,"TokenStreamExt"],[8,"IdentFragment"],[8,"ToTokens"]]},\
"syn":{"doc":"github crates-io docs-rs","t":"DNNNNDDNNNDNDNNEDNNDDENNNNNNNDNNDNNNNNNNNNNNNNNNNNDDNNNEDDDNNDNNNNNDENDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDNDNEDDEDDDNNNNNENEDDDDNNEEDNNNNNNDNNNDEDDDDENDNNNNNNENDDDDDDDDDDDDDDDDNNDNNNNDNENNDDDDDDDDNDNNDNNNNNNNNENNEEDDNNNNNNNNNNNNNNNNNNNNNNNNNDEDDDDDDDDDDDDDDDDDNNNNNEDDDNNDNNENDNNNNNNNNNNGNENNNNDNNNNEEDNENNNNNNONNNDEEDDDDNNNNNNNDENNNNNNNNNDDDDDDDDDEDDDDDDDNENNNNNNNNDDDDDEDDNNNNNNNNNDEDENNNMMMMMMMMMMMMMMMLMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMLLLLMMMMMMMMMMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMMMMMMMMMMMMMMMMMOMMMMMMMOMAMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMMMMMMMMMMMMMMMMMMMMMMLLMMMMMMMMMMMMOOMLLLMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMAMMMMMMMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMMMMMMMMMMMMMMMLMMMMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMLLMMMMMMMMMMMLMMMMLMMMLMMMMMLMMMMMMMMMMMMMMMMMLMMMMAMMMMMMMMMMMMMMMMMMMLLLLLLLLLLLLMMMMMMMMMMMMMMMMMMMMMMMMOAFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFLLLLLLLFLOLLLLLLLOOLFLLLLLLLMMMMMMMMMLLMMMMMMMMMMMMMMMAMMMMMMMLMMMMLLLMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMLLLLLLLLLLMMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMALMMMMMMMMMMMLLLLLLLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLALLLLLLLMMMMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMMMMMMMMMMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMMMMMMLMMMMMMMMLLLLLMMMMMMMMMMMMMMMMMMMMMMMMMMMAMMMLLLLMDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLIKSKDLLLLMLLFMLLLLDDDQIDGIIGDLLLLLLLLLLLLLLLLLLLALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLIIKKNDDDDEDDDNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLIKDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDIDDDDDDDDDDDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLIFLLFLLFLLFLLFLLFLLFLLFLLFLLFLLFLLFLLFLLFLLFLLFLLFLLFLLFLLFLLFLLFLLFLLFLLFLLFLLFLLFLLFLLFLLFLLFLLFLLFLLFLLFLLFLLFLLFLLFLLFLLFLLFLLFLLFLLFLLFLLFLLFLLFLLFLLFLLFLLFLLFLLFLLFLLFLLFLLFLLFLLFLLFLLFLLFLLFLLFLLFLLFLLFLLFLLFLLFLLFLLFLLFLLFLLFLLFLLFLLFLLFLLFLLFLLFLLFLLFLLFLLFLLFLLFLLFLLFLLFLLFLLFLLFLLFLLFLLFLLFLLFLLFLLFLLFLLFLLFLLFLLFLLFLLFLLFLLFLLFLLFLLFLLFLLFLLFLLFLLFLLFLLFLLFLLFLLFLLFLLFLLFLLFLLFLLFLLFLLFLLFLLFLLFLLFLLFLLFLLFLLFLLFLLFLLFLLFLLFLLFLLFLLFLLFLLFLLFLLFLLFLLFLLFLLFLLFLLFLLFLLFLLFLLFLLFLLFLLFLLFLLFLLFLLFLLFLLFLLFLLFLLFLLFLLFLLFLLFLLFLLFLL","n":["Abi","Add","AddAssign","And","AngleBracketed","AngleBracketedGenericArguments","Arm","Array","Array","Assign","AssocConst","AssocConst","AssocType","AssocType","Async","AttrStyle","Attribute","Await","BareFn","BareFnArg","BareVariadic","BinOp","Binary","BitAnd","BitAndAssign","BitOr","BitOrAssign","BitXor","BitXorAssign","Block","Block","Bool","BoundLifetimes","Brace","Bracket","Break","Byte","ByteStr","Call","Cast","Char","Closed","Closure","Const","Const","Const","Const","Const","Const","Const","ConstParam","Constraint","Constraint","Continue","Cooked","Data","DataEnum","DataStruct","DataUnion","Default","Deref","DeriveInput","Div","DivAssign","Enum","Enum","Eq","Error","Expr","Expr","ExprArray","ExprAssign","ExprAsync","ExprAwait","ExprBinary","ExprBlock","ExprBreak","ExprCall","ExprCast","ExprClosure","ExprConst","ExprContinue","ExprField","ExprForLoop","ExprGroup","ExprIf","ExprIndex","ExprInfer","ExprLet","ExprLit","ExprLoop","ExprMacro","ExprMatch","ExprMethodCall","ExprParen","ExprPath","ExprRange","ExprReference","ExprRepeat","ExprReturn","ExprStruct","ExprTry","ExprTryBlock","ExprTuple","ExprUnary","ExprUnsafe","ExprWhile","ExprYield","ExternCrate","Field","Field","FieldMutability","FieldPat","FieldValue","Fields","FieldsNamed","FieldsUnnamed","File","Float","Fn","Fn","Fn","Fn","FnArg","ForLoop","ForeignItem","ForeignItemFn","ForeignItemMacro","ForeignItemStatic","ForeignItemType","ForeignMod","Ge","GenericArgument","GenericParam","Generics","Glob","Group","Group","Group","Gt","HalfOpen","Ident","Ident","If","Impl","ImplGenerics","ImplItem","ImplItemConst","ImplItemFn","ImplItemMacro","ImplItemType","ImplRestriction","ImplTrait","Index","Index","Infer","Infer","Inherited","Inner","Int","Item","Item","ItemConst","ItemEnum","ItemExternCrate","ItemFn","ItemForeignMod","ItemImpl","ItemMacro","ItemMod","ItemStatic","ItemStruct","ItemTrait","ItemTraitAlias","ItemType","ItemUnion","ItemUse","Label","Le","Let","Lifetime","Lifetime","Lifetime","Lifetime","Lifetime","LifetimeParam","List","Lit","Lit","Lit","LitBool","LitByte","LitByteStr","LitChar","LitFloat","LitInt","LitStr","Local","Local","LocalInit","Loop","Lt","Macro","Macro","Macro","Macro","Macro","Macro","Macro","Macro","Macro","MacroDelimiter","Match","Maybe","Member","Meta","MetaList","MetaNameValue","MethodCall","Mod","Mul","MulAssign","Mut","Name","NameValue","Named","Named","Ne","Neg","Never","None","None","None","None","Not","Or","Or","Outer","Paren","Paren","Paren","Paren","Parenthesized","ParenthesizedGenericArguments","Pat","PatConst","PatIdent","PatLit","PatMacro","PatOr","PatParen","PatPath","PatRange","PatReference","PatRest","PatSlice","PatStruct","PatTuple","PatTupleStruct","PatType","PatWild","Path","Path","Path","Path","Path","Path","PathArguments","PathSegment","PredicateLifetime","PredicateType","Ptr","Public","QSelf","Range","Range","RangeLimits","Raw","Receiver","Receiver","Reference","Reference","Reference","Rem","RemAssign","Rename","Repeat","Rest","Restricted","Result","Return","ReturnType","Shl","ShlAssign","Shr","ShrAssign","Signature","Slice","Slice","Static","Static","StaticMutability","Stmt","StmtMacro","Str","StrStyle","Struct","Struct","Struct","Struct","Sub","SubAssign","Token","Trait","Trait","TraitAlias","TraitBound","TraitBoundModifier","TraitItem","TraitItemConst","TraitItemFn","TraitItemMacro","TraitItemType","TraitObject","Try","TryBlock","Tuple","Tuple","Tuple","TupleStruct","Turbofish","Type","Type","Type","Type","Type","Type","Type","Type","Type","Type","TypeArray","TypeBareFn","TypeGenerics","TypeGroup","TypeImplTrait","TypeInfer","TypeMacro","TypeNever","TypeParam","TypeParamBound","TypeParen","TypePath","TypePtr","TypeReference","TypeSlice","TypeTraitObject","TypeTuple","Typed","UnOp","Unary","Union","Union","Unit","Unnamed","Unnamed","Unsafe","Use","UseGlob","UseGroup","UseName","UsePath","UseRename","UseTree","Variadic","Variant","Verbatim","Verbatim","Verbatim","Verbatim","Verbatim","Verbatim","Verbatim","Verbatim","Verbatim","VisRestricted","Visibility","WhereClause","WherePredicate","While","Wild","Yield","abi","abi","abi","and_token","and_token","and_token","apostrophe","args","args","args","arguments","arms","as_token","as_token","as_token","as_turbofish","async_token","asyncness","asyncness","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","auto_token","await_token","bang_token","bang_token","base","base","base10_digits","base10_digits","base10_parse","base10_parse","block","block","block","block","block","block","block","block","body","body","body","body","body","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bounded_ty","bounds","bounds","bounds","bounds","bounds","bounds","bounds","bounds","bounds","brace_token","brace_token","brace_token","brace_token","brace_token","brace_token","brace_token","brace_token","brace_token","brace_token","brace_token","braced","bracket_token","bracket_token","bracket_token","bracket_token","bracket_token","bracket_token","bracket_token","bracketed","break_token","buffer","by_ref","capture","capture","cases","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","colon2_token","colon2_token","colon_token","colon_token","colon_token","colon_token","colon_token","colon_token","colon_token","colon_token","colon_token","colon_token","colon_token","colon_token","colon_token","colon_token","colon_token","colon_token","colon_token","colon_token","colon_token","comma","comma","comma","cond","cond","const_params","const_params_mut","const_token","const_token","const_token","const_token","const_token","const_token","const_token","constness","constness","content","continue_token","crate_token","custom_keyword","custom_punctuation","data","default","default","default","default","default","default","default","default","defaultness","defaultness","defaultness","defaultness","delimiter","delimiter","discriminant","diverge","dot2_token","dot2_token","dot_token","dot_token","dot_token","dots","dots","dyn_token","elem","elem","elem","elem","elem","elem","elems","elems","elems","elems","elems","elems","else_branch","end","end","enum_token","enum_token","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq_token","eq_token","eq_token","eq_token","eq_token","eq_token","eq_token","eq_token","eq_token","eq_token","eq_token","eq_token","eq_token","eq_token","expr","expr","expr","expr","expr","expr","expr","expr","expr","expr","expr","expr","expr","expr","expr","expr","expr","expr","expr","ext","extern_token","extern_token","fat_arrow_token","fields","fields","fields","fields","fields","fields","fields","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fn_token","fn_token","for_token","for_token","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","func","generics","generics","generics","generics","generics","generics","generics","generics","generics","generics","generics","generics","generics","generics","generics","generics","generics","generics","get_ident","group_token","group_token","gt_token","gt_token","gt_token","gt_token","guard","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","ident","ident","ident","ident","ident","ident","ident","ident","ident","ident","ident","ident","ident","ident","ident","ident","ident","ident","ident","ident","ident","ident","ident","ident","ident","ident","ident","ident","ident","ident","ident","ident","if_token","impl_token","impl_token","in_token","in_token","index","index","init","inputs","inputs","inputs","inputs","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_iter","into_iter","into_iter","is_empty","is_empty","is_ident","is_none","items","items","items","items","items","iter","iter_mut","label","label","label","label","label","label","leading_colon","leading_colon","leading_vert","left","left","len","len","len","let_token","let_token","lifetime","lifetime","lifetime","lifetime","lifetimes","lifetimes","lifetimes","lifetimes","lifetimes","lifetimes","lifetimes_mut","limits","limits","lit","lit","loop_token","lt_token","lt_token","lt_token","lt_token","mac","mac","mac","mac","mac","mac","mac","mac","make_where_clause","match_token","member","member","member","meta","meta","method","mod_token","modifier","movability","mutability","mutability","mutability","mutability","mutability","mutability","mutability","mutability","mutability","name","name","name","name","named","new","new","new","new","new","new","new","new","new","new","new","new_raw","op","op","or1_token","or2_token","output","output","output","output","params","paren_token","paren_token","paren_token","paren_token","paren_token","paren_token","paren_token","paren_token","paren_token","paren_token","paren_token","paren_token","paren_token","paren_token","paren_token","parenthesized","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse2","parse_any","parse_args","parse_args","parse_args_with","parse_args_with","parse_body","parse_body_with","parse_file","parse_inner","parse_macro_input","parse_mod_style","parse_multi","parse_multi_with_leading_vert","parse_named","parse_nested_meta","parse_nested_meta","parse_outer","parse_quote","parse_quote_spanned","parse_single","parse_str","parse_turbofish","parse_unnamed","parse_with","parse_within","parse_without_eager_brace","partial_cmp","partial_cmp","pat","pat","pat","pat","pat","pat","pat","pat","pat","path","path","path","path","path","path","path","path","path","path","path","path","path","position","pound_token","predicates","pub_token","punctuated","qself","qself","qself","qself","qself","qself","question_token","receiver","receiver","reference","rename","rename","require_list","require_name_value","require_path_only","rest","rest","restriction","return_token","right","right","segments","self_token","self_ty","semi","semi_token","semi_token","semi_token","semi_token","semi_token","semi_token","semi_token","semi_token","semi_token","semi_token","semi_token","semi_token","semi_token","semi_token","semi_token","semi_token","semi_token","semi_token","semi_token","semi_token","semi_token","semi_token","semi_token","semi_token","set_span","set_span","set_span","set_span","set_span","set_span","set_span","set_span","set_span","set_span","shebang","sig","sig","sig","sig","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","spanned","split_for_impl","star_token","star_token","start","start","static_token","static_token","stmts","struct_token","struct_token","style","subpat","suffix","suffix","suffix","suffix","suffix","suffix","suffix","supertraits","then_branch","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","token","token","token","token","token","token","token","token","tokens","tokens","trait_","trait_token","trait_token","tree","tree","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_token","turbofish","ty","ty","ty","ty","ty","ty","ty","ty","ty","ty","ty","ty","ty","ty","ty","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_params","type_params_mut","type_token","type_token","type_token","type_token","underscore_token","underscore_token","underscore_token","union_token","union_token","unnamed","unraw","unsafe_token","unsafety","unsafety","unsafety","unsafety","unsafety","unsafety","use_token","value","value","value","value","value","value","value","value","variadic","variadic","variants","variants","vis","vis","vis","vis","vis","vis","vis","vis","vis","vis","vis","vis","vis","vis","vis","vis","vis","vis","vis","vis","visit_mut","where_clause","where_token","while_token","without_plus","without_plus","without_plus","without_plus","yield_token","Cursor","TokenBuffer","begin","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","empty","eof","eq","from","from","group","ident","into","into","lifetime","literal","new","new2","partial_cmp","punct","span","to_owned","token_stream","token_tree","try_from","try_from","try_into","try_into","type_id","type_id","IdentExt","parse_any","peek_any","unraw","ParseNestedMeta","borrow","borrow_mut","error","from","input","into","parse_nested_meta","parser","path","try_from","try_into","type_id","value","Error","Lookahead1","Nothing","Output","Parse","ParseBuffer","ParseStream","Parser","Peek","Result","StepCursor","advance_to","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","call","clone","clone","clone_into","clone_into","combine","cursor","deref","discouraged","drop","eq","error","error","error","extend","fmt","fmt","fmt","fmt","fmt","fork","from","from","from","from","from","from","hash","into","into","into","into","into","into_compile_error","into_iter","into_iter","is_empty","lookahead1","new","new_spanned","parse","parse","parse","parse","parse2","parse_any_delimiter","parse_str","parse_terminated","peek","peek","peek2","peek3","provide","span","span","step","to_compile_error","to_owned","to_owned","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","AnyDelimiter","Speculative","advance_to","parse_any_delimiter","End","IntoIter","IntoPairs","Iter","IterMut","Pair","Pairs","PairsMut","Punctuated","Punctuated","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clear","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cloned","default","empty_or_trailing","eq","extend","extend","first","first_mut","fmt","from","from","from","from","from","from","from","from","from_iter","from_iter","hash","index","index_mut","insert","into","into","into","into","into","into","into","into","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_pairs","into_tuple","into_value","is_empty","iter","iter_mut","last","last_mut","len","len","len","len","len","len","len","new","new","next","next","next","next","next","next","next_back","next_back","next_back","next_back","next_back","next_back","pairs","pairs_mut","parse_separated_nonempty","parse_separated_nonempty_with","parse_terminated","parse_terminated_with","pop","pop_punct","punct","punct_mut","push","push_punct","push_value","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","span","span","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_tokens","to_tokens","trailing_punct","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","value","value_mut","Spanned","span","Abstract","And","AndAnd","AndEq","As","Async","At","Auto","Await","Become","Box","Brace","Bracket","Break","Caret","CaretEq","Colon","Comma","Const","Continue","Crate","Default","Do","Dollar","Dot","DotDot","DotDotDot","DotDotEq","Dyn","Else","Enum","Eq","EqEq","Extern","FatArrow","Final","Fn","For","Ge","Group","Gt","If","Impl","In","LArrow","Le","Let","Loop","Lt","Macro","Match","Minus","MinusEq","Mod","Move","Mut","Ne","Not","Or","OrEq","OrOr","Override","Paren","PathSep","Percent","PercentEq","Plus","PlusEq","Pound","Priv","Pub","Question","RArrow","Ref","Return","SelfType","SelfValue","Semi","Shl","ShlEq","Shr","ShrEq","Slash","SlashEq","Star","StarEq","Static","Struct","Super","Tilde","Token","Trait","Try","Type","Typeof","Underscore","Union","Unsafe","Unsized","Use","Virtual","Where","While","Yield","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","surround","surround","surround","surround","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","VisitMut","visit_abi_mut","visit_abi_mut","visit_abi_mut","visit_angle_bracketed_generic_arguments_mut","visit_angle_bracketed_generic_arguments_mut","visit_angle_bracketed_generic_arguments_mut","visit_arm_mut","visit_arm_mut","visit_arm_mut","visit_assoc_const_mut","visit_assoc_const_mut","visit_assoc_const_mut","visit_assoc_type_mut","visit_assoc_type_mut","visit_assoc_type_mut","visit_attr_style_mut","visit_attr_style_mut","visit_attr_style_mut","visit_attribute_mut","visit_attribute_mut","visit_attribute_mut","visit_bare_fn_arg_mut","visit_bare_fn_arg_mut","visit_bare_fn_arg_mut","visit_bare_variadic_mut","visit_bare_variadic_mut","visit_bare_variadic_mut","visit_bin_op_mut","visit_bin_op_mut","visit_bin_op_mut","visit_block_mut","visit_block_mut","visit_block_mut","visit_bound_lifetimes_mut","visit_bound_lifetimes_mut","visit_bound_lifetimes_mut","visit_const_param_mut","visit_const_param_mut","visit_const_param_mut","visit_constraint_mut","visit_constraint_mut","visit_constraint_mut","visit_data_enum_mut","visit_data_enum_mut","visit_data_enum_mut","visit_data_mut","visit_data_mut","visit_data_mut","visit_data_struct_mut","visit_data_struct_mut","visit_data_struct_mut","visit_data_union_mut","visit_data_union_mut","visit_data_union_mut","visit_derive_input_mut","visit_derive_input_mut","visit_derive_input_mut","visit_expr_array_mut","visit_expr_array_mut","visit_expr_array_mut","visit_expr_assign_mut","visit_expr_assign_mut","visit_expr_assign_mut","visit_expr_async_mut","visit_expr_async_mut","visit_expr_async_mut","visit_expr_await_mut","visit_expr_await_mut","visit_expr_await_mut","visit_expr_binary_mut","visit_expr_binary_mut","visit_expr_binary_mut","visit_expr_block_mut","visit_expr_block_mut","visit_expr_block_mut","visit_expr_break_mut","visit_expr_break_mut","visit_expr_break_mut","visit_expr_call_mut","visit_expr_call_mut","visit_expr_call_mut","visit_expr_cast_mut","visit_expr_cast_mut","visit_expr_cast_mut","visit_expr_closure_mut","visit_expr_closure_mut","visit_expr_closure_mut","visit_expr_const_mut","visit_expr_const_mut","visit_expr_const_mut","visit_expr_continue_mut","visit_expr_continue_mut","visit_expr_continue_mut","visit_expr_field_mut","visit_expr_field_mut","visit_expr_field_mut","visit_expr_for_loop_mut","visit_expr_for_loop_mut","visit_expr_for_loop_mut","visit_expr_group_mut","visit_expr_group_mut","visit_expr_group_mut","visit_expr_if_mut","visit_expr_if_mut","visit_expr_if_mut","visit_expr_index_mut","visit_expr_index_mut","visit_expr_index_mut","visit_expr_infer_mut","visit_expr_infer_mut","visit_expr_infer_mut","visit_expr_let_mut","visit_expr_let_mut","visit_expr_let_mut","visit_expr_lit_mut","visit_expr_lit_mut","visit_expr_lit_mut","visit_expr_loop_mut","visit_expr_loop_mut","visit_expr_loop_mut","visit_expr_macro_mut","visit_expr_macro_mut","visit_expr_macro_mut","visit_expr_match_mut","visit_expr_match_mut","visit_expr_match_mut","visit_expr_method_call_mut","visit_expr_method_call_mut","visit_expr_method_call_mut","visit_expr_mut","visit_expr_mut","visit_expr_mut","visit_expr_paren_mut","visit_expr_paren_mut","visit_expr_paren_mut","visit_expr_path_mut","visit_expr_path_mut","visit_expr_path_mut","visit_expr_range_mut","visit_expr_range_mut","visit_expr_range_mut","visit_expr_reference_mut","visit_expr_reference_mut","visit_expr_reference_mut","visit_expr_repeat_mut","visit_expr_repeat_mut","visit_expr_repeat_mut","visit_expr_return_mut","visit_expr_return_mut","visit_expr_return_mut","visit_expr_struct_mut","visit_expr_struct_mut","visit_expr_struct_mut","visit_expr_try_block_mut","visit_expr_try_block_mut","visit_expr_try_block_mut","visit_expr_try_mut","visit_expr_try_mut","visit_expr_try_mut","visit_expr_tuple_mut","visit_expr_tuple_mut","visit_expr_tuple_mut","visit_expr_unary_mut","visit_expr_unary_mut","visit_expr_unary_mut","visit_expr_unsafe_mut","visit_expr_unsafe_mut","visit_expr_unsafe_mut","visit_expr_while_mut","visit_expr_while_mut","visit_expr_while_mut","visit_expr_yield_mut","visit_expr_yield_mut","visit_expr_yield_mut","visit_field_mut","visit_field_mut","visit_field_mut","visit_field_mutability_mut","visit_field_mutability_mut","visit_field_mutability_mut","visit_field_pat_mut","visit_field_pat_mut","visit_field_pat_mut","visit_field_value_mut","visit_field_value_mut","visit_field_value_mut","visit_fields_mut","visit_fields_mut","visit_fields_mut","visit_fields_named_mut","visit_fields_named_mut","visit_fields_named_mut","visit_fields_unnamed_mut","visit_fields_unnamed_mut","visit_fields_unnamed_mut","visit_file_mut","visit_file_mut","visit_file_mut","visit_fn_arg_mut","visit_fn_arg_mut","visit_fn_arg_mut","visit_foreign_item_fn_mut","visit_foreign_item_fn_mut","visit_foreign_item_fn_mut","visit_foreign_item_macro_mut","visit_foreign_item_macro_mut","visit_foreign_item_macro_mut","visit_foreign_item_mut","visit_foreign_item_mut","visit_foreign_item_mut","visit_foreign_item_static_mut","visit_foreign_item_static_mut","visit_foreign_item_static_mut","visit_foreign_item_type_mut","visit_foreign_item_type_mut","visit_foreign_item_type_mut","visit_generic_argument_mut","visit_generic_argument_mut","visit_generic_argument_mut","visit_generic_param_mut","visit_generic_param_mut","visit_generic_param_mut","visit_generics_mut","visit_generics_mut","visit_generics_mut","visit_ident_mut","visit_ident_mut","visit_ident_mut","visit_impl_item_const_mut","visit_impl_item_const_mut","visit_impl_item_const_mut","visit_impl_item_fn_mut","visit_impl_item_fn_mut","visit_impl_item_fn_mut","visit_impl_item_macro_mut","visit_impl_item_macro_mut","visit_impl_item_macro_mut","visit_impl_item_mut","visit_impl_item_mut","visit_impl_item_mut","visit_impl_item_type_mut","visit_impl_item_type_mut","visit_impl_item_type_mut","visit_impl_restriction_mut","visit_impl_restriction_mut","visit_impl_restriction_mut","visit_index_mut","visit_index_mut","visit_index_mut","visit_item_const_mut","visit_item_const_mut","visit_item_const_mut","visit_item_enum_mut","visit_item_enum_mut","visit_item_enum_mut","visit_item_extern_crate_mut","visit_item_extern_crate_mut","visit_item_extern_crate_mut","visit_item_fn_mut","visit_item_fn_mut","visit_item_fn_mut","visit_item_foreign_mod_mut","visit_item_foreign_mod_mut","visit_item_foreign_mod_mut","visit_item_impl_mut","visit_item_impl_mut","visit_item_impl_mut","visit_item_macro_mut","visit_item_macro_mut","visit_item_macro_mut","visit_item_mod_mut","visit_item_mod_mut","visit_item_mod_mut","visit_item_mut","visit_item_mut","visit_item_mut","visit_item_static_mut","visit_item_static_mut","visit_item_static_mut","visit_item_struct_mut","visit_item_struct_mut","visit_item_struct_mut","visit_item_trait_alias_mut","visit_item_trait_alias_mut","visit_item_trait_alias_mut","visit_item_trait_mut","visit_item_trait_mut","visit_item_trait_mut","visit_item_type_mut","visit_item_type_mut","visit_item_type_mut","visit_item_union_mut","visit_item_union_mut","visit_item_union_mut","visit_item_use_mut","visit_item_use_mut","visit_item_use_mut","visit_label_mut","visit_label_mut","visit_label_mut","visit_lifetime_mut","visit_lifetime_mut","visit_lifetime_mut","visit_lifetime_param_mut","visit_lifetime_param_mut","visit_lifetime_param_mut","visit_lit_bool_mut","visit_lit_bool_mut","visit_lit_bool_mut","visit_lit_byte_mut","visit_lit_byte_mut","visit_lit_byte_mut","visit_lit_byte_str_mut","visit_lit_byte_str_mut","visit_lit_byte_str_mut","visit_lit_char_mut","visit_lit_char_mut","visit_lit_char_mut","visit_lit_float_mut","visit_lit_float_mut","visit_lit_float_mut","visit_lit_int_mut","visit_lit_int_mut","visit_lit_int_mut","visit_lit_mut","visit_lit_mut","visit_lit_mut","visit_lit_str_mut","visit_lit_str_mut","visit_lit_str_mut","visit_local_init_mut","visit_local_init_mut","visit_local_init_mut","visit_local_mut","visit_local_mut","visit_local_mut","visit_macro_delimiter_mut","visit_macro_delimiter_mut","visit_macro_delimiter_mut","visit_macro_mut","visit_macro_mut","visit_macro_mut","visit_member_mut","visit_member_mut","visit_member_mut","visit_meta_list_mut","visit_meta_list_mut","visit_meta_list_mut","visit_meta_mut","visit_meta_mut","visit_meta_mut","visit_meta_name_value_mut","visit_meta_name_value_mut","visit_meta_name_value_mut","visit_parenthesized_generic_arguments_mut","visit_parenthesized_generic_arguments_mut","visit_parenthesized_generic_arguments_mut","visit_pat_ident_mut","visit_pat_ident_mut","visit_pat_ident_mut","visit_pat_mut","visit_pat_mut","visit_pat_mut","visit_pat_or_mut","visit_pat_or_mut","visit_pat_or_mut","visit_pat_paren_mut","visit_pat_paren_mut","visit_pat_paren_mut","visit_pat_reference_mut","visit_pat_reference_mut","visit_pat_reference_mut","visit_pat_rest_mut","visit_pat_rest_mut","visit_pat_rest_mut","visit_pat_slice_mut","visit_pat_slice_mut","visit_pat_slice_mut","visit_pat_struct_mut","visit_pat_struct_mut","visit_pat_struct_mut","visit_pat_tuple_mut","visit_pat_tuple_mut","visit_pat_tuple_mut","visit_pat_tuple_struct_mut","visit_pat_tuple_struct_mut","visit_pat_tuple_struct_mut","visit_pat_type_mut","visit_pat_type_mut","visit_pat_type_mut","visit_pat_wild_mut","visit_pat_wild_mut","visit_pat_wild_mut","visit_path_arguments_mut","visit_path_arguments_mut","visit_path_arguments_mut","visit_path_mut","visit_path_mut","visit_path_mut","visit_path_segment_mut","visit_path_segment_mut","visit_path_segment_mut","visit_predicate_lifetime_mut","visit_predicate_lifetime_mut","visit_predicate_lifetime_mut","visit_predicate_type_mut","visit_predicate_type_mut","visit_predicate_type_mut","visit_qself_mut","visit_qself_mut","visit_qself_mut","visit_range_limits_mut","visit_range_limits_mut","visit_range_limits_mut","visit_receiver_mut","visit_receiver_mut","visit_receiver_mut","visit_return_type_mut","visit_return_type_mut","visit_return_type_mut","visit_signature_mut","visit_signature_mut","visit_signature_mut","visit_span_mut","visit_span_mut","visit_span_mut","visit_static_mutability_mut","visit_static_mutability_mut","visit_static_mutability_mut","visit_stmt_macro_mut","visit_stmt_macro_mut","visit_stmt_macro_mut","visit_stmt_mut","visit_stmt_mut","visit_stmt_mut","visit_trait_bound_modifier_mut","visit_trait_bound_modifier_mut","visit_trait_bound_modifier_mut","visit_trait_bound_mut","visit_trait_bound_mut","visit_trait_bound_mut","visit_trait_item_const_mut","visit_trait_item_const_mut","visit_trait_item_const_mut","visit_trait_item_fn_mut","visit_trait_item_fn_mut","visit_trait_item_fn_mut","visit_trait_item_macro_mut","visit_trait_item_macro_mut","visit_trait_item_macro_mut","visit_trait_item_mut","visit_trait_item_mut","visit_trait_item_mut","visit_trait_item_type_mut","visit_trait_item_type_mut","visit_trait_item_type_mut","visit_type_array_mut","visit_type_array_mut","visit_type_array_mut","visit_type_bare_fn_mut","visit_type_bare_fn_mut","visit_type_bare_fn_mut","visit_type_group_mut","visit_type_group_mut","visit_type_group_mut","visit_type_impl_trait_mut","visit_type_impl_trait_mut","visit_type_impl_trait_mut","visit_type_infer_mut","visit_type_infer_mut","visit_type_infer_mut","visit_type_macro_mut","visit_type_macro_mut","visit_type_macro_mut","visit_type_mut","visit_type_mut","visit_type_mut","visit_type_never_mut","visit_type_never_mut","visit_type_never_mut","visit_type_param_bound_mut","visit_type_param_bound_mut","visit_type_param_bound_mut","visit_type_param_mut","visit_type_param_mut","visit_type_param_mut","visit_type_paren_mut","visit_type_paren_mut","visit_type_paren_mut","visit_type_path_mut","visit_type_path_mut","visit_type_path_mut","visit_type_ptr_mut","visit_type_ptr_mut","visit_type_ptr_mut","visit_type_reference_mut","visit_type_reference_mut","visit_type_reference_mut","visit_type_slice_mut","visit_type_slice_mut","visit_type_slice_mut","visit_type_trait_object_mut","visit_type_trait_object_mut","visit_type_trait_object_mut","visit_type_tuple_mut","visit_type_tuple_mut","visit_type_tuple_mut","visit_un_op_mut","visit_un_op_mut","visit_un_op_mut","visit_use_glob_mut","visit_use_glob_mut","visit_use_glob_mut","visit_use_group_mut","visit_use_group_mut","visit_use_group_mut","visit_use_name_mut","visit_use_name_mut","visit_use_name_mut","visit_use_path_mut","visit_use_path_mut","visit_use_path_mut","visit_use_rename_mut","visit_use_rename_mut","visit_use_rename_mut","visit_use_tree_mut","visit_use_tree_mut","visit_use_tree_mut","visit_variadic_mut","visit_variadic_mut","visit_variadic_mut","visit_variant_mut","visit_variant_mut","visit_variant_mut","visit_vis_restricted_mut","visit_vis_restricted_mut","visit_vis_restricted_mut","visit_visibility_mut","visit_visibility_mut","visit_visibility_mut","visit_where_clause_mut","visit_where_clause_mut","visit_where_clause_mut","visit_where_predicate_mut","visit_where_predicate_mut","visit_where_predicate_mut"],"q":["synsyn::buffer","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","syn::ext","","","","syn::meta","","","","","","","","","","","","","","syn::parse","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","syn::parse::discouraged","","","","syn::punctuated","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","syn::spanned","","syn::tokensyn::visit_mutd":["The binary interface of a function: <code>extern &quot;C&quot;</code>.","The <code>+</code> operator (addition)","The <code>+=</code> operator","The <code>&amp;&amp;</code> operator (logical and)","The <code>&lt;&#39;a, T&gt;</code> in <code>std::slice::iter&lt;&#39;a, T&gt;</code>.","Angle bracketed arguments of a path segment: the <code>&lt;K, V&gt;</code> in …","One arm of a <code>match</code> expression: <code>0..=10 =&gt; { return true; }</code>.","A slice literal expression: <code>[a, b, c, d]</code>.","A fixed size array type: <code>[T; n]</code>.","An assignment expression: <code>a = compute()</code>.","An equality constraint on an associated constant: the …","An equality constraint on an associated constant: the …","A binding (equality constraint) on an associated type: the …","A binding (equality constraint) on an associated type: the …","An async block: <code>async { ... }</code>.","Distinguishes between attributes that decorate an item and …","An attribute, like <code>#[repr(transparent)]</code>.","An await expression: <code>fut.await</code>.","A bare function type: <code>fn(usize) -&gt; bool</code>.","An argument in a function type: the <code>usize</code> in …","The variadic argument of a function pointer like …","A binary operator: <code>+</code>, <code>+=</code>, <code>&amp;</code>.","A binary operation: <code>a + b</code>, <code>a += b</code>.","The <code>&amp;</code> operator (bitwise and)","The <code>&amp;=</code> operator","The <code>|</code> operator (bitwise or)","The <code>|=</code> operator","The <code>^</code> operator (bitwise xor)","The <code>^=</code> operator","A braced block containing Rust statements.","A blocked scope: <code>{ ... }</code>.","A boolean literal: <code>true</code> or <code>false</code>.","A set of bound lifetimes: <code>for&lt;&#39;a, &#39;b, &#39;c&gt;</code>.","","","A <code>break</code>, with an optional label to break and an optional …","A byte literal: <code>b&#39;f&#39;</code>.","A byte string literal: <code>b&quot;foo&quot;</code>.","A function call expression: <code>invoke(a, b)</code>.","A cast expression: <code>foo as f64</code>.","A character literal: <code>&#39;a&#39;</code>.","Inclusive at the beginning and end.","A closure expression: <code>|a, b| a + b</code>.","A const block: <code>const { ... }</code>.","A const generic parameter: <code>const LENGTH: usize</code>.","A constant item: <code>const MAX: u16 = 65535</code>.","An associated constant within the definition of a trait.","An associated constant within an impl block.","A const block: <code>const { ... }</code>.","A const expression. Must be inside of a block.","A const generic parameter: <code>const LENGTH: usize</code>.","An associated type bound: <code>Iterator&lt;Item: Display&gt;</code>.","An associated type bound: <code>Iterator&lt;Item: Display&gt;</code>.","A <code>continue</code>, with an optional label.","An ordinary string like <code>&quot;data&quot;</code>.","The storage of a struct, enum or union data structure.","An enum input to a <code>proc_macro_derive</code> macro.","A struct input to a <code>proc_macro_derive</code> macro.","An untagged union input to a <code>proc_macro_derive</code> macro.","Return type is not specified.","The <code>*</code> operator for dereferencing","Data structure sent to a <code>proc_macro_derive</code> macro.","The <code>/</code> operator (division)","The <code>/=</code> operator","","An enum definition: <code>enum Foo&lt;A, B&gt; { A(A), B(B) }</code>.","The <code>==</code> operator (equality)","Error returned when a Syn parser cannot parse the input …","A Rust expression.","Expression, with or without trailing semicolon.","A slice literal expression: <code>[a, b, c, d]</code>.","An assignment expression: <code>a = compute()</code>.","An async block: <code>async { ... }</code>.","An await expression: <code>fut.await</code>.","A binary operation: <code>a + b</code>, <code>a += b</code>.","A blocked scope: <code>{ ... }</code>.","A <code>break</code>, with an optional label to break and an optional …","A function call expression: <code>invoke(a, b)</code>.","A cast expression: <code>foo as f64</code>.","A closure expression: <code>|a, b| a + b</code>.","A const block: <code>const { ... }</code>.","A <code>continue</code>, with an optional label.","Access of a named struct field (<code>obj.k</code>) or unnamed tuple …","A for loop: <code>for pat in expr { ... }</code>.","An expression contained within invisible delimiters.","An <code>if</code> expression with an optional <code>else</code> block: …","A square bracketed indexing expression: <code>vector[2]</code>.","The inferred value of a const generic argument, denoted <code>_</code>.","A <code>let</code> guard: <code>let Some(x) = opt</code>.","A literal in place of an expression: <code>1</code>, <code>&quot;foo&quot;</code>.","Conditionless loop: <code>loop { ... }</code>.","A macro invocation expression: <code>format!(&quot;{}&quot;, q)</code>.","A <code>match</code> expression: <code>match n { Some(n) =&gt; {}, None =&gt; {} }</code>.","A method call expression: <code>x.foo::&lt;T&gt;(a, b)</code>.","A parenthesized expression: <code>(a + b)</code>.","A path like <code>std::mem::replace</code> possibly containing generic …","A range expression: <code>1..2</code>, <code>1..</code>, <code>..2</code>, <code>1..=2</code>, <code>..=2</code>.","A referencing operation: <code>&amp;a</code> or <code>&amp;mut a</code>.","An array literal constructed from one repeated element: …","A <code>return</code>, with an optional value to be returned.","A struct literal expression: <code>Point { x: 1, y: 1 }</code>.","A try-expression: <code>expr?</code>.","A try block: <code>try { ... }</code>.","A tuple expression: <code>(a, b, c, d)</code>.","A unary operation: <code>!x</code>, <code>*x</code>.","An unsafe block: <code>unsafe { ... }</code>.","A while loop: <code>while expr { ... }</code>.","A yield expression: <code>yield expr</code>.","An <code>extern crate</code> item: <code>extern crate serde</code>.","A field of a struct or enum variant.","Access of a named struct field (<code>obj.k</code>) or unnamed tuple …","Unused, but reserved for RFC 3323 restrictions.","A single field in a struct pattern.","A field-value pair in a struct literal.","Data stored within an enum variant or struct.","Named fields of a struct or struct variant such as …","Unnamed fields of a tuple struct or tuple variant such as …","A complete file of Rust source code.","A floating point literal: <code>1f64</code> or <code>1.0e10f64</code>.","A free-standing function: …","A foreign function in an <code>extern</code> block.","An associated function within the definition of a trait.","An associated function within an impl block.","An argument in a function signature: the <code>n: usize</code> in …","A for loop: <code>for pat in expr { ... }</code>.","An item within an <code>extern</code> block.","A foreign function in an <code>extern</code> block.","A macro invocation within an extern block.","A foreign static item in an <code>extern</code> block: <code>static ext: u8</code>.","A foreign type in an <code>extern</code> block: <code>type void</code>.","A block of foreign items: <code>extern &quot;C&quot; { ... }</code>.","The <code>&gt;=</code> operator (greater than or equal to)","An individual generic argument, like <code>&#39;a</code>, <code>T</code>, or <code>Item = T</code>.","A generic type parameter, lifetime, or const generic: …","Lifetimes and type parameters attached to a declaration of …","A glob import in a <code>use</code> item: <code>*</code>.","An expression contained within invisible delimiters.","A braced group of imports in a <code>use</code> item: <code>{A, B, C}</code>.","A type contained within invisible delimiters.","The <code>&gt;</code> operator (greater than)","Inclusive at the beginning, exclusive at the end.","A word of Rust code, which may be a keyword or legal …","A pattern that binds a new variable: …","An <code>if</code> expression with an optional <code>else</code> block: …","An impl block providing trait or associated items: …","Returned by <code>Generics::split_for_impl</code>.","An item within an impl block.","An associated constant within an impl block.","An associated function within an impl block.","A macro invocation within an impl block.","An associated type within an impl block.","Unused, but reserved for RFC 3323 restrictions.","An <code>impl Bound1 + Bound2 + Bound3</code> type where <code>Bound</code> is a …","The index of an unnamed tuple struct field.","A square bracketed indexing expression: <code>vector[2]</code>.","The inferred value of a const generic argument, denoted <code>_</code>.","Indication that a type should be inferred by the compiler: …","An inherited visibility, which usually means private.","","An integer literal: <code>1</code> or <code>1u16</code>.","Things that can appear directly inside of a module or …","An item definition.","A constant item: <code>const MAX: u16 = 65535</code>.","An enum definition: <code>enum Foo&lt;A, B&gt; { A(A), B(B) }</code>.","An <code>extern crate</code> item: <code>extern crate serde</code>.","A free-standing function: …","A block of foreign items: <code>extern &quot;C&quot; { ... }</code>.","An impl block providing trait or associated items: …","A macro invocation, which includes <code>macro_rules!</code> …","A module or module declaration: <code>mod m</code> or <code>mod m { ... }</code>.","A static item: <code>static BIKE: Shed = Shed(42)</code>.","A struct definition: <code>struct Foo&lt;A&gt; { x: A }</code>.","A trait definition: <code>pub trait Iterator { ... }</code>.","A trait alias: <code>pub trait SharableIterator = Iterator + Sync</code>…","A type alias: …","A union definition: <code>union Foo&lt;A, B&gt; { x: A, y: B }</code>.","A use declaration: <code>use std::collections::HashMap</code>.","A lifetime labeling a <code>for</code>, <code>while</code>, or <code>loop</code>.","The <code>&lt;=</code> operator (less than or equal to)","A <code>let</code> guard: <code>let Some(x) = opt</code>.","A Rust lifetime: <code>&#39;a</code>.","A lifetime parameter: <code>&#39;a: &#39;b + &#39;c + &#39;d</code>.","","A lifetime predicate in a <code>where</code> clause: <code>&#39;a: &#39;b + &#39;c</code>.","A lifetime argument.","A lifetime definition: <code>&#39;a: &#39;b + &#39;c + &#39;d</code>.","A structured list within an attribute, like …","A Rust literal such as a string or integer or boolean.","A literal in place of an expression: <code>1</code>, <code>&quot;foo&quot;</code>.","A literal pattern: <code>0</code>.","A boolean literal: <code>true</code> or <code>false</code>.","A byte literal: <code>b&#39;f&#39;</code>.","A byte string literal: <code>b&quot;foo&quot;</code>.","A character literal: <code>&#39;a&#39;</code>.","A floating point literal: <code>1f64</code> or <code>1.0e10f64</code>.","An integer literal: <code>1</code> or <code>1u16</code>.","A UTF-8 string literal: <code>&quot;foo&quot;</code>.","A local <code>let</code> binding: <code>let x: u64 = s.parse()?</code>.","A local (let) binding.","The expression assigned in a local <code>let</code> binding, including …","Conditionless loop: <code>loop { ... }</code>.","The <code>&lt;</code> operator (less than)","A macro invocation: <code>println!(&quot;{}&quot;, mac)</code>.","A macro invocation expression: <code>format!(&quot;{}&quot;, q)</code>.","A macro invocation, which includes <code>macro_rules!</code> …","A macro invocation within an extern block.","A macro invocation within the definition of a trait.","A macro invocation within an impl block.","A macro in pattern position.","A macro invocation in statement position.","A macro in the type position.","A grouping token that surrounds a macro body: <code>m!(...)</code> or …","A <code>match</code> expression: <code>match n { Some(n) =&gt; {}, None =&gt; {} }</code>.","","A struct or tuple struct field accessed in a struct …","Content of a compile-time structured attribute.","A structured list within an attribute, like …","A name-value pair within an attribute, like …","A method call expression: <code>x.foo::&lt;T&gt;(a, b)</code>.","A module or module declaration: <code>mod m</code> or <code>mod m { ... }</code>.","The <code>*</code> operator (multiplication)","The <code>*=</code> operator","","An identifier imported by a <code>use</code> item: <code>HashMap</code>.","A name-value pair within an attribute, like …","Named fields of a struct or struct variant such as …","A named field like <code>self.x</code>.","The <code>!=</code> operator (not equal to)","The <code>-</code> operator for negation","The never type: <code>!</code>.","","","","","The <code>!</code> operator for logical inversion","The <code>||</code> operator (logical or)","A pattern that matches any one of a set of cases.","","A parenthesized expression: <code>(a + b)</code>.","","A parenthesized pattern: <code>(A | B)</code>.","A parenthesized type equivalent to the inner type.","The <code>(A, B) -&gt; C</code> in <code>Fn(A, B) -&gt; C</code>.","Arguments of a function path segment: the <code>(A, B) -&gt; C</code> in …","A pattern in a local binding, function signature, match …","A const block: <code>const { ... }</code>.","A pattern that binds a new variable: …","A literal in place of an expression: <code>1</code>, <code>&quot;foo&quot;</code>.","A macro invocation expression: <code>format!(&quot;{}&quot;, q)</code>.","A pattern that matches any one of a set of cases.","A parenthesized pattern: <code>(A | B)</code>.","A path like <code>std::mem::replace</code> possibly containing generic …","A range expression: <code>1..2</code>, <code>1..</code>, <code>..2</code>, <code>1..=2</code>, <code>..=2</code>.","A reference pattern: <code>&amp;mut var</code>.","The dots in a tuple or slice pattern: <code>[0, 1, ..]</code>.","A dynamically sized slice pattern: <code>[a, b, ref i @ .., y, z]</code>…","A struct or struct variant pattern: <code>Variant { x, y, .. }</code>.","A tuple pattern: <code>(a, b)</code>.","A tuple struct or tuple variant pattern: …","A type ascription pattern: <code>foo: f64</code>.","A pattern that matches any value: <code>_</code>.","A path at which a named item is exported (e.g. …","","A path like <code>std::mem::replace</code> possibly containing generic …","A path prefix of imports in a <code>use</code> item: <code>std::...</code>.","A path pattern like <code>Color::Red</code>, optionally qualified with a","A path like <code>std::slice::Iter</code>, optionally qualified with a …","Angle bracketed or parenthesized arguments of a path …","A segment of a path together with any path arguments on …","A lifetime predicate in a <code>where</code> clause: <code>&#39;a: &#39;b + &#39;c</code>.","A type predicate in a <code>where</code> clause: …","A raw pointer type: <code>*const T</code> or <code>*mut T</code>.","A public visibility level: <code>pub</code>.","The explicit Self type in a qualified path: the <code>T</code> in …","A range expression: <code>1..2</code>, <code>1..</code>, <code>..2</code>, <code>1..=2</code>, <code>..=2</code>.","A range pattern: <code>1..=2</code>.","Limit types of a range, inclusive or exclusive.","A raw string like <code>r##&quot;data&quot;##</code>.","The <code>self</code> argument of an associated method.","The <code>self</code> argument of an associated method.","A referencing operation: <code>&amp;a</code> or <code>&amp;mut a</code>.","A reference pattern: <code>&amp;mut var</code>.","A reference type: <code>&amp;&#39;a T</code> or <code>&amp;&#39;a mut T</code>.","The <code>%</code> operator (modulus)","The <code>%=</code> operator","An renamed identifier imported by a <code>use</code> item: …","An array literal constructed from one repeated element: …","The dots in a tuple or slice pattern: <code>[0, 1, ..]</code>.","A visibility level restricted to some path: <code>pub(self)</code> or …","The result of a Syn parser.","A <code>return</code>, with an optional value to be returned.","Return type of a function signature.","The <code>&lt;&lt;</code> operator (shift left)","The <code>&lt;&lt;=</code> operator","The <code>&gt;&gt;</code> operator (shift right)","The <code>&gt;&gt;=</code> operator","A function signature in a trait or implementation: …","A dynamically sized slice pattern: <code>[a, b, ref i @ .., y, z]</code>…","A dynamically sized slice type: <code>[T]</code>.","A static item: <code>static BIKE: Shed = Shed(42)</code>.","A foreign static item in an <code>extern</code> block: <code>static ext: u8</code>.","The mutability of an <code>Item::Static</code> or <code>ForeignItem::Static</code>.","A statement, usually ending in a semicolon.","A macro invocation in statement position.","A UTF-8 string literal: <code>&quot;foo&quot;</code>.","The style of a string literal, either plain quoted or a …","","A struct literal expression: <code>Point { x: 1, y: 1 }</code>.","A struct definition: <code>struct Foo&lt;A&gt; { x: A }</code>.","A struct or struct variant pattern: <code>Variant { x, y, .. }</code>.","The <code>-</code> operator (subtraction)","The <code>-=</code> operator","A type-macro that expands to the name of the Rust type …","","A trait definition: <code>pub trait Iterator { ... }</code>.","A trait alias: <code>pub trait SharableIterator = Iterator + Sync</code>…","A trait used as a bound on a type parameter.","A modifier on a trait bound, currently only used for the <code>?</code> …","An item declaration within the definition of a trait.","An associated constant within the definition of a trait.","An associated function within the definition of a trait.","A macro invocation within the definition of a trait.","An associated type within the definition of a trait.","A trait object type <code>dyn Bound1 + Bound2 + Bound3</code> where …","A try-expression: <code>expr?</code>.","A try block: <code>try { ... }</code>.","A tuple expression: <code>(a, b, c, d)</code>.","A tuple pattern: <code>(a, b)</code>.","A tuple type: <code>(A, B, C, String)</code>.","A tuple struct or tuple variant pattern: …","Returned by <code>TypeGenerics::as_turbofish</code>.","The possible types that a Rust value could have.","A generic type parameter: <code>T: Into&lt;String&gt;</code>.","A type predicate in a <code>where</code> clause: …","A type alias: …","A foreign type in an <code>extern</code> block: <code>type void</code>.","An associated type within the definition of a trait.","An associated type within an impl block.","A type ascription pattern: <code>foo: f64</code>.","A type argument.","A particular type is returned.","A fixed size array type: <code>[T; n]</code>.","A bare function type: <code>fn(usize) -&gt; bool</code>.","Returned by <code>Generics::split_for_impl</code>.","A type contained within invisible delimiters.","An <code>impl Bound1 + Bound2 + Bound3</code> type where <code>Bound</code> is a …","Indication that a type should be inferred by the compiler: …","A macro in the type position.","The never type: <code>!</code>.","A generic type parameter: <code>T: Into&lt;String&gt;</code>.","A trait or lifetime used as a bound on a type parameter.","A parenthesized type equivalent to the inner type.","A path like <code>std::slice::Iter</code>, optionally qualified with a …","A raw pointer type: <code>*const T</code> or <code>*mut T</code>.","A reference type: <code>&amp;&#39;a T</code> or <code>&amp;&#39;a mut T</code>.","A dynamically sized slice type: <code>[T]</code>.","A trait object type <code>dyn Bound1 + Bound2 + Bound3</code> where …","A tuple type: <code>(A, B, C, String)</code>.","A function argument accepted by pattern and type.","A unary operator: <code>*</code>, <code>!</code>, <code>-</code>.","A unary operation: <code>!x</code>, <code>*x</code>.","","A union definition: <code>union Foo&lt;A, B&gt; { x: A, y: B }</code>.","Unit struct or unit variant such as <code>None</code>.","Unnamed fields of a tuple struct or tuple variant such as …","An unnamed field like <code>self.0</code>.","An unsafe block: <code>unsafe { ... }</code>.","A use declaration: <code>use std::collections::HashMap</code>.","A glob import in a <code>use</code> item: <code>*</code>.","A braced group of imports in a <code>use</code> item: <code>{A, B, C}</code>.","An identifier imported by a <code>use</code> item: <code>HashMap</code>.","A path prefix of imports in a <code>use</code> item: <code>std::...</code>.","An renamed identifier imported by a <code>use</code> item: …","A suffix of an import tree in a <code>use</code> item: <code>Type as Renamed</code> …","The variadic argument of a foreign function.","An enum variant.","Tokens in expression position not interpreted by Syn.","","Tokens forming an item not interpreted by Syn.","Tokens in an <code>extern</code> block not interpreted by Syn.","Tokens within the definition of a trait not interpreted by …","Tokens within an impl block not interpreted by Syn.","A raw token literal not interpreted by Syn.","Tokens in pattern position not interpreted by Syn.","Tokens in type position not interpreted by Syn.","A visibility level restricted to some path: <code>pub(self)</code> or …","The visibility level of an item: inherited or <code>pub</code> or …","A <code>where</code> clause in a definition: …","A single predicate in a <code>where</code> clause: <code>T: Deserialize&lt;&#39;de&gt;</code>.","A while loop: <code>while expr { ... }</code>.","A pattern that matches any value: <code>_</code>.","A yield expression: <code>yield expr</code>.","","","","","","","","","","","","","","","","Turn a type’s generics like <code>&lt;X, Y&gt;</code> into a turbofish like …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Parses the literal into a selected number type.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The type being bounded","","","","Trait and lifetime bounds (<code>Clone+Send+&#39;static</code>)","","","","","","","","","","","","","","","","","Parse a set of curly braces and expose their content to …","","","","","","","","Parse a set of square brackets and expose their content to …","","A stably addressed token buffer supporting efficient …he colon in <code>Struct { x: x }</code>. If written in shorthand like …","","","","","","","","","","","","","","","","","","","","","","","Returns an Iterator&lt;Item = &amp;ConstParam&gt; over the constant …","Returns an Iterator&lt;Item = &amp;mut ConstParam&gt; over the …","","","","","","","","","","","","","Define a type that supports parsing and printing a given …","Define a type that supports parsing and printing a …","","","","","","","","","","","","","","","","Explicit discriminant: <code>Variant = 1</codextension traits to provide parsing methods on foreign …","","","","Content stored in the varianteturns the argument unchanged.","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","Returns the argument unchanged.","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Returns the argument unchanged.","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","","If this path consists of a single ident, returns the identame of the variant.","Name of the field, if any.","","","","","","","The <code>example</code> in <code>macro_rules! example { ... }</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","<code>(A, B)</code>","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","Returns <code>true</code> if there are zero fields.","","Determines whether this is a path of length 1 equal to the …","","","","","","","Get an iterator over the borrowed <code>Field</code> items in this …","Get an iterator over the mutably borrowed <code>Field</code> items in …","","","","","","","","","","","","Returns the number of fields.","","","","","","","","","Returns an Iterator&lt;Item = &amp;LifetimeParam&gt; over the …","","","The <code>for&lt;&#39;a&gt;</code> in <code>for&lt;&#39;a&gt; Foo&lt;&amp;&#39;a T&gt;</code>","Any lifetimes from a <code>for</code> binding","","Returns an Iterator&lt;Item = &amp;mut LifetimeParam&gt; over the …","","","","","","","","","","","","","","","","","","Initializes an empty <code>where</code>-clause if there is not one …","","","","","Facility for interpreting structured content inside of an …","","","","","","","","","","","","","","","","","","","","Creates a new <code>Ident</code> with the given <code>string</code> as well as the …","Panics","","Interpret a Syn literal from a proc-macro2 literal.","","","","","","","","Same as <code>Ident::new</code>, but creates a raw identifier (<code>r#ident</code>…","","","","","","","<code>C</code>","","","","","","","","","","","","","","","","","","Parse a set of parentheses and expose their content to …","Parsing interface for parsing a token stream into a syntax …","Parse tokens of source code into the chosen syntax tree …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Parse a syntax tree node from the content of this string …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Parse a proc-macro2 token stream into the chosen syntax …","","Parse the arguments to the attribute as a syntax tree.","See <code>Attribute::parse_args</code>.","Parse the arguments to the attribute using the given …","See <code>Attribute::parse_args_with</code>.","Parse the tokens within the macro invocation’s …","Parse the tokens within the macro invocation’s …","Parse the content of a file of Rust code.","Parses zero or more inner attributes from the stream.","Parse the input TokenStream of a macro, triggering a …","Parse a <code>Path</code> containing no path arguments on any of its …","Parse a pattern, possibly involving <code>|</code>, but not a leading <code>|</code>.","Parse a pattern, possibly involving <code>|</code>, possibly including a","Parses a named (braced struct) field.","Parse the arguments to the attribute, expecting it to …","See <code>Attribute::parse_nested_meta</code>.","Parses zero or more outer attributes from the stream.","Quasi-quotation macro that accepts input like the <code>quote!</code> …","This macro is <code>parse_quote!</code> + <code>quote_spanned!</code>.","Parse a pattern that does <em>not</em> involve <code>|</code> at the top level.","Parse a string of Rust code into the chosen syntax tree …","Parse <code>::&lt;…&gt;</code> with mandatory leading <code>::</code>.","Parses an unnamed (tuple struct) field.","Invoke parser on the content of this string literal.","Parse the body of a block as zero or more statements, …","An alternative to the primary <code>Expr::parse</code> parser (from the …","","","","","","","","","","","","Returns the path that identifies the interpretation of …","Returns the path that begins this structured meta item.","","","","","","The <code>Foo&lt;&amp;&#39;a T&gt;</code> in <code>for&lt;&#39;a&gt; Foo&lt;&amp;&#39;a T&gt;</code>","","","","","","","","","","A punctuated sequence of syntax tree nodes separated by …","","","","","","","","A method’s <code>self</code> receiver, such as <code>&amp;self</code> or …","","","","","Error if this is a <code>Meta::Path</code> or <code>Meta::NameValue</code>.","Error if this is a <code>Meta::Path</code> or <code>Meta::List</code>.","Error if this is a <code>Meta::List</code> or <code>Meta::NameValue</code>.","","","","","","","","","The Self type of the impl.","","","","","","","","","","","","","","","","","","","","","","","","","","Configures the span of this <code>Ident</code>, possibly changing its …","","","","","","","","","","","","","","","","","Returns the span of this <code>Ident</codetrait that can provide the <code>Span</code> of the complete contents …","Split a type’s generics into the pieces required for impl…","","","","","","","Statements in a blockokens representing Rust punctuation, keywords, and …","","","","","","","","","","Trait this impl implements.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns an Iterator&lt;Item = &amp;TypeParam&gt; over the type …","Returns an Iterator&lt;Item = &amp;mut TypeParam&gt; over the type …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Syntax tree traversal to mutate an exclusive borrow of a …","","","","In some positions, types may not contain the <code>+</code> character, …","","","","","A cheaply copyable cursor into a <code>TokenBuffer</code>.","A buffer that can be efficiently traversed multiple times, …","Creates a cursor referencing the first token in the buffer …","","","","","","","Creates a cursor referencing a static empty TokenStream.","Checks whether the cursor is currently pointing at the end …","","Returns the argument unchanged.","Returns the argument unchanged.","If the cursor is pointing at a <code>Group</code> with the given …","If the cursor is pointing at a <code>Ident</code>, returns it along …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","If the cursor is pointing at a <code>Lifetime</code>, returns it along …","If the cursor is pointing at a <code>Literal</code>, return it along …","Creates a <code>TokenBuffer</code> containing all the tokens from the …","Creates a <code>TokenBuffer</code> containing all the tokens from the …","","If the cursor is pointing at a <code>Punct</code>, returns it along …","Returns the <code>Span</code> of the current token, or <code>Span::call_site()</code>…","","Copies all remaining tokens visible from this cursor into a","If the cursor is pointing at a <code>TokenTree</code>, returns it along …","","","","","","","Additional methods for <code>Ident</code> not provided by proc-macro2 …","Parses any identifier including keywords.","Peeks any identifier including keywords. Usage: …","Strips the raw marker <code>r#</code>, if any, from the beginning of an …","Context for parsing a single property in the conventional …","","","Report that the attribute’s content did not conform to …","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Used when parsing <code>list(...)</code> syntax <strong>if</strong> the content inside …","Make a parser that is usable with <code>parse_macro_input!</code> in a …","","","","","Used when parsing <code>key = &quot;value&quot;</code> syntax.","Error returned when a Syn parser cannot parse the input …","Support for checking the next token in a stream to decide …","An empty syntax tree node that consumes no tokens when …","","Parsing interface implemented by all types that can be …","Cursor position within a buffered token stream.","Input to a Syn parser function.","Parser that can parse Rust tokens into a particular syntax …","Types that can be parsed by looking at just one token.","The result of a Syn parser.","Cursor state associated with speculative parsing.","","","","","","","","","","","","Calls the given parser function to parse a syntax tree …","","","","","Add another error message to self such that when …","Provides low-level access to the token representation …","","Extensions to the parsing API with niche applicability.","","","Triggers an error at the current position of the parse …","Triggers an error at the current position of the parse …","Triggers an error at the current position of the parse …","","","","","","","Forks a parse stream so that parsing tokens out of either …","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Render the error as an invocation of <code>compile_error!</code>.","","","Returns whether there are tokens remaining in this stream.","Constructs a helper for peeking at the next token in this …","Usually the <code>ParseStream::error</code> method will be used …","Creates an error with the specified message spanning the …","","Parses a syntax tree node of type <code>T</code>, advancing the …","Parse tokens of source code into the chosen syntax tree …","","Parse a proc-macro2 token stream into the chosen syntax …","","Parse a string of Rust code into the chosen syntax tree …","Parses zero or more occurrences of <code>T</code> separated by …","Looks at the next token in the parse stream to determine …","Looks at the next token in the parse stream to determine …","Looks at the second-next token in the parse stream.","Looks at the third-next token in the parse stream.","","The source location of the error.","Returns the <code>Span</code> of the next token in the parse stream, or …","Speculatively parses tokens from this parse stream, …","Render the error as an invocation of <code>compile_error!</code>.","","","","","","","","","","","","","","","","","","","","Extensions to the <code>ParseStream</code> API to support manipulating …","Extensions to the <code>ParseStream</code> API to support speculative …","Advance this parse stream to the position of a forked …","Returns the delimiter, the span of the delimiter token, …","","An iterator over owned values of type <code>T</code>.","An iterator over owned pairs of type <code>Pair&lt;T, P&gt;</code>.","An iterator over borrowed values of type <code>&amp;T</code>.","An iterator over mutably borrowed values of type <code>&amp;mut T</code>.","A single syntax tree node of type <code>T</code> followed by its …","An iterator over borrowed pairs of type <code>Pair&lt;&amp;T, &amp;P&gt;</code>.","An iterator over mutably borrowed pairs of type …","<strong>A punctuated sequence of syntax tree nodes of type <code>T</code> </strong>…","","","","","","","","","","","","","","","","","","Clears the sequence of all values and punctuation, making …","","","","","","","","","","","","","","","Returns true if either this <code>Punctuated</code> is empty, or it has …","","","","Borrows the first element in this sequence.","Mutably borrows the first element in this sequence.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","Inserts an element at position <code>index</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","Returns an iterator over the contents of this sequence as …","Produces this punctuated pair as a tuple of syntax tree …","Extracts the syntax tree node from this punctuated pair, …","Determines whether this punctuated sequence is empty, …","Returns an iterator over borrowed syntax tree nodes of …","Returns an iterator over mutably borrowed syntax tree …","Borrows the last element in this sequence.","Mutably borrows the last element in this sequence.","Returns the number of syntax tree nodes in this punctuated …","","","","","","","Creates an empty punctuated sequence.","Creates a punctuated pair out of a syntax tree node and an …","","","","","","","","","","","","","Returns an iterator over the contents of this sequence as …","Returns an iterator over the contents of this sequence as …","Parses one or more occurrences of <code>T</code> separated by …","Parses one or more occurrences of <code>T</code> using the given parse …","Parses zero or more occurrences of <code>T</code> separated by …","Parses zero or more occurrences of <code>T</code> using the given parse …","Removes the last punctuated pair from this sequence, or …","Removes the trailing punctuation from this punctuated …","Borrows the punctuation from this punctuated pair, unless …","Mutably borrows the punctuation from this punctuated pair, …","Appends a syntax tree node onto the end of this punctuated …","Appends a trailing punctuation onto the end of this …","Appends a syntax tree node onto the end of this punctuated …","","","","","","","","","","","","","","","","","Determines whether this punctuated sequence ends with a …","","","","","","","","","","","","","","","","","","","","","","","","","Borrows the syntax tree node from this punctuated pair.","Mutably borrows the syntax tree node from this punctuated …","A trait that can provide the <code>Span</code> of the complete contents …","Returns a <code>Span</code> covering the complete contents of this …","<code>abstract</code>","<code>&amp;</code>","<code>&amp;&amp;</code>","<code>&amp;=</code>","<code>as</code>","<code>async</code>","<code>@</code>","<code>auto</code>","<code>await</code>","<code>become</code>","<code>box</code>","<code>{</code>…<code>}</code>","<code>[</code>…<code>]</code>","<code>break</code>","<code>^</code>","<code>^=</code>","<code>:</code>","<code>,</code>","<code>const</code>","<code>continue</code>","<code>crate</code>","<code>default</code>","<code>do</code>","<code>$</code>","<code>.</code>","<code>..</code>","<code>...</code>","<code>..=</code>","<code>dyn</code>","<code>else</code>","<code>enum</code>","<code>=</code>","<code>==</code>","<code>extern</code>","<code>=&gt;</code>","<code>final</code>","<code>fn</code>","<code>for</code>","<code>&gt;=</code>","None-delimited group","<code>&gt;</code>","<code>if</code>","<code>impl</code>","<code>in</code>","<code>&lt;-</code>","<code>&lt;=</code>","<code>let</code>","<code>loop</code>","<code>&lt;</code>","<code>macro</code>","<code>match</code>","<code>-</code>","<code>-=</code>","<code>mod</code>","<code>move</code>","<code>mut</code>","<code>!=</code>","<code>!</code>","<code>|</code>","<code>|=</code>","<code>||</code>","<code>override</code>","<code>(</code>…<code>)</code>","<code>::</code>","<code>%</code>","<code>%=</code>","<code>+</code>","<code>+=</code>","<code>#</code>","<code>priv</code>","<code>pub</code>","<code>?</code>","<code>-&gt;</code>","<code>ref</code>","<code>return</code>","<code>Self</code>","<code>self</code>","<code>;</code>","<code>&lt;&lt;</code>","<code>&lt;&lt;=</code>","<code>&gt;&gt;</code>","<code>&gt;&gt;=</code>","<code>/</code>","<code>/=</code>","<code>*</code>","<code>*=</code>","<code>static</code>","<code>struct</code>","<code>super</code>","<code>~</code>","Marker trait for types that represent single tokens.","<code>trait</code>","<code>try</code>","<code>type</code>","<code>typeof</code>","<code>_</code>","<code>union</code>","<code>unsafe</code>","<code>unsized</code>","<code>use</code>","<code>virtual</code>","<code>where</code>","<code>while</code>","<code>yield</codeeturns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</codeyntax tree traversal to mutate an exclusive borrow of a …i":[0,135,135,135,152,0,0,25,168,25,0,153,0,153,25,0,0,25,168,0,0,0,25,135,135,135,135,135,135,0,25,127,0,134,134,25,127,127,25,25,127,69,25,25,72,84,111,116,137,153,0,0,153,25,336,0,0,0,0,186,136,0,135,135,21,84,135,0,0,164,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,84,0,25,0,0,0,0,0,0,0,127,84,106,111,116,0,25,0,0,0,0,0,84,135,0,0,0,100,25,100,168,135,69,0,137,25,84,0,0,0,0,0,0,0,168,0,25,25,168,160,11,127,0,164,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,135,25,0,72,77,81,153,0,12,0,25,137,0,0,0,0,0,0,0,0,164,0,25,135,0,25,84,106,111,116,137,164,168,0,25,79,0,0,0,0,25,84,135,135,125,100,12,16,64,135,136,168,79,125,152,162,136,135,137,11,25,134,137,168,152,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,25,100,137,168,0,0,0,0,168,160,0,25,137,0,336,0,122,25,137,168,135,135,100,25,137,160,0,25,0,135,135,135,135,0,137,168,84,106,0,0,0,127,0,21,25,84,137,135,135,0,77,84,84,0,0,0,0,0,0,0,168,25,25,25,137,168,137,0,0,72,81,84,106,111,116,137,153,186,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,122,0,25,21,84,16,16,64,25,84,0,0,0,0,0,0,0,0,25,77,84,106,111,116,127,137,168,0,0,0,0,25,137,25,89,121,170,53,141,179,9,33,49,154,151,48,34,103,159,1,28,35,121,15,19,20,26,27,28,29,30,31,32,33,34,35,36,36,37,38,39,40,41,42,43,44,45,45,46,47,47,48,49,50,51,51,52,52,53,54,55,56,57,58,59,60,61,62,63,66,68,70,73,74,75,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,107,108,109,110,112,113,114,115,117,118,119,120,123,124,138,139,140,141,142,143,144,145,146,147,148,149,165,167,184,185,95,29,133,175,29,38,3,5,3,5,28,31,36,36,58,61,88,118,35,39,46,62,68,7,8,1,2,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,3,5,132,336,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,7,8,1,2,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,3,5,132,336,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,83,73,74,82,83,96,114,157,172,181,17,23,48,56,86,89,90,95,105,144,163,0,10,26,42,54,143,169,180,0,32,0,138,28,35,139,7,8,1,2,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,3,5,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,7,8,1,2,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,3,5,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,7,9,101,154,19,66,67,73,74,75,82,83,85,93,95,108,112,114,117,123,147,149,157,68,124,185,41,62,71,71,36,36,75,85,112,117,178,35,121,92,37,87,0,0,20,71,76,152,74,75,112,113,114,90,117,118,119,13,133,15,166,56,142,29,38,49,124,185,181,169,171,176,178,179,180,26,59,143,145,146,182,41,52,52,23,86,7,7,8,1,2,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,3,5,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,14,27,44,74,75,85,93,96,97,117,119,155,156,166,32,34,39,40,42,44,48,50,53,54,55,57,60,63,66,85,93,117,166,0,87,183,68,15,22,24,56,94,98,144,7,7,7,8,1,2,9,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,64,65,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,3,3,5,5,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,121,170,39,76,7,7,7,7,7,7,7,8,1,2,9,10,11,12,12,12,12,13,14,15,16,16,16,17,18,19,20,20,20,20,21,22,23,24,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,64,64,64,65,65,66,67,68,69,70,71,72,72,72,72,73,74,74,75,76,77,77,77,78,79,80,81,81,81,82,83,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,100,100,100,100,100,101,102,103,104,105,106,106,106,106,106,107,108,109,110,111,111,111,111,111,112,113,114,115,116,116,116,116,116,117,118,119,120,121,122,122,122,123,124,125,126,127,127,127,127,127,127,127,127,128,129,130,131,3,3,5,5,132,336,133,134,135,136,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,138,139,140,141,142,143,144,145,146,147,148,149,150,150,151,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,168,168,168,168,168,168,168,168,168,168,168,168,168,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,33,20,85,86,90,94,95,96,97,98,109,112,114,117,119,121,155,156,157,150,40,171,71,76,154,159,68,7,8,1,2,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,3,5,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,9,15,19,20,74,75,85,86,87,91,92,93,94,95,96,97,98,101,102,103,108,109,112,114,117,119,121,138,151,155,156,157,41,90,172,39,161,42,65,165,35,121,158,170,7,8,1,2,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,3,5,132,336,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,16,16,16,16,152,150,152,70,89,90,95,105,16,16,31,32,37,39,46,62,99,150,139,27,30,16,54,169,44,165,123,73,82,179,71,35,76,78,83,170,71,52,52,45,45,46,71,76,154,159,47,47,91,110,115,120,167,174,71,48,38,66,149,0,10,49,92,78,35,19,53,93,108,123,138,141,178,179,67,183,184,185,17,7,9,73,127,128,129,130,131,3,5,132,7,30,60,35,35,35,121,158,170,71,18,33,49,50,59,78,121,140,145,146,158,161,170,176,182,0,0,0,7,9,12,13,14,15,17,18,20,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,125,127,128,128,129,130,131,3,5,132,133,135,136,150,151,153,154,158,160,163,164,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,186,0,7,10,13,10,13,133,133,0,10,0,150,137,137,19,10,13,10,0,0,137,0,154,19,128,163,25,7,9,39,44,68,124,140,141,147,149,165,10,12,13,14,51,51,56,78,133,144,146,161,177,159,10,80,161,0,51,51,56,144,146,177,57,121,49,123,87,103,12,12,12,56,144,95,55,27,30,150,123,90,92,22,54,85,87,91,93,94,96,97,99,107,108,109,110,112,113,114,115,117,119,120,165,167,169,7,9,127,128,129,130,131,3,5,132,70,88,107,113,118,7,7,7,8,1,2,9,9,10,12,13,14,15,16,17,18,19,20,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,64,65,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,127,127,128,128,129,129,130,130,131,131,3,3,5,5,132,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,160,161,163,164,165,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,65,132,0,71,104,178,52,52,93,108,163,22,94,10,138,127,128,129,130,131,3,5,95,41,7,8,1,2,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,3,5,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,7,9,3,5,7,8,1,2,9,10,12,13,14,15,16,17,18,19,20,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,127,128,129,130,131,3,5,132,133,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,160,161,163,164,165,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,0,128,129,130,131,3,5,132,13,133,90,95,96,99,101,7,8,1,2,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,3,5,132,336,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,7,8,1,2,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,3,5,132,336,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,58,49,19,34,75,85,93,97,108,112,117,119,123,147,155,159,184,7,8,1,2,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,3,5,132,336,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,71,71,97,109,114,119,43,148,173,24,98,18,7,61,89,90,92,95,121,170,99,128,129,130,131,132,14,132,156,121,170,23,86,19,20,85,86,87,88,92,93,94,95,96,97,98,99,107,108,109,117,118,119,0,71,80,62,168,172,181,186,63,0,0,217,217,218,217,218,218,218,218,218,218,217,218,218,218,217,218,218,218,217,217,218,218,218,218,218,218,217,218,217,218,217,218,0,337,337,337,0,220,220,220,220,220,220,220,0,220,220,220,220,220,0,0,0,211,0,0,0,0,0,0,0,223,222,226,223,224,225,222,226,223,224,225,223,222,224,222,224,222,223,224,0,223,225,226,223,224,222,222,222,223,223,225,223,222,222,226,223,224,225,225,222,226,223,224,225,222,222,222,223,223,222,222,208,223,211,225,211,223,211,223,226,223,223,223,222,222,223,223,222,222,224,222,223,222,226,223,224,225,222,226,223,224,225,222,226,223,224,225,0,0,338,339,236,0,0,0,0,0,0,0,0,236,230,233,238,234,235,202,203,236,230,233,238,234,235,202,203,236,230,230,233,234,235,202,236,230,233,234,235,202,236,236,230,230,230,230,230,230,230,230,230,233,238,234,235,202,203,236,230,230,230,230,230,230,230,233,238,234,235,202,203,236,230,230,230,233,238,234,235,202,203,230,236,236,230,230,230,230,230,230,233,238,234,235,202,203,230,236,233,238,234,235,202,203,233,238,234,235,202,203,230,230,230,230,230,230,230,230,236,236,230,230,230,233,238,234,235,202,203,230,236,230,233,234,235,202,236,230,236,230,230,233,238,234,235,202,203,236,230,233,238,234,235,202,203,236,230,233,238,234,235,202,203,236,236,236,0,340,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,239,194,240,241,242,243,244,245,246,247,248,249,195,250,251,252,253,254,196,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,193,197,273,274,198,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,239,194,240,241,242,243,244,245,246,247,248,249,195,250,251,252,253,254,196,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,193,197,273,274,198,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,239,194,240,241,242,243,244,245,246,247,248,249,195,250,251,252,253,254,196,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,193,197,273,274,198,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,239,194,240,241,242,243,244,245,246,247,248,249,195,250,251,252,253,254,196,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,193,197,273,274,198,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,239,194,240,241,242,243,244,245,246,247,248,249,195,250,251,252,253,254,196,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,193,197,273,274,198,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,194,287,290,291,293,294,295,296,300,304,307,308,311,312,316,318,320,321,323,328,330,332,194,287,290,291,293,294,295,296,300,304,307,308,311,312,316,318,320,321,323,328,330,332,239,194,240,241,242,243,244,245,246,247,248,249,195,250,251,252,253,254,196,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,193,197,273,274,198,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,239,194,240,241,242,243,244,245,246,247,248,249,195,250,251,252,253,254,196,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,193,197,273,274,198,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,239,194,240,241,242,243,244,245,246,247,248,249,195,250,251,252,253,254,196,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,193,197,273,274,198,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,239,194,240,241,242,243,244,245,246,247,248,249,195,250,251,252,253,254,196,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,193,197,273,274,198,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,239,194,240,241,242,243,244,245,246,247,248,249,195,250,251,252,253,254,196,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,193,197,273,274,198,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,194,240,241,242,243,244,245,246,247,248,249,195,250,251,252,253,254,196,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,193,197,273,274,198,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,194,240,241,242,243,244,245,246,247,248,249,195,250,251,252,253,254,196,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,193,197,273,274,198,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,239,240,241,242,243,244,245,246,247,248,249,195,250,251,252,253,254,196,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,193,197,273,274,198,275,276,277,278,279,280,281,282,283,284,285,286,333,334,335,194,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,239,333,334,335,239,194,240,241,242,243,244,245,246,247,248,249,195,250,251,252,253,254,196,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,193,197,273,274,198,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,194,240,241,242,243,244,245,246,247,248,249,195,250,251,252,253,254,196,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,193,197,273,274,198,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,239,194,240,241,242,243,244,245,246,247,248,249,195,250,251,252,253,254,196,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,193,197,273,274,198,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,239,194,240,241,242,243,244,245,246,247,248,249,195,250,251,252,253,254,196,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,193,197,273,274,198,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,239,194,240,241,242,243,244,245,246,247,248,249,195,250,251,252,253,254,196,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,193,197,273,274,198,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,0,0,341,341,0,341,341,0,341,341,0,341,341,0,341,341,0,341,341,0,341,341,0,341,341,0,341,341,0,341,341,0,341,341,0,341,341,0,341,341,0,341,341,0,341,341,0,341,341,0,341,341,0,341,341,0,341,341,0,341,341,0,341,341,0,341,341,0,341,341,0,341,341,0,341,341,0,341,341,0,341,341,0,341,341,0,341,341,0,341,341,0,341,341,0,341,341,0,341,341,0,341,341,0,341,341,0,341,341,0,341,341,0,341,341,0,341,341,0,341,341,0,341,341,0,341,341,0,341,341,0,341,341,0,341,341,0,341,341,0,341,341,0,341,341,0,341,341,0,341,341,0,341,341,0,341,341,0,341,341,0,341,341,0,341,341,0,341,341,0,341,341,0,341,341,0,341,341,0,341,341,0,341,341,0,341,341,0,341,341,0,341,341,0,341,341,0,341,341,0,341,341,0,341,341,0,341,341,0,341,341,0,341,341,0,341,341,0,341,341,0,341,341,0,341,341,0,341,341,0,341,341,0,341,341,0,341,341,0,341,341,0,341,341,0,341,341,0,341,341,0,341,341,0,341,341,0,341,341,0,341,341,0,341,341,0,341,341,0,341,341,0,341,341,0,341,341,0,341,341,0,341,341,0,341,341,0,341,341,0,341,341,0,341,341,0,341,341,0,341,341,0,341,341,0,341,341,0,341,341,0,341,341,0,341,341,0,341,341,0,341,341,0,341,341,0,341,341,0,341,341,0,341,341,0,341,341,0,341,341,0,341,341,0,341,341,0,341,341,0,341,341,0,341,341,0,341,341,0,341,341,0,341,341,0,341,341,0,341,341,0,341,341,0,341,341,0,341,341,0,341,341,0,341,341,0,341,341,0,341,341,0,341,341,0,341,341,0,341,341,0,341,341,0,341,341,0,341,341,0,341,341,0,341,341,0,341,341,0,341,341,0,341,341,0,341,341,0,341,341,0,341,341,0,341,341,0,341,341,0,341,341,0,341,341,0,341,341,0,341,341,0,341,341,0,341,341,0,341,341,0,341,341,0,341,341,0,341,341,0,341,341,0,341,341,0,341,341,0,341,341,0,341,341,0,341,341,0,341,341,0,341,341,0,341,341,0,341,341,0,341,341,0,341,341,0,341,341,0,341,341,0,341,341,0,341,341,0,341,341,0,341,341,0,341,341,0,341,341,0,341,341,0,341,341,0,341,341,0,341,341,0,341,341,0,341,341],"fp":[[3,"TypeGenerics"],[3,"Turbofish"],[3,"LitInt"],[15,"str"],[3,"LitFloat"],[6,"Result"],[3,"Ident"],[3,"ImplGenerics"],[3,"Lifetime"],[3,"Attribute"],[4,"AttrStyle"],[4,"Meta"],[3,"MetaList"],[3,"MetaNameValue"],[3,"Variant"],[4,"Fields"],[3,"FieldsNamed"],[3,"FieldsUnnamed"],[3,"Field"],[3,"DeriveInput"],[4,"Data"],[3,"DataStruct"],[3,"DataEnum"],[3,"DataUnion"],[4,"Expr"],[3,"ExprArray"],[3,"ExprAssign"],[3,"ExprAsync"],[3,"ExprAwait"],[3,"ExprBinary"],[3,"ExprBlock"],[3,"ExprBreak"],[3,"ExprCall"],[3,"ExprCast"],[3,"ExprClosure"],[3,"ExprConst"],[3,"ExprContinue"],[3,"ExprField"],[3,"ExprForLoop"],[3,"ExprGroup"],[3,"ExprIf"],[3,"ExprIndex"],[3,"ExprInfer"],[3,"ExprLet"],[3,"ExprLit"],[3,"ExprLoop"],[3,"ExprMacro"],[3,"ExprMatch"],[3,"ExprMethodCall"],[3,"ExprParen"],[3,"ExprPath"],[3,"ExprRange"],[3,"ExprReference"],[3,"ExprRepeat"],[3,"ExprReturn"],[3,"ExprStruct"],[3,"ExprTry"],[3,"ExprTryBlock"],[3,"ExprTuple"],[3,"ExprUnary"],[3,"ExprUnsafe"],[3,"ExprWhile"],[3,"ExprYield"],[4,"Member"],[3,"Index"],[3,"FieldValue"],[3,"Label"],[3,"Arm"],[4,"RangeLimits"],[3,"File"],[3,"Generics"],[4,"GenericParam"],[3,"LifetimeParam"],[3,"TypeParam"],[3,"ConstParam"],[3,"BoundLifetimes"],[4,"TypeParamBound"],[3,"TraitBound"],[4,"TraitBoundModifier"],[3,"WhereClause"],[4,"WherePredicate"],[3,"PredicateLifetime"],[3,"PredicateType"],[4,"Item"],[3,"ItemConst"],[3,"ItemEnum"],[3,"ItemExternCrate"],[3,"ItemFn"],[3,"ItemForeignMod"],[3,"ItemImpl"],[3,"ItemMacro"],[3,"ItemMod"],[3,"ItemStatic"],[3,"ItemStruct"],[3,"ItemTrait"],[3,"ItemTraitAlias"],[3,"ItemType"],[3,"ItemUnion"],[3,"ItemUse"],[4,"UseTree"],[3,"UsePath"],[3,"UseName"],[3,"UseRename"],[3,"UseGlob"],[3,"UseGroup"],[4,"ForeignItem"],[3,"ForeignItemFn"],[3,"ForeignItemStatic"],[3,"ForeignItemType"],[3,"ForeignItemMacro"],[4,"TraitItem"],[3,"TraitItemConst"],[3,"TraitItemFn"],[3,"TraitItemType"],[3,"TraitItemMacro"],[4,"ImplItem"],[3,"ImplItemConst"],[3,"ImplItemFn"],[3,"ImplItemType"],[3,"ImplItemMacro"],[3,"Signature"],[4,"FnArg"],[3,"Receiver"],[3,"Variadic"],[4,"StaticMutability"],[4,"ImplRestriction"],[4,"Lit"],[3,"LitStr"],[3,"LitByteStr"],[3,"LitByte"],[3,"LitChar"],[3,"LitBool"],[3,"Macro"],[4,"MacroDelimiter"],[4,"BinOp"],[4,"UnOp"],[4,"Pat"],[3,"PatIdent"],[3,"PatOr"],[3,"PatParen"],[3,"PatReference"],[3,"PatRest"],[3,"PatSlice"],[3,"PatStruct"],[3,"PatTuple"],[3,"PatTupleStruct"],[3,"PatType"],[3,"PatWild"],[3,"FieldPat"],[3,"Path"],[3,"PathSegment"],[4,"PathArguments"],[4,"GenericArgument"],[3,"AngleBracketedGenericArguments"],[3,"AssocType"],[3,"AssocConst"],[3,"Constraint"],[3,"ParenthesizedGenericArguments"],[3,"QSelf"],[4,"Visibility"],[3,"VisRestricted"],[4,"FieldMutability"],[3,"Block"],[4,"Stmt"],[3,"Local"],[3,"LocalInit"],[3,"StmtMacro"],[4,"Type"],[3,"TypeArray"],[3,"TypeBareFn"],[3,"TypeGroup"],[3,"TypeImplTrait"],[3,"TypeInfer"],[3,"TypeMacro"],[3,"TypeNever"],[3,"TypeParen"],[3,"TypePath"],[3,"TypePtr"],[3,"TypeReference"],[3,"TypeSlice"],[3,"TypeTraitObject"],[3,"TypeTuple"],[3,"Abi"],[3,"BareFnArg"],[3,"BareVariadic"],[4,"ReturnType"],[4,"Ordering"],[15,"bool"],[3,"Formatter"],[3,"Error"],[4,"Result"],[6,"Result"],[3,"SelfType"],[3,"Underscore"],[3,"Crate"],[3,"Extern"],[3,"SelfValue"],[3,"Super"],[15,"usize"],[3,"Literal"],[4,"Option"],[3,"Iter"],[3,"IterMut"],[3,"Span"],[15,"u8"],[15,"char"],[3,"TokenStream"],[8,"Parse"],[6,"ParseStream"],[3,"TokenStream"],[8,"Parser"],[3,"Vec"],[8,"FnMut"],[3,"DelimSpan"],[3,"String"],[3,"TypeId"],[3,"TokenBuffer"],[3,"Cursor"],[4,"Delimiter"],[3,"ParseNestedMeta"],[8,"Display"],[3,"Error"],[3,"ParseBuffer"],[3,"StepCursor"],[3,"Nothing"],[3,"Lookahead1"],[8,"IntoIterator"],[3,"LexError"],[8,"ToTokens"],[3,"Punctuated"],[8,"Peek"],[3,"Demand"],[3,"Pairs"],[3,"IntoPairs"],[3,"IntoIter"],[4,"Pair"],[8,"Debug"],[3,"PairsMut"],[3,"Group"],[3,"Abstract"],[3,"As"],[3,"Async"],[3,"Auto"],[3,"Await"],[3,"Become"],[3,"Box"],[3,"Break"],[3,"Const"],[3,"Continue"],[3,"Default"],[3,"Do"],[3,"Dyn"],[3,"Else"],[3,"Enum"],[3,"Final"],[3,"Fn"],[3,"For"],[3,"If"],[3,"Impl"],[3,"In"],[3,"Let"],[3,"Loop"],[3,"Macro"],[3,"Match"],[3,"Mod"],[3,"Move"],[3,"Mut"],[3,"Override"],[3,"Priv"],[3,"Pub"],[3,"Ref"],[3,"Return"],[3,"Static"],[3,"Struct"],[3,"Trait"],[3,"Try"],[3,"Type"],[3,"Typeof"],[3,"Union"],[3,"Unsafe"],[3,"Unsized"],[3,"Use"],[3,"Virtual"],[3,"Where"],[3,"While"],[3,"Yield"],[3,"And"],[3,"AndAnd"],[3,"AndEq"],[3,"At"],[3,"Caret"],[3,"CaretEq"],[3,"Colon"],[3,"Comma"],[3,"Dollar"],[3,"Dot"],[3,"DotDot"],[3,"DotDotDot"],[3,"DotDotEq"],[3,"Eq"],[3,"EqEq"],[3,"FatArrow"],[3,"Ge"],[3,"Gt"],[3,"LArrow"],[3,"Le"],[3,"Lt"],[3,"Minus"],[3,"MinusEq"],[3,"Ne"],[3,"Not"],[3,"Or"],[3,"OrEq"],[3,"OrOr"],[3,"PathSep"],[3,"Percent"],[3,"PercentEq"],[3,"Plus"],[3,"PlusEq"],[3,"Pound"],[3,"Question"],[3,"RArrow"],[3,"Semi"],[3,"Shl"],[3,"ShlEq"],[3,"Shr"],[3,"ShrEq"],[3,"Slash"],[3,"SlashEq"],[3,"Star"],[3,"StarEq"],[3,"Tilde"],[3,"Brace"],[3,"Bracket"],[3,"Paren"],[4,"StrStyle"],[8,"IdentExt"],[8,"Speculative"],[8,"AnyDelimiter"],[8,"Spanned"],[8,"VisitMut"]]},\
"unicode_ident":{"doc":"github crates-io docs-rs","t":"FF","n":["is_xid_continue","is_xid_start"],"q":["unicode_ident",""],"d":["",""],"i":[0,0],"f":[[1,2],[1,2]],"p":[[15,"char"],[15,"bool"]]},\
"unicode_segmentation":{"doc":"Iterators which split strings on Grapheme Cluster, Word or …","t":"DEDDNNNNRDDDDIDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKKKKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKKK","n":["GraphemeCursor","GraphemeIncomplete","GraphemeIndices","Graphemes","InvalidOffset","NextChunk","PreContext","PrevChunk","UNICODE_VERSION","USentenceBoundIndices","USentenceBounds","UWordBoundIndices","UWordBounds","UnicodeSegmentation","UnicodeSentences","UnicodeWordIndices","UnicodeWords","as_str","as_str","as_str","as_str","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone","cur_cursor","eq","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","grapheme_indices","graphemes","into","into","into","into","into","into","into","into","into","into","into","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","is_boundary","new","next","next","next","next","next","next","next","next","next","next_back","next_back","next_back","next_back","next_back","next_back","next_boundary","prev_boundary","provide_context","set_cursor","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","split_sentence_bound_indices","split_sentence_bounds","split_word_bound_indices","split_word_bounds","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unicode_sentences","unicode_word_indices","unicode_words"],"q":["unicode_segmentation","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Cursor-based segmenter for grapheme clusters.","An error return indicating that not enough content was …","External iterator for grapheme clusters and byte offsets.","External iterator for a string’s grapheme clusters.","An error returned when the chunk given does not contain …","When requesting <code>next_boundary</code>, the cursor is moving past …","More pre-context is needed. The caller should call …","When requesting <code>prev_boundary</code>, the cursor is moving past …","The version of Unicode that this version of …","External iterator for sentence boundaries and byte offsets.","External iterator for a string’s sentence boundaries.","External iterator for word boundaries and byte offsets.","External iterator for a string’s word boundaries.","Methods for segmenting strings according to Unicode …","An iterator over the substrings of a string which, after …","An iterator over the substrings of a string which, after …","An iterator over the substrings of a string which, after …","View the underlying data (the part yet to be iterated) as …","View the underlying data (the part yet to be iterated) as …","View the underlying data (the part yet to be iterated) as …","View the underlying data (the part yet to be iterated) as …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The current offset of the cursor. Equal to the last value …","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns an iterator over the grapheme clusters of <code>self</code> and …","Returns an iterator over the grapheme clusters of <code>self</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","Determine whether the current cursor location is a …","Create a new cursor. The string and initial offset are …","","","","","","","","","","","","","","","","Find the next boundary after the current cursor position. …","Find the previous boundary after the current cursor …","Provide additional pre-context when it is needed to decide …","Set the cursor to a new location in the same string.","","","","","","","Returns an iterator over substrings of <code>self</code>, split on …","Returns an iterator over substrings of <code>self</code> separated on …","Returns an iterator over substrings of <code>self</code>, split on …","Returns an iterator over substrings of <code>self</code> separated on …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns an iterator over substrings of <code>self</code> separated on …","Returns an iterator over the words of <code>self</code>, separated on …","Returns an iterator over the words of <code>self</code>, separated on …"],"i":[0,0,0,0,11,11,11,11,0,0,0,0,0,0,0,0,0,1,3,4,5,16,18,1,3,6,11,7,8,9,4,5,16,18,1,3,6,11,7,8,9,4,5,1,3,6,7,8,9,4,5,6,11,3,6,11,16,18,1,3,6,11,7,8,9,4,5,20,20,16,18,1,3,6,11,7,8,9,4,5,16,18,1,3,7,8,9,4,5,6,6,16,18,1,3,7,8,9,4,5,16,18,1,3,4,5,6,6,6,6,1,3,8,9,4,5,20,20,20,20,16,18,1,3,6,11,7,8,9,4,5,16,18,1,3,6,11,7,8,9,4,5,16,18,1,3,6,11,7,8,9,4,5,20,20,20],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[1,2],[3,2],[4,2],[5,2],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[1,1],[3,3],[6,6],[7,7],[8,8],[9,9],[4,4],[5,5],[6,10],[[11,11],12],[[3,13],14],[[6,13],14],[[11,13],14],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[12,1],[12,3],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[6,2,10],[[15,[12,11]]]],[[10,10,12],6],[16,[[17,[2]]]],[18,17],[1,17],[3,[[17,[2]]]],[7,[[17,[2]]]],[8,[[17,[2]]]],[9,17],[4,[[17,[2]]]],[5,17],[16,[[17,[2]]]],[18,17],[1,17],[3,[[17,[2]]]],[4,[[17,[2]]]],[5,17],[[6,2,10],[[15,[[17,[10]],11]]]],[[6,2,10],[[15,[[17,[10]],11]]]],[[6,2,10]],[[6,10]],[1],[3],[8],[9],[4],[5],[[],9],[[],8],[[],5],[[],4],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],7],[[],18],[[],16]],"p":[[3,"GraphemeIndices"],[15,"str"],[3,"Graphemes"],[3,"UWordBounds"],[3,"UWordBoundIndices"],[3,"GraphemeCursor"],[3,"UnicodeSentences"],[3,"USentenceBounds"],[3,"USentenceBoundIndices"],[15,"usize"],[4,"GraphemeIncomplete"],[15,"bool"],[3,"Formatter"],[6,"Result"],[4,"Result"],[3,"UnicodeWords"],[4,"Option"],[3,"UnicodeWordIndices"],[3,"TypeId"],[8,"UnicodeSegmentation"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
